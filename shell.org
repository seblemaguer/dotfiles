#+TITLE: SHELL configuration part
#+AUTHOR: SÃ©bastien Le Maguer
#+EMAIL: lemagues@surface
#+DATE: 19 June 2021
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  fr
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://seblemaguer.github.io/css/main.css" />

* Profile
#+begin_src shell :results output replace :tangle ~/.profile
  #!/bin/sh
  #-*- mode: sh; -*-

  ###################################################################################
  ### Entry point
  ###################################################################################
  export USER_ENV_DIR=$HOME/environment/local
  export USER_WORKTOOLS_DIR=$HOME/work/tools/local
  export USER_WORKOWNTOOLS_DIR=$HOME/work/maintained_tools/local

  ###################################################################################
  ### Tools variable
  ###################################################################################

  # Python part
  export PYTHON=python3

  # Perl part
  export PERL5LIB=$USER_ENV_DIR/perl:$USER_WORKTOOLS_DIR/perl:$USER_WORKOWNTOOLS_DIR/perl:$PERL5LIB
  export PERL5LIB=$PERL5LIB:$USER_ENV_DIR/perl/lib/perl5/darwin-thread-multi-2level/
  export PERL_MB_OPT="--install_base \"$USER_ENV_DIR/perl\""
  export PERL_MM_OPT="INSTALL_BASE=$USER_ENV_DIR/perl"

  # Groovy part
  export GROOVY_HOME="/usr/share/groovy"

  # Go part
  export GOPATH=$USER_ENV_DIR/go

  # NPM part
  NPM_PACKAGES="${USER_ENV_DIR}/npm_packages"
  export NODE_PATH="$NPM_PACKAGES/lib/node_modules:$NODE_PATH"

  ###################################################################################
  ### Path variables
  ###################################################################################

  # Main path variable
  export PATH=${HOME}/bin:${HOME}/environment/local/bin:$PATH
  export PATH=$USER_WORKTOOLS_DIR/bin/:$USER_WORKOWNTOOLS_DIR/bin/:$PATH
  export PATH=$USER_WORKTOOLS_DIR/share/matlab/bin:$PATH
  export PATH=$HOME/.local/bin:$PATH
  export PATH=$USER_ENV_DIR/go/bin:$PATH
  export PATH=$NPM_PACKAGES/bin:$PATH

  # Libraries
  export DYLD_LIBRARY_PATH=$USER_ENV_DIR/lib:$USER_WORKTOOLS_DIR/lib:$USER_WORKOWNTOOLS_DIR/lib:/usr/local/opt/icu4c/lib/:$HOME/.local/lib:$DYLD_LIBRARY_PATH
  export LD_LIBRARY_PATH=$USER_ENV_DIR/lib:$USER_WORKTOOLS_DIR/lib:$USER_WORKOWNTOOLS_DIR/lib:/usr/local/opt/icu4c/lib/:$HOME/.local/lib:$LD_LIBRARY_PATH
  export LIBRARY_PATH=$USER_ENV_DIR/lib:$USER_WORKTOOLS_DIR/lib:$USER_WORKOWNTOOLS_DIR/lib:/usr/local/opt/icu4c/lib/:$HOME/.local/lib:$LIBRARY_PATH
  export PKG_CONFIG_PATH=$USER_ENV_DIR/lib/pkgconfig:$USER_WORKTOOLS_DIR/lib/pkgconfig:$USER_WORKOWNTOOLS_DIR/lib/pkgconfig:$PKG_CONFIG_PATH

  # Include path
  export CPATH=$USER_ENV_DIR/include:$USER_WORKTOOLS_DIR/include:$USER_WORKOWNTOOLS_DIR/include:/usr/include/jsoncpp/:$CPATH
  export C_INCLUDE_PATH=$USER_ENV_DIR/include:$USER_WORKTOOLS_DIR/include:$USER_WORKOWNTOOLS_DIR/include:/usr/include/jsoncpp/:$C_INCLUDE_PATH
  export CPLUS_INCLUDE_PATH=$USER_ENV_DIR/include:$USER_WORKTOOLS_DIR/include:$USER_WORKOWNTOOLS_DIR/include:/usr/include/jsoncpp/:$CPLUS_INCLUDE_PATH

  # Manpage
  export MANPATH=$USER_ENV_DIR/share/man:$USER_WORKTOOLS_DIR/share/man:$USER_WORKOWNTOOLS_DIR/share/man:$NPM_PACKAGES/share/man:$MANPATH
  export INFOPATH=$USER_ENV_DIR/share/info:$INFOPATH

  # Ruby
  export PATH="$HOME/.local/share/gem/ruby/3.0.0/bin:$PATH"
  export GEM_HOME="$USER_ENV_DIR/gems"
  export PATH="$GEM_HOME/bin:$PATH"

  #################################################################################ex#
  ### Remaining variables
  ###################################################################################

  # Change the locale !
  cur_locale=`locale -a | grep utf8  | grep "en_\(IE\|GB\|US\)" | head -n 1`
  export LC_ALL=$cur_locale
  export LANG=$cur_locale

  ###################################################################################
  ### Toolkit
  ###################################################################################
  export SDKMAN_DIR="$HOME/.sdkman"
  [[ -s "$HOME/.gvm/bin/gvm-init.sh" ]] && source "$HOME/.gvm/bin/gvm-init.sh"
  [[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && source "$SDKMAN_DIR/bin/sdkman-init.sh"

  # Indicate that the profile is loaded
  export PROFILE_LOADED=True

#+end_src

* bash
#+begin_src shell :results output replace :tangle ~/.bashrc
  #!/bin/bash

  ########################################################################################
  #### Tramp emacs mandatory step
  ########################################################################################
  case "$TERM" in
      "dumb")
          export PS1="> "
          return
          ;;
      xterm*|rxvt*|eterm*|screen*)
          tty -s && export PS1="$ "
          ;;
  esac

  ########################################################################################
  #### Load profile
  ########################################################################################
  if [[ "$PROFILE_LOADED" != "True" ]]
  then
      source ~/.profile
  fi


  ########################################################################################
  #### Environment variables
  ########################################################################################
  if [[ `which emacs` = "" ]]; then
      export EDITOR=vim
  else
      export EDITOR=emacs
  fi

  ########################################################################################
  #### Aliases
  ########################################################################################

  # Some utilities
  alias svim='sudo vim'
  alias h='cd ~'
  alias ..='cd ..'
  alias cd..='cd ..'
  alias ...='cd ../..'
  alias cim='vim'
  alias root='sudo su'
  alias dfh='df -h'

  # = adding colors Color
  alias ls='ls -Ch --color=auto'
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'

  # Cluster aliases
  alias msinfo='sinfo -o "%25N %.3a %.9P %10c  %10m  %25f  %20G %10l %50E"'
  alias msqueue='squeue -o "%.8i %.9P %.20j %.8u %.8T %.10M %.12l %.8C %.15b %.15R"'
  alias check_queue="msqueue | sed 's/[ \t]\+/ /g' | cut -d' ' -f5,6,10 | sed 's/:.*//g' | sort | uniq -c | grep -v 'USER STATE' | sed 's/^[ ]*//g' | sort -h"

  ########################################################################################
  #### Prompt
  ########################################################################################

  BGREEN='\[\033[1;32m\]'
  GREEN='\[\033[0;32m\]'
  BRED='\[\033[1;31m\]'
  RED='\[\033[0;31m\]'
  BBLUE='\[\033[1;34m\]'
  BLUE='\[\033[0;34m\]'
  NORMAL='\[\033[00m\]'
  TIME=$(date +%H:%M)

  if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ];
  then
      PS1="${GREEN}[\A] ${NORMAL}\u:${BLUE}\h@${RED}\w ${BLUE}: ${NORMAL}"
  else
      PS1="${GREEN}[\A] ${NORMAL}\u@${RED}\w ${BLUE}: ${NORMAL}"
  fi

  ########################################################################################
  #### History
  ########################################################################################
  export HISTCONTROL=erasedups:ignorespace
  export HISTIGNORE="cd:ls:[bf]g:clear"
  if [[ "$(set -o | grep 'emacs\|\bvi\b' | cut -f2 | tr '\n' ':')" != 'off:off:' ]]; then
      bind '"\M-w"':"\"\C-k\C-ahistory | grep '^ *[0-9]* *\C-e.'\C-m\""
      bind '"\e[A"':history-search-backward
      bind '"\e[B"':history-search-forward
  fi

  ########################################################################################
  #### Titles
  ########################################################################################
  case "$TERM" in
      xterm*|rxvt*)
          PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
          ;;
      ,*)
          ;;
  esac


  ########################################################################################
  #### Completion
  ########################################################################################

  if [ -f /etc/bash_completion ]; then
      . /etc/bash_completion
  fi

  ########################################################################################
  #### Functions
  ########################################################################################

  # a utiliser avec des echo $_bold et echo $_normal
  _bold=$(tput bold)
  _normal=$(tput sgr0)

  # imprime les infos du gestionnaire de version en cours
  # si on en trouve un dans le pwd
  __vcs_dir() {
      local vcs base_dir sub_dir ref
      sub_dir() {
          local sub_dir
          sub_dir=$(readlink -f "${PWD}")
          sub_dir=${sub_dir#$1}
          echo ${sub_dir#/}
      }
      # git
      git_dir() {
          base_dir=$(git rev-parse --show-cdup 2>/dev/null) || return 1
          if [ -n "$base_dir" ]; then
              base_dir=`cd $base_dir; pwd`
          else
              base_dir=$PWD
          fi
          sub_dir=$(git rev-parse --show-prefix)
          sub_dir="/${sub_dir%/}"
          ref=$(git symbolic-ref -q HEAD || git name-rev --name-only HEAD 2>/dev/null)
          ref=${ref#refs/heads/}
          vcs="git"
      }
      # subversion
      svn_dir() {
          [ -d ".svn" ] || return 1
          base_dir="."
          while [ -d "$base_dir/../.svn" ]; do
              base_dir="$base_dir/.."
          done
          base_dir=`cd $base_dir; pwd`
          sub_dir="/$(sub_dir "${base_dir}")"
          ref=$(svn info "$base_dir" | awk '/^URL/ { sub(".*/","",$0); r=$0 } /^Revision/ { sub("[^0-9]*","",$0); print r":"$0 }')
          vcs="svn"
          alias pull="svn up"
          alias commit="svn commit"
          alias push="svn ci"
          alias revert="svn revert"
      }
      # mercurial
      hg_dir() {
          base_dir="."
          while [ ! -d "$base_dir/.hg" ]; do
              base_dir="$base_dir/.."
              [ $(readlink -f "${base_dir}") = "/" ] && return 1
          done
          base_dir=$(readlink -f "$base_dir")
          sub_dir="/$(sub_dir "${base_dir}")"
          ref=$(< "${base_dir}/.hg/branch")
          hgqtop=$(hg qtop)
          if [[ $hgqtop == 'No patches applied' ]]; then
              extra=""
          else
              extra=" >> $hgqtop"
          fi
          vcs="hg"
      }
      hg_dir || git_dir || svn_dir || base_dir="$PWD"
      echo "${vcs:+($vcs)}${_bold}${base_dir/$HOME/~}${_normal}${vcs:+[$ref]${_bold}${sub_dir}${_normal}$extra}"
  }

  # >>> conda initialize >>>
  # !! Contents within this block are managed by 'conda init' !!
  __conda_setup="$('/home/lemagues/environment/local/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
  if [ $? -eq 0 ]; then
      eval "$__conda_setup"
  else
      if [ -f "/home/lemagues/environment/local/miniconda3/etc/profile.d/conda.sh" ]; then
          . "/home/lemagues/environment/local/miniconda3/etc/profile.d/conda.sh"
      else
          export PATH="/home/lemagues/environment/local/miniconda3/bin:$PATH"
      fi
  fi
  unset __conda_setup
  # <<< conda initialize <<<


  #THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
  export SDKMAN_DIR="/home/lemagues/.sdkman"
  [[ -s "/home/lemagues/.sdkman/bin/sdkman-init.sh" ]] && source "/home/lemagues/.sdkman/bin/sdkman-init.sh"

#+end_src

* zsh
#+begin_src shell :results output replace :tangle ~/.zshrc
  #!/bin/zsh

  # Load profile
  if [[ "$PROFILE_LOADED" != "True" ]]
  then
      source ~/.profile
  fi

  if [[ "$TERM" == "dumb" ]]
  then
      unsetopt zle
      unsetopt prompt_cr
      unsetopt prompt_subst
      unfunction precmd
      unfunction preexec
      PS1='$ '
      return
  fi

  bindkey -e

  export TERM="xterm-256color"

  # Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
  # Initialization code that may require console input (password prompts, [y/n]
  # confirmations, etc.) must go above this block; everything else may go below.
  if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
      source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
  fi

  ########################################################################################
  #### Basics
  ########################################################################################
  if ! type "emacs" > /dev/null; then
      export EDITOR=vim
  else
      export EDITOR=emacs
  fi

  # Load Antigen
  export ANTIGEN="$HOME/.antigen/"
  if [[ ! -d $ANTIGEN ]]; then
      git clone https://github.com/zsh-users/antigen.git $ANTIGEN
  fi
  source $ANTIGEN/antigen.zsh

  # VCS bundle
  antigen bundle git
  antigen bundle github
  antigen bundle unixorn/bitbucket-git-helpers.plugin.zsh
  antigen bundle denolfe/zsh-travis

  # Aliases
  antigen bundle djui/alias-tips

  # Completion/helpers
  antigen bundle zsh-users/zsh-completions
  antigen bundle zsh-users/zsh-autosuggestions
  antigen bundle sudo
  antigen bundle command-not-found

  # Antigen Bundles
  antigen bundle tmuxinator
  antigen bundle rupa/z

  antigen bundle docker
  antigen bundle rsync

  antigen bundle colored-man-pages
  antigen bundle kennethreitz/autoenv

  # For SSH, starting ssh-agent is annoying
  antigen bundle ssh-agent

  # Node Plugins
  antigen bundle coffee
  antigen bundle node
  antigen bundle npm
  antigen bundle grunt

  # Python Plugins
  antigen bundle pip
  antigen bundle python
  antigen bundle virtualenv

  # Java & gradle
  antigen bundle gradle/gradle-completion
  antigen bundle gvm

  # oh-my-zsh
  antigen use oh-my-zsh

  # Theme
  antigen theme romkatv/powerlevel10k

  # Distro specific
  # OS specific plugins (comming from https://github.com/seagle0128/dotfiles/blob/master/.zshrc)
  if [[ $OSTYPE == darwin* ]]; then
      antigen bundle brew
      antigen bundle brew-cask
      antigen bundle osx
  elif [[ $OSTYPE == linux* ]]; then
      if command -v apt-get >/dev/null 2>&1; then
          antigen bundle ubuntu
          alias agua='aguu -y && agar -y && aga -y'
      elif command -v pacman >/dev/null 2>&1; then
          antigen bundle archlinux
      fi
  fi

  # Highlighting
  antigen bundle zsh-users/zsh-syntax-highlighting

  # Tell Antigen that you're done.
  antigen apply


  ########################################################################################
  #### Use .ssh/config for completion
  ########################################################################################
  zstyle -s ':completion:*:hosts' hosts _ssh_config
  [[ -r ~/.ssh/config ]] && _ssh_config+=($(cat ~/.ssh/config | sed -ne 's/Host[=\t ]//p'))
  zstyle ':completion:*:hosts' hosts $_ssh_config


  ########################################################################################
  #### Aliases / Helpers
  ########################################################################################
  # Some
  alias vi='vim'

  # Coloring some command
  alias mvn="mvn-color"
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'

  # Network
  alias rsync="rsync --protect-args --exclude-from=$HOME/.rsyncignore"

  # Emacs helper
  alias tangle_emacs_conf="emacs -Q --batch --eval \"(progn (require 'ob-tangle) (dolist (file command-line-args-left) (with-current-buffer (find-file-noselect file) (org-babel-tangle))))\" \"~/.emacs.d/README.org\""

  ########################################################################################
  #### Options
  ########################################################################################
  # = History
  HISTSIZE=1000
  SAVEHIST=1000
  HISTFILE=~/.history
  APPEND_HISTORY=true
  HIST_EXPIRE_DUPS_FIRST=true
  HIST_ALLOW_CLOBBER=true
  HIST_IGNORE_SPACE=true
  HIST_SAVE_NO_DUPS=true

  # = Diverse
  AUTO_CD=true

  ########################################################################################
  #### Emacs/Vterm specifics
  ########################################################################################

  if [[ "$INSIDE_EMACS" = 'vterm' ]]
  then
      vterm_printf(){
          if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
              # Tell tmux to pass the escape sequences through
              printf "\ePtmux;\e\e]%s\007\e\\" "$1"
          elif [ "${TERM%%-*}" = "screen" ]; then
              # GNU screen (screen, screen-256color, screen-256color-bce)
              printf "\eP\e]%s\007\e\\" "$1"
          else
              printf "\e]%s\e\\" "$1"
          fi
      }

      vterm_cmd() {
          local vterm_elisp
          vterm_elisp=""
          while [ $# -gt 0 ]; do
              vterm_elisp="$vterm_elisp""$(printf '"%s" ' "$(printf "%s" "$1" | sed -e 's|\\|\\\\|g' -e 's|"|\\"|g')")"
              shift
          done
          vterm_printf "51;E$vterm_elisp"
      }

      open_file_below() {
          vterm_cmd find-file-below "$(realpath "${@:-.}")"
      }

      vterm_set_directory() {
          vterm_cmd update-pwd "$PWD/"
      }

      alias clear='vterm_printf "51;Evterm-clear-scrollback";tput clear'

      if [[ -n ${EMACS_VTERM_PATH} ]] && \
          [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh ]]
      then
          source ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh
      fi

      # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
      [[ ! -f ~/.config/zsh/emacs_p10k.zsh ]] || source ~/.config/zsh/emacs_p10k.zsh
  else
      # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
      [[ ! -f ~/.config/zsh/default_p10k.zsh ]] || source ~/.config/zsh/default_p10k.zsh
  fi

  ########################################################################################
  #### Environment toolks
  ########################################################################################

  ## Conda
  # !! Contents within this block are managed by 'conda init' !!
  __conda_setup="$('/home/lemagues/environment/local/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
  if [ $? -eq 0 ]; then
      eval "$__conda_setup"
  else
      if [ -f "/home/lemagues/environment/local/miniconda3/etc/profile.d/conda.sh" ]; then
          . "/home/lemagues/environment/local/miniconda3/etc/profile.d/conda.sh"
      else
          export PATH="/home/lemagues/environment/local/miniconda3/bin:$PATH"
      fi
  fi
  unset __conda_setup
  # <<< conda initialize <<<

  ## SDKMAN
  export SDKMAN_DIR="/home/lemagues/.sdkman"
  [[ -s "/home/lemagues/.sdkman/bin/sdkman-init.sh" ]] && source "/home/lemagues/.sdkman/bin/sdkman-init.sh"
#+end_src

* COMMENT some extra configuration
