#+TITLE: SHELL configuration part
#+AUTHOR: Sébastien Le Maguer
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://seblemaguer.github.io/css/main.css" />

* Profile
#+begin_src shell :results output replace :tangle ~/.profile
  #!/bin/sh
  #-*- mode: sh; -*-

  ###################################################################################
  ### Entry point
  ###################################################################################
  export USER_ENV_DIR=$HOME/environment/local
  export USER_WORKTOOLS_DIR=$HOME/work/tools/local
  export USER_WORKOWNTOOLS_DIR=$HOME/work/maintained_tools/local

  ###################################################################################
  ### Tools variable
  ###################################################################################

  # Python part
  export PYTHON=python3

  # Perl part
  export PERL5LIB=$USER_ENV_DIR/perl:$USER_WORKTOOLS_DIR/perl:$USER_WORKOWNTOOLS_DIR/perl:$PERL5LIB
  export PERL5LIB=$PERL5LIB:$USER_ENV_DIR/perl/lib/perl5/darwin-thread-multi-2level/
  export PERL_MB_OPT="--install_base \"$USER_ENV_DIR/perl\""
  export PERL_MM_OPT="INSTALL_BASE=$USER_ENV_DIR/perl"

  # Groovy part
  export GROOVY_HOME="/usr/share/groovy"

  # Go part
  export GOPATH=$USER_ENV_DIR/go

  # NPM part
  NPM_PACKAGES="${USER_ENV_DIR}/npm_packages"
  export NODE_PATH="$NPM_PACKAGES/lib/node_modules:$NODE_PATH"

  ###################################################################################
  ### Path variables
  ###################################################################################

  # Main path variable
  export PATH=${HOME}/bin:${HOME}/environment/local/bin:$PATH
  export PATH=$USER_WORKTOOLS_DIR/bin/:$USER_WORKOWNTOOLS_DIR/bin/:$PATH
  export PATH=$USER_WORKTOOLS_DIR/share/matlab/bin:$PATH
  export PATH=$HOME/.local/bin:$PATH
  export PATH=$USER_ENV_DIR/go/bin:$PATH
  export PATH=$NPM_PACKAGES/bin:$PATH

  # Libraries
  export DYLD_LIBRARY_PATH=$USER_ENV_DIR/lib:$USER_WORKTOOLS_DIR/lib:$USER_WORKOWNTOOLS_DIR/lib:/usr/local/opt/icu4c/lib/:$HOME/.local/lib:$DYLD_LIBRARY_PATH
  export LD_LIBRARY_PATH=$USER_ENV_DIR/lib:$USER_WORKTOOLS_DIR/lib:$USER_WORKOWNTOOLS_DIR/lib:/usr/local/opt/icu4c/lib/:$HOME/.local/lib:$LD_LIBRARY_PATH
  export LIBRARY_PATH=$USER_ENV_DIR/lib:$USER_WORKTOOLS_DIR/lib:$USER_WORKOWNTOOLS_DIR/lib:/usr/local/opt/icu4c/lib/:$HOME/.local/lib:$LIBRARY_PATH
  export PKG_CONFIG_PATH=$USER_ENV_DIR/lib/pkgconfig:$USER_WORKTOOLS_DIR/lib/pkgconfig:$USER_WORKOWNTOOLS_DIR/lib/pkgconfig:$PKG_CONFIG_PATH

  # Include path
  export CPATH=$USER_ENV_DIR/include:$USER_WORKTOOLS_DIR/include:$USER_WORKOWNTOOLS_DIR/include:/usr/include/jsoncpp/:$CPATH
  export C_INCLUDE_PATH=$USER_ENV_DIR/include:$USER_WORKTOOLS_DIR/include:$USER_WORKOWNTOOLS_DIR/include:/usr/include/jsoncpp/:$C_INCLUDE_PATH
  export CPLUS_INCLUDE_PATH=$USER_ENV_DIR/include:$USER_WORKTOOLS_DIR/include:$USER_WORKOWNTOOLS_DIR/include:/usr/include/jsoncpp/:$CPLUS_INCLUDE_PATH

  # Manpage
  export MANPATH=$USER_ENV_DIR/share/man:$USER_WORKTOOLS_DIR/share/man:$USER_WORKOWNTOOLS_DIR/share/man:$NPM_PACKAGES/share/man:$MANPATH
  export INFOPATH=$USER_ENV_DIR/share/info:$INFOPATH

  # Ruby
  export PATH="$HOME/.local/share/gem/ruby/3.0.0/bin:$PATH"
  export GEM_HOME="$USER_ENV_DIR/gems"
  export PATH="$GEM_HOME/bin:$PATH"

  # NLTK
  export NLTK_DATA="$HOME/.cache/nltk"

  #################################################################################ex#
  ### Remaining variables
  ###################################################################################

  # Change the locale !
  cur_locale=`locale -a | grep utf8  | grep "en_\(IE\|GB\|US\)" | head -n 1`
  export LC_ALL=$cur_locale
  export LANG=$cur_locale

  ###################################################################################
  ### Toolkit
  ###################################################################################
  export SDKMAN_DIR="$HOME/.sdkman"
  [[ -s "$HOME/.gvm/bin/gvm-init.sh" ]] && source "$HOME/.gvm/bin/gvm-init.sh"
  [[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && source "$SDKMAN_DIR/bin/sdkman-init.sh"


  ###################################################################################
  ### Kitty
  ###################################################################################
  if test -n "$KITTY_INSTALLATION_DIR"; then
      # Define some kitty helper aliases
      # alias ssh="kitty +kitten ssh"
      alias icat="kitty +kitten icat"

      # Set matplotlib backend to be compatible kitty
      export MPLBACKEND='module://matplotlib-backend-kitty'
  fi

  ###################################################################################
  ### Indicate that the profile is loaded
  ###################################################################################
  export PROFILE_LOADED=True
#+end_src

* bash
#+begin_src shell :results output replace :tangle ~/.bashrc
  #!/bin/bash

  ########################################################################################
  #### Tramp emacs mandatory step
  ########################################################################################
  case "$TERM" in
      "dumb")
          export PS1="> "
          return
          ;;
  esac

  ########################################################################################
  #### Load profile for environment variables
  ########################################################################################
  if [[ "$PROFILE_LOADED" != "True" ]]; then
      source ~/.profile
  fi

  ########################################################################################
  #### Native completion
  ########################################################################################
  for bcfile in /etc/bash_completion.d/* ; do
      . $bcfile
  done

  ########################################################################################
  #### Plugin management
  ########################################################################################
  BASH_PLUGIN_DIR="$HOME/.cache/bash"
  if [ ! -d "$BASH_PLUGIN_DIR" ]; then
      mkdir "$BASH_PLUGIN_DIR" -p
  fi

  if [ ! -f "$BASH_PLUGIN_DIR/gitstatus/gitstatus.prompt.sh" ]; then
      git clone --depth=1 https://github.com/romkatv/gitstatus.git "$BASH_PLUGIN_DIR/gitstatus"
  fi
  source $BASH_PLUGIN_DIR/gitstatus/gitstatus.plugin.sh

  if [ ! -f "$BASH_PLUGIN_DIR/slurm_completion.sh" ]; then
      wget https://raw.githubusercontent.com/SchedMD/slurm/master/contribs/slurm_completion_help/slurm_completion.sh -O "$BASH_PLUGIN_DIR/slurm_completion.sh"
  fi
  source "$BASH_PLUGIN_DIR/slurm_completion.sh"

  ########################################################################################
  #### Environment variables
  ########################################################################################
  if [[ $(which emacs) = "" ]]; then
      export EDITOR=vim
  else
      export EDITOR=emacs
  fi

  ########################################################################################
  #### Aliases
  ########################################################################################
  # Some helpers
  alias vi='vim'
  alias watch='watch -x ' # NOTE: this is needed to expand aliases properly

  # Coloring some command
  alias mvn="mvn-color"
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'

  # Network
  alias rsync="rsync --protect-args --exclude-from=$HOME/.rsyncignore"

  # Cluster aliases
  alias msinfo='sinfo -o "%25N %.3a %.9P %10c  %10m  %25f  %20G %10l %50E"'
  alias msqueue='squeue -o "%.8i %.9P %.20j %.8u %.8T %.10M %.12l %.8C %.15b %.15R"'
  alias check_queue="msqueue | sed 's/[ \t]\+/ /g' | cut -d' ' -f5,6,10 | sed 's/:.*//g' | sort | uniq -c | grep -v 'USER STATE' | sed 's/^[ ]*//g' | sort -h"

  # Docker cleaning aliases
  alias clean_exited_cont='docker ps -a | grep Exited | cut -d " " -f 1 | xargs docker rm'
  alias clean_bulk_images='docker images | grep "<none>" | sed "s/   */:/g" | cut -d ":" -f 3 | xargs docker rmi'

  # Helper aliases
  alias conda=micromamba
  alias tangle_emacs_conf='~/environment/local/apps/emacs/bin/emacs -Q --batch --load "~/.emacs.d/tangle.el" "~/.emacs.d/README.org"'
  alias mquota="python ~/environment/local/bin/mquota" # NOTE: needed because boole python's version is 2.7...

  # Docker cleaning aliases
  alias clean_exited_cont='docker ps -a | grep Exited | cut -d " " -f 1 | xargs docker rm'
  alias clean_bulk_images='docker images | grep "<none>" | sed "s/   */:/g" | cut -d ":" -f 3 | xargs docker rmi'

  ########################################################################################
  #### Prompt
  ########################################################################################
  GREEN='\[\e[1;32m\]'
  BGREEN='\[\e[0;32m\]'
  BRED='\[\e[1;31m\]'
  RED='\[\e[0;31m\]'
  BBLUE='\[\e[1;34m\]'
  BLUE='\[\e[0;34m\]'
  YELLOW='\[\e[0;033m\]'
  NORMAL='\[\e[00m\]'
  TIME=$(date +%H:%M)

  # Determine active Python virtualenv details.
  function set_virtualenv () {
    if test -z "$VIRTUAL_ENV" ; then
      if test -z "$CONDA_DEFAULT_ENV"; then
        PYTHON_VIRTUALENV=""
      else
        PYTHON_VIRTUALENV="[${BGREEN}$CONDA_DEFAULT_ENV${NORMAL}] "
      fi
    else
        PYTHON_VIRTUALENV="[${BGREEN}`basename \"$CONDA_DEFAULT_ENV\"`${NORMAL}] "
    fi
  }

  # Sets GITSTATUS_PROMPT to reflect the state of the current git repository.
  # The value is empty if not in a git repository. Forwards all arguments to
  # gitstatus_query.
  #
  # Example value of GITSTATUS_PROMPT: master ⇣42⇡42 ⇠42⇢42 *42 merge ~42 +42 !42 ?42
  #
  #   master  current branch
  #      ⇣42  local branch is 42 commits behind the remote
  #      ⇡42  local branch is 42 commits ahead of the remote
  #      ⇠42  local branch is 42 commits behind the push remote
  #      ⇢42  local branch is 42 commits ahead of the push remote
  #      *42  42 stashes
  #    merge  merge in progress
  #      ~42  42 merge conflicts
  #      +42  42 staged changes
  #      !42  42 unstaged changes
  #      ?42  42 untracked files
  function gitstatus_prompt_update() {
    GITSTATUS_PROMPT=""

    gitstatus_query "$@"                  || return 1  # error
    [[ "$VCS_STATUS_RESULT" == ok-sync ]] || return 0  # not a git repo

    local      reset=$NORMAL
    local      clean=$BGREEN
    local  untracked=$BBLUE
    local   modified=$YELLOW
    local conflicted=$RED

    local p

    local where  # branch name, tag or commit
    if [[ -n "$VCS_STATUS_LOCAL_BRANCH" ]]; then
      where="$VCS_STATUS_LOCAL_BRANCH"
    elif [[ -n "$VCS_STATUS_TAG" ]]; then
      p+="${reset}#"
      where="$VCS_STATUS_TAG"
    else
      p+="${reset}@"
      where="${VCS_STATUS_COMMIT:0:8}"
    fi

    (( ${#where} > 32 )) && where="${where:0:12}…${where: -12}"  # truncate long branch names and tags
    p+="${clean}${where}"

    # ⇣42 if behind the remote.
    (( VCS_STATUS_COMMITS_BEHIND )) && p+=" ${clean}⇣${VCS_STATUS_COMMITS_BEHIND}"
    # ⇡42 if ahead of the remote; no leading space if also behind the remote: ⇣42⇡42.
    (( VCS_STATUS_COMMITS_AHEAD && !VCS_STATUS_COMMITS_BEHIND )) && p+=" "
    (( VCS_STATUS_COMMITS_AHEAD  )) && p+="${clean}⇡${VCS_STATUS_COMMITS_AHEAD}"
    # ⇠42 if behind the push remote.
    (( VCS_STATUS_PUSH_COMMITS_BEHIND )) && p+=" ${clean}⇠${VCS_STATUS_PUSH_COMMITS_BEHIND}"
    (( VCS_STATUS_PUSH_COMMITS_AHEAD && !VCS_STATUS_PUSH_COMMITS_BEHIND )) && p+=" "
    # ⇢42 if ahead of the push remote; no leading space if also behind: ⇠42⇢42.
    (( VCS_STATUS_PUSH_COMMITS_AHEAD  )) && p+="${clean}⇢${VCS_STATUS_PUSH_COMMITS_AHEAD}"
    # *42 if have stashes.
    (( VCS_STATUS_STASHES        )) && p+=" ${clean}*${VCS_STATUS_STASHES}"
    # 'merge' if the repo is in an unusual state.
    [[ -n "$VCS_STATUS_ACTION"   ]] && p+=" ${conflicted}${VCS_STATUS_ACTION}"
    # ~42 if have merge conflicts.
    (( VCS_STATUS_NUM_CONFLICTED )) && p+=" ${conflicted}~${VCS_STATUS_NUM_CONFLICTED}"
    # +42 if have staged changes.
    (( VCS_STATUS_NUM_STAGED     )) && p+=" ${modified}+${VCS_STATUS_NUM_STAGED}"
    # !42 if have unstaged changes.
    (( VCS_STATUS_NUM_UNSTAGED   )) && p+=" ${modified}!${VCS_STATUS_NUM_UNSTAGED}"
    # ?42 if have untracked files. It's really a question mark, your font isn't broken.
    (( VCS_STATUS_NUM_UNTRACKED  )) && p+=" ${untracked}?${VCS_STATUS_NUM_UNTRACKED}"

    GITSTATUS_PROMPT="${BLUE}[${p}${BLUE}]${reset}"
  }

  # Return colorized based status of the return value of the previous command.
  function set_status () {
    if test $1 -eq 0 ; then
        EXEC_STATUS=""
    else
        EXEC_STATUS="${RED}X${NORMAL} "
    fi
  }

  # Set the full bash prompt.
  function set_bash_prompt () {
    # Determine if something has failed and if so indicates it (EXEC_STATUS)
    set_status $?

    # Set python environment information (PYTHON_VIRTUALENV)
    set_virtualenv

    # Set the git part (GITSTATUS_PROMPT)
    gitstatus_prompt_update

    # And now, build the prompt
    PS1="${EXEC_STATUS}${PYTHON_VIRTUALENV}"
    if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
        PS1+="${BGREEN}[\A] ${NORMAL}\u:${BLUE}\h@${RED}\w"
    else
        PS1+="${BGREEN}[\A] ${NORMAL}\u@${RED}\w"
    fi
    PS1+="${GITSTATUS_PROMPT:+ $GITSTATUS_PROMPT}"
    PS1+="${BLUE}:${NORMAL} "
  }

  # Start gitstatusd in the background.
  gitstatus_stop && gitstatus_start -s -1 -u -1 -c -1 -d -1

  # Define the prompt command
  PROMPT_COMMAND=set_bash_prompt


  ########################################################################################
  #### Integrate dirstack
  ########################################################################################
  pushd()
  {
    if [ $# -eq 0 ]; then
      DIR="${HOME}"
    else
      DIR="$1"
    fi

    builtin pushd "${DIR}" > /dev/null
  }

  pushd_builtin()
  {
    builtin pushd > /dev/null
  }

  popd()
  {
    builtin popd > /dev/null
  }

  alias cd='pushd'
  alias back='popd'
  alias flip='pushd_builtin'

  ########################################################################################
  #### History
  ########################################################################################
  export HISTCONTROL=erasedups:ignorespace
  export HISTIGNORE="cd:ls:[bf]g:clear"
  if [[ "$(set -o | grep 'emacs\|\bvi\b' | cut -f2 | tr '\n' ':')" != 'off:off:' ]]; then
      bind '"\M-w"':"\"\C-k\C-ahistory | grep '^ *[0-9]* *\C-e.'\C-m\""
      bind '"\e[A"':history-search-backward
      bind '"\e[B"':history-search-forward
  fi

  ########################################################################################
  #### Completion
  ########################################################################################
  if [ -f /etc/bash_completion ]; then
      . /etc/bash_completion
  fi

  ########################################################################################
  #### Environment tools
  ########################################################################################

  ## SDKMAN
  export SDKMAN_DIR="$HOME/.sdkman"
  [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"


  # >>> mamba initialize >>>
  # !! Contents within this block are managed by 'mamba init' !!
  export MAMBA_EXE="$HOME/environment/local/bin/micromamba";
  export MAMBA_ROOT_PREFIX="$HOME/environment/local/micromamba";
  __mamba_setup="$("$MAMBA_EXE" shell hook --shell zsh --prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"
  if [ $? -eq 0 ]; then
      eval "$__mamba_setup"
  else
      if [ -f "$HOME/environment/local/micromamba/etc/profile.d/micromamba.sh" ]; then
          . "$HOME/environment/local/micromamba/etc/profile.d/micromamba.sh"
      else
          export  PATH="$HOME/environment/local/micromamba/bin:$PATH"  # extra space after export prevents interference from conda init
      fi
  fi
  unset __mamba_setup
  # <<< mamba initialize <<<

  # Project specific environment
  [[ -f ~/environment/local/bin/direnv ]] && eval "$(direnv hook bash)"
#+end_src

* zsh
** Main
#+begin_src shell :results output replace :tangle ~/.zshrc
  # Load profile
  if [[ "$PROFILE_LOADED" != "True" ]]
  then
      source ~/.profile
  fi

  if [[ "$TERM" == "dumb" ]]
  then
      unsetopt zle
      unsetopt prompt_cr
      unsetopt prompt_subst
      unfunction precmd
      unfunction preexec
      PS1='$ '
      return
  fi

  ########################################################################################
  #### Basics
  ########################################################################################
  if ! type "emacs" > /dev/null; then
      export EDITOR=vim
  else
      export EDITOR=emacs
  fi

  # Load znap
  export ZNAP_ROOT_DIR="$HOME/.cache/znap"
  ZNAP_REPO_DIR="$ZNAP_ROOT_DIR/zsh-snap"
  [[ -r $ZNAP_REPO_DIR/znap.zsh ]] ||
      git clone --depth 1 -- \
          https://github.com/marlonrichert/zsh-snap.git $ZNAP_REPO_DIR
  source $ZNAP_REPO_DIR/znap.zsh

  ########################################################################################
  #### Theme
  ########################################################################################

  znap prompt romkatv/powerlevel10k

  if [[ "$INSIDE_EMACS" = 'vterm' ]]
  then
      vterm_printf(){
          if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
              # Tell tmux to pass the escape sequences through
              printf "\ePtmux;\e\e]%s\007\e\\" "$1"
          elif [ "${TERM%%-*}" = "screen" ]; then
              # GNU screen (screen, screen-256color, screen-256color-bce)
              printf "\eP\e]%s\007\e\\" "$1"
          else
              printf "\e]%s\e\\" "$1"
          fi
      }

      vterm_cmd() {
          local vterm_elisp
          vterm_elisp=""
          while [ $# -gt 0 ]; do
              vterm_elisp="$vterm_elisp""$(printf '"%s" ' "$(printf "%s" "$1" | sed -e 's|\\|\\\\|g' -e 's|"|\\"|g')")"
              shift
          done
          vterm_printf "51;E$vterm_elisp"
      }

      ofb() {
          vterm_cmd find-file-below "$(realpath "${@:-.}")"
      }

      vterm_set_directory() {
          vterm_cmd update-pwd "$PWD/"
      }

      alias clear='vterm_printf "51;Evterm-clear-scrollback";tput clear'

      if [[ -n ${EMACS_VTERM_PATH} ]] && \
             [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh ]]
      then
          source ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh
      fi

      # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
      [[ ! -f ~/.config/zsh/emacs_p10k.zsh ]] || source ~/.config/zsh/emacs_p10k.zsh
  else
      # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
      [[ ! -f ~/.config/zsh/default_p10k.zsh ]] || source ~/.config/zsh/default_p10k.zsh
  fi

  ########################################################################################
  #### Load some plugins (unsorted)
  ########################################################################################
  # Marlonrichert
  znap source marlonrichert/zsh-autocomplete
  znap source marlonrichert/zsh-edit
  znap source marlonrichert/zsh-hist

  # Prezto
  znap source sorin-ionescu/prezto modules/{environment,history}

  # Oh-my-zsh
  znap source ohmyzsh/ohmyzsh lib/{git,history,theme-and-appearance}
  znap source ohmyzsh/ohmyzsh plugins/{colored-man-pages,colorize}
  znap source ohmyzsh/ohmyzsh plugins/{docker-compose,python}

  ZSH_AUTOSUGGEST_STRATEGY=( history )
  znap source zsh-users/zsh-autosuggestions

  ZSH_HIGHLIGHT_HIGHLIGHTERS=( main brackets )
  znap source zsh-users/zsh-syntax-highlighting

  ##
  # Cache the output of slow commands with `znap eval`.
  #
  znap eval   trapd00r/LS_COLORS "$( whence -a dircolors gdircolors ) -b LS_COLORS"
  znap source marlonrichert/zcolors
  znap eval   marlonrichert/zcolors "zcolors ${(q)LS_COLORS}"

  ########################################################################################
  #### Redefine some keys
  ########################################################################################
  bindkey              '^I'         menu-complete
  bindkey "$terminfo[kcbt]" reverse-menu-complete
  bindkey '^[q' push-line-or-edit
  bindkey -r '^Q' '^[Q'

  ########################################################################################
  #### Options
  ########################################################################################
  # Configure command history
  HISTFILE="$HOME/.zsh_history"
  HISTSIZE=80000000
  SAVEHIST=$HISTSIZE

  setopt histreduceblanks      # Remove useless blanks when commands i added to the history
  setopt histignorespace       # Don't save commands starting with a space in the history
  setopt histignorealldups     # Ignore duplicates in the history
  setopt autocd                # Switching directories for lazy people
  setopt autopushd             # When CD, add the directory to the directory stack
  setopt pushdminus            # Provide a more intuitive way of popping the directory stack
  setopt pushdsilent           # Avoid printing the directory stack everytime
  setopt pushdtohome           # When the directory stack is empty, go to home
  setopt pushdignoredups       # Discard duplicate when adding a directory to the directory stack
  setopt nohup                 # Don't kill background jobs when I logout
  setopt extendedglob          # See: http://zsh.sourceforge.net/Intro/intro_2.html
  setopt globdots              # Do not require a leading '.' in a filename to be matched explicitly
  setopt shwordsplit           # Causes field splitting to be performed on unquoted parameter expansions
  setopt automenu              # Automatically use menu completion after the second consecutive request for completion
  setopt cdablevars            # if argument of cd is not a directory, ty to expand by preceding by a '~'
  setopt listpacked            # compact list of completions by making list of different sizes
  setopt nolisttypes           # Don't show types in completion lists
  setopt alwaystoend           # When completion, always move the cursor to end of the word
  setopt correct               # Try to correct the spelling of commands
  setopt no_nomatch            # https://github.com/robbyrussell/oh-my-zsh/issues/449
  setopt no_rmstarsilent       # Disable annoying confirm

  znap install zsh-users/zsh-completions

  ########################################################################################
  #### Aliases / Helpers
  ########################################################################################

  znap source djui/alias-tips

  alias conda=micromamba
  alias tangle_emacs_conf='~/environment/local/apps/emacs/bin/emacs -Q --batch --load "~/.emacs.d/tangle.el" "~/.emacs.d/README.org"'
  alias vi='vim'
  alias watch='watch -x ' # NOTE: this is needed to expand aliases properly
  alias open=xdg-open
  alias clear='/usr/bin/clear'

  # Conda environment aliases
  alias spiny="conda run -n spiny spiny"
  alias rm_import="conda run -n remarkable rm_import"
  alias rm_export="conda run -n remarkable rm_export"

  # Coloring some command
  alias mvn="mvn-color"
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'

  # Network
  alias rsync="rsync --protect-args --exclude-from=$HOME/.rsyncignore"

  # Cluster aliases
  alias msinfo='sinfo -o "%25N %.3a %.9P %10c  %10m  %25f  %20G %10l %50E"'
  alias msqueue='squeue -o "%.8i %.9P %.20j %.8u %.8T %.10M %.12l %.8C %.15b %.15R"'
  alias check_queue="msqueue | sed 's/[ \t]\+/ /g' | cut -d' ' -f5,6,10 | sed 's/:.*//g' | sort | uniq -c | grep -v 'USER STATE' | sed 's/^[ ]*//g' | sort -h"

  # Docker cleaning aliases
  alias clean_exited_cont='docker ps -a | grep Exited | cut -d " " -f 1 | xargs docker rm'
  alias clean_bulk_images='docker images | grep "<none>" | sed "s/   */:/g" | cut -d ":" -f 3 | xargs docker rmi'

  ########################################################################################
  #### Environment tools
  ########################################################################################

  # Lazy load `sdkman`
  export SDKMAN_DIR="$HOME/.sdkman"
  znap function _sdk sdk 'source ~/.sdkman/bin/sdkman-init.sh'
  compdef _sdk sdk

  # Loading conda completion
  znap install conda-incubator/conda-zsh-completion

  # >>> mamba initialize >>>
  # !! Contents within this block are managed by 'mamba init' !!
  export MAMBA_EXE="$HOME/environment/local/bin/micromamba";
  export MAMBA_ROOT_PREFIX="$HOME/environment/local/micromamba";
  __mamba_setup="$("$MAMBA_EXE" shell hook --shell zsh --prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"
  if [ $? -eq 0 ]; then
      eval "$__mamba_setup"
  else
      if [ -f "$HOME/environment/local/micromamba/etc/profile.d/micromamba.sh" ]; then
          . "$HOME/environment/local/micromamba/etc/profile.d/micromamba.sh"
      else
          export  PATH="$HOME/environment/local/micromamba/bin:$PATH"  # extra space after export prevents interference from conda init
      fi
  fi
  unset __mamba_setup
  # <<< mamba initialize <<<


  # Project specific environment
  [[ -f ~/environment/local/bin/direnv ]] && znap source ohmyzsh/ohmyzsh plugins/direnv

  ########################################################################################
  #### Terminal
  ########################################################################################
  export TERM="xterm-256color"
#+end_src

** P10K
*** Default
#+begin_src shell :results output replace :tangle ~/.config/zsh/default_p10k.zsh :mkdirp yes
  # Generated by Powerlevel10k configuration wizard on 2020-03-29 at 14:09 IST.
# Based on romkatv/powerlevel10k/config/p10k-classic.zsh, checksum 60244.
# Wizard options: compatible, classic, unicode, light, 24h time, blurred heads,
# blurred tails, 2 lines, solid, left frame, sparse, fluent, transient_prompt,
# instant_prompt=quiet.
# Type `p10k configure` to generate another config.
#
# Config for Powerlevel10k with classic powerline prompt style. Type `p10k configure` to generate
# your own config based on it.
#
# Tip: Looking for a nice color? Here's a one-liner to print colormap.
#
#   for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; done

# Temporarily change options.
'builtin' 'local' '-a' 'p10k_config_opts'
[[ ! -o 'aliases'         ]] || p10k_config_opts+=('aliases')
[[ ! -o 'sh_glob'         ]] || p10k_config_opts+=('sh_glob')
[[ ! -o 'no_brace_expand' ]] || p10k_config_opts+=('no_brace_expand')
'builtin' 'setopt' 'no_aliases' 'no_sh_glob' 'brace_expand'

() {
    emulate -L zsh -o extended_glob

    # Unset all configuration options. This allows you to apply configuration changes without
    # restarting zsh. Edit ~/.p10k.zsh and type `source ~/.p10k.zsh`.
    unset -m 'POWERLEVEL9K_*'

    # Zsh >= 5.1 is required.
    autoload -Uz is-at-least && is-at-least 5.1 || return

    # The list of segments shown on the left. Fill it with the most important segments.
    typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(
        # =========================[ Line #1 ]=========================
        status                  # exit code of the last command
        virtualenv              # python virtual environment (https://docs.python.org/3/library/venv.html)
        anaconda                # conda environment (https://conda.io/)
        pyenv                   # python environment (https://github.com/pyenv/pyenv)
        # os_icon               # os identifier
        dir                     # current directory
        vcs                     # git status
        # =========================[ Line #2 ]=========================
        newline                 # \n
        # prompt_char             # prompt symbol
    )

    # The list of segments shown on the right. Fill it with less important segments.
    # Right prompt on the last prompt line (where you are typing your commands) gets
    # automatically hidden when the input line reaches it. Right prompt above the
    # last prompt line gets hidden if it would overlap with left prompt.
    typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(
        # =========================[ Line #1 ]=========================
        command_execution_time  # duration of the last command
        background_jobs         # presence of background jobs
        battery               # internal battery
        direnv                  # direnv status (https://direnv.net/)
        asdf                    # asdf version manager (https://github.com/asdf-vm/asdf)
        goenv                   # go environment (https://github.com/syndbg/goenv)
        nodenv                  # node.js version from nodenv (https://github.com/nodenv/nodenv)
        nvm                     # node.js version from nvm (https://github.com/nvm-sh/nvm)
        nodeenv                 # node.js environment (https://github.com/ekalinin/nodeenv)
        # node_version          # node.js version
        # go_version            # go version (https://golang.org)
        # rust_version          # rustc version (https://www.rust-lang.org)
        # dotnet_version        # .NET version (https://dotnet.microsoft.com)
        # php_version           # php version (https://www.php.net/)
        # laravel_version       # laravel php framework version (https://laravel.com/)
        # java_version          # java version (https://www.java.com/)
        # package               # name@version from package.json (https://docs.npmjs.com/files/package.json)
        rbenv                   # ruby version from rbenv (https://github.com/rbenv/rbenv)
        rvm                     # ruby version from rvm (https://rvm.io)
        fvm                     # flutter version management (https://github.com/leoafarias/fvm)
        luaenv                  # lua version from luaenv (https://github.com/cehoffman/luaenv)
        jenv                    # java version from jenv (https://github.com/jenv/jenv)
        plenv                   # perl version from plenv (https://github.com/tokuhirom/plenv)
        phpenv                  # php version from phpenv (https://github.com/phpenv/phpenv)
        haskell_stack           # haskell version from stack (https://haskellstack.org/)
        kubecontext             # current kubernetes context (https://kubernetes.io/)
        terraform               # terraform workspace (https://www.terraform.io)
        aws                     # aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html)
        aws_eb_env              # aws elastic beanstalk environment (https://aws.amazon.com/elasticbeanstalk/)
        azure                   # azure account name (https://docs.microsoft.com/en-us/cli/azure)
        gcloud                  # google cloud cli account and project (https://cloud.google.com/)
        google_app_cred         # google application credentials (https://cloud.google.com/docs/authentication/production)
        context                 # user@hostname
        nordvpn                 # nordvpn connection status, linux only (https://nordvpn.com/)
        ranger                  # ranger shell (https://github.com/ranger/ranger)
        nnn                     # nnn shell (https://github.com/jarun/nnn)
        vim_shell               # vim shell indicator (:sh)
        midnight_commander      # midnight commander shell (https://midnight-commander.org/)
        nix_shell               # nix shell (https://nixos.org/nixos/nix-pills/developing-with-nix-shell.html)
        vi_mode                 # vi mode (you don't need this if you've enabled prompt_char)
        # vpn_ip                # virtual private network indicator
        # load                  # CPU load
        # disk_usage            # disk usage
        # ram                   # free RAM
        # swap                  # used swap
        todo                    # todo items (https://github.com/todotxt/todo.txt-cli)
        timewarrior             # timewarrior tracking status (https://timewarrior.net/)
        taskwarrior             # taskwarrior task count (https://taskwarrior.org/)
        time                    # current time
        # =========================[ Line #2 ]=========================
        newline                 # \n
        # ip                    # ip address and bandwidth usage for a specified network interface
        # public_ip             # public IP address
        # proxy                 # system-wide http/https/ftp proxy
        # wifi                  # wifi speed
        # example               # example user-defined segment (see prompt_example function below)
    )

    # Defines character set used by powerlevel10k. It's best to let `p10k configure` set it for you.
    typeset -g POWERLEVEL9K_MODE=compatible
    # When set to `moderate`, some icons will have an extra space after them. This is meant to avoid
    # icon overlap when using non-monospace fonts. When set to `none`, spaces are not added.
    typeset -g POWERLEVEL9K_ICON_PADDING=none

    # When set to true, icons appear before content on both sides of the prompt. When set
    # to false, icons go after content. If empty or not set, icons go before content in the left
    # prompt and after content in the right prompt.
    #
    # You can also override it for a specific segment:
    #
    #   POWERLEVEL9K_STATUS_ICON_BEFORE_CONTENT=false
    #
    # Or for a specific segment in specific state:
    #
    #   POWERLEVEL9K_DIR_NOT_WRITABLE_ICON_BEFORE_CONTENT=false
    typeset -g POWERLEVEL9K_ICON_BEFORE_CONTENT=

    # Add an empty line before each prompt.
    typeset -g POWERLEVEL9K_PROMPT_ADD_NEWLINE=true

    # Connect left prompt lines with these symbols. You'll probably want to use the same color
    # as POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_FOREGROUND below.
    typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX='%242F╭─'
    typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_PREFIX='%242F├─'
    typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX='%242F╰─'
    # Connect right prompt lines with these symbols.
    typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_SUFFIX=
    typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_SUFFIX=
    typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_SUFFIX=

    # Filler between left and right prompt on the first prompt line. You can set it to ' ', '·' or
    # '─'. The last two make it easier to see the alignment between left and right prompt and to
    # separate prompt from command output. You might want to set POWERLEVEL9K_PROMPT_ADD_NEWLINE=false
    # for more compact prompt if using using this option.
    typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR='─'
    typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_BACKGROUND=
    if [[ $POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR != ' ' ]]; then
        # The color of the filler. You'll probably want to match the color of POWERLEVEL9K_MULTILINE
        # ornaments defined above.
        typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_FOREGROUND=242
        # Start filler from the edge of the screen if there are no left segments on the first line.
        typeset -g POWERLEVEL9K_EMPTY_LINE_LEFT_PROMPT_FIRST_SEGMENT_END_SYMBOL='%{%}'
        # End filler on the edge of the screen if there are no right segments on the first line.
        typeset -g POWERLEVEL9K_EMPTY_LINE_RIGHT_PROMPT_FIRST_SEGMENT_START_SYMBOL='%{%}'
    fi

    # Default background color.
    typeset -g POWERLEVEL9K_BACKGROUND=clear

    # Separator between same-color segments on the left.
    typeset -g POWERLEVEL9K_LEFT_SUBSEGMENT_SEPARATOR='' #%246F\u2502'
    # Separator between same-color segments on the right.
    typeset -g POWERLEVEL9K_RIGHT_SUBSEGMENT_SEPARATOR='%246F\u2502'
    # Separator between different-color segments on the left.
    typeset -g POWERLEVEL9K_LEFT_SEGMENT_SEPARATOR=''
    # Separator between different-color segments on the right.
    typeset -g POWERLEVEL9K_RIGHT_SEGMENT_SEPARATOR=''
    # The right end of left prompt.
    typeset -g POWERLEVEL9K_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL='' # '▓▒░'
    # The left end of right prompt.
    typeset -g POWERLEVEL9K_RIGHT_PROMPT_FIRST_SEGMENT_START_SYMBOL='' # '░▒▓'
    # The left end of left prompt.
    typeset -g POWERLEVEL9K_LEFT_PROMPT_FIRST_SEGMENT_START_SYMBOL='' # ░▒▓'
    # The right end of right prompt.
    typeset -g POWERLEVEL9K_RIGHT_PROMPT_LAST_SEGMENT_END_SYMBOL='' # ▓▒░'
    # Left prompt terminator for lines without any segments.
    typeset -g POWERLEVEL9K_EMPTY_LINE_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL=

    #################################[ os_icon: os identifier ]##################################
    # OS identifier color.
    typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=255
    # Custom icon.
    # typeset -g POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION='⭐'

    ################################[ prompt_char: prompt symbol ]################################
    # Transparent background.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_BACKGROUND=
    # Green prompt symbol if the last command succeeded.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND=70
    # Red prompt symbol if the last command failed.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND=196
    # Default prompt symbol.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIINS_CONTENT_EXPANSION='❯'
    # Prompt symbol in command vi mode.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VICMD_CONTENT_EXPANSION='❮'
    # Prompt symbol in visual vi mode.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIVIS_CONTENT_EXPANSION='Ⅴ'
    # Prompt symbol in overwrite vi mode.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIOWR_CONTENT_EXPANSION='▶'
    typeset -g POWERLEVEL9K_PROMPT_CHAR_OVERWRITE_STATE=true
    # No line terminator if prompt_char is the last segment.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL=
    # No line introducer if prompt_char is the first segment.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_LEFT_PROMPT_FIRST_SEGMENT_START_SYMBOL=
    # No surrounding whitespace.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_LEFT_{LEFT,RIGHT}_WHITESPACE=

    ##################################[ dir: current directory ]##################################
    # Default current directory color.
    typeset -g POWERLEVEL9K_DIR_FOREGROUND=031
    # If directory is too long, shorten some of its segments to the shortest possible unique
    # prefix. The shortened directory can be tab-completed to the original.
    typeset -g POWERLEVEL9K_SHORTEN_STRATEGY=truncate_to_unique
    # Replace removed segment suffixes with this symbol.
    typeset -g POWERLEVEL9K_SHORTEN_DELIMITER=
    # Color of the shortened directory segments.
    typeset -g POWERLEVEL9K_DIR_SHORTENED_FOREGROUND=103
    # Color of the anchor directory segments. Anchor segments are never shortened. The first
    # segment is always an anchor.
    typeset -g POWERLEVEL9K_DIR_ANCHOR_FOREGROUND=025
    # Display anchor directory segments in bold.
    typeset -g POWERLEVEL9K_DIR_ANCHOR_BOLD=true
    # Don't shorten directories that contain any of these files. They are anchors.
    local anchor_files=(
        .bzr
        .citc
        .git
        .hg
        .node-version
        .python-version
        .go-version
        .ruby-version
        .lua-version
        .java-version
        .perl-version
        .php-version
        .tool-version
        .shorten_folder_marker
        .svn
        .terraform
        CVS
        Cargo.toml
        composer.json
        go.mod
        package.json
        stack.yaml
    )
    typeset -g POWERLEVEL9K_SHORTEN_FOLDER_MARKER="(${(j:|:)anchor_files})"
    # If set to true, remove everything before the last (deepest) subdirectory that contains files
    # matching $POWERLEVEL9K_SHORTEN_FOLDER_MARKER. For example, when the current directory is
    # /foo/bar/git_repo/baz, prompt will display git_repo/baz. This assumes that /foo/bar/git_repo
    # contains a marker (.git) and other directories don't.
    typeset -g POWERLEVEL9K_DIR_TRUNCATE_BEFORE_MARKER=false
    # Don't shorten this many last directory segments. They are anchors.
    typeset -g POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
    # Shorten directory if it's longer than this even if there is space for it. The value can
    # be either absolute (e.g., '80') or a percentage of terminal width (e.g, '50%'). If empty,
    # directory will be shortened only when prompt doesn't fit or when other parameters demand it
    # (see POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS and POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT below).
    # If set to `0`, directory will always be shortened to its minimum length.
    typeset -g POWERLEVEL9K_DIR_MAX_LENGTH=80
    # When `dir` segment is on the last prompt line, try to shorten it enough to leave at least this
    # many columns for typing commands.
    typeset -g POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS=40
    # When `dir` segment is on the last prompt line, try to shorten it enough to leave at least
    # COLUMNS * POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT * 0.01 columns for typing commands.
    typeset -g POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT=50
    # If set to true, embed a hyperlink into the directory. Useful for quickly
    # opening a directory in the file manager simply by clicking the link.
    # Can also be handy when the directory is shortened, as it allows you to see
    # the full directory that was used in previous commands.
    typeset -g POWERLEVEL9K_DIR_HYPERLINK=false

    # Enable special styling for non-writable directories.
    typeset -g POWERLEVEL9K_DIR_SHOW_WRITABLE=true
    # Show this icon when the current directory is not writable. POWERLEVEL9K_DIR_SHOW_WRITABLE
    # above must be set to true for this parameter to have effect.
    typeset -g POWERLEVEL9K_DIR_NOT_WRITABLE_VISUAL_IDENTIFIER_EXPANSION='∅'

    # Custom prefix.
    # typeset -g POWERLEVEL9K_DIR_PREFIX='%248Fin '

    # POWERLEVEL9K_DIR_CLASSES allows you to specify custom icons for different directories.
    # It must be an array with 3 * N elements. Each triplet consists of:
    #
    #   1. A pattern against which the current directory is matched. Matching is done with
    #      extended_glob option enabled.
    #   2. Directory class for the purpose of styling.
    #   3. Icon.
    #
    # Triplets are tried in order. The first triplet whose pattern matches $PWD wins. If there
    # are no matches, the directory will have no icon.
    #
    # Example:
    #
    #   typeset -g POWERLEVEL9K_DIR_CLASSES=(
    #       '~/work(|/*)'  WORK     '(╯°□°）╯︵ ┻━┻'
    #       '~(|/*)'       HOME     '⌂'
    #       '*'            DEFAULT  '')
    #
    # With these settings, the current directory in the prompt may look like this:
    #
    #   (╯°□°）╯︵ ┻━┻ ~/work/projects/important/urgent
    #
    # Or like this:
    #
    #   ⌂ ~/best/powerlevel10k
    #
    # You can also set different colors for directories of different classes. Remember to override
    # FOREGROUND, SHORTENED_FOREGROUND and ANCHOR_FOREGROUND for every directory class that you wish
    # to have its own color.
    #
    #   typeset -g POWERLEVEL9K_DIR_WORK_FOREGROUND=31
    #   typeset -g POWERLEVEL9K_DIR_WORK_SHORTENED_FOREGROUND=103
    #   typeset -g POWERLEVEL9K_DIR_WORK_ANCHOR_FOREGROUND=39
    #
    typeset -g POWERLEVEL9K_DIR_CLASSES=()

    #####################################[ vcs: git status ]######################################
    # Branch icon. Set this parameter to '\uF126 ' for the popular Powerline branch icon.
    typeset -g POWERLEVEL9K_VCS_BRANCH_ICON=

    # Untracked files icon. It's really a question mark, your font isn't broken.
    # Change the value of this parameter to show a different icon.
    typeset -g POWERLEVEL9K_VCS_UNTRACKED_ICON='?'

    # Formatter for Git status.
    #
    # Example output: master ⇣42⇡42 *42 merge ~42 +42 !42 ?42.
    #
    # You can edit the function to customize how Git status looks.
    #
    # VCS_STATUS_* parameters are set by gitstatus plugin. See reference:
    # https://github.com/romkatv/gitstatus/blob/master/gitstatus.plugin.zsh.
    function my_git_formatter() {
        emulate -L zsh

        if [[ -n $P9K_CONTENT ]]; then
            # If P9K_CONTENT is not empty, use it. It's either "loading" or from vcs_info (not from
            # gitstatus plugin). VCS_STATUS_* parameters are not available in this case.
            typeset -g my_git_format=$P9K_CONTENT
            return
        fi

        if (( $1 )); then
            # Styling for up-to-date Git status.
            local       meta='%248F'  # grey foreground
            local      clean='%70F'   # green foreground
            local   modified='%178F'  # yellow foreground
            local  untracked='%39F'   # blue foreground
            local conflicted='%196F'  # red foreground
        else
            # Styling for incomplete and stale Git status.
            local       meta='%244F'  # grey foreground
            local      clean='%244F'  # grey foreground
            local   modified='%244F'  # grey foreground
            local  untracked='%244F'  # grey foreground
            local conflicted='%244F'  # grey foreground
        fi

        local res
        local where  # branch or tag
        if [[ -n $VCS_STATUS_LOCAL_BRANCH ]]; then
            res+="${clean}${(g::)POWERLEVEL9K_VCS_BRANCH_ICON}"
            where=${(V)VCS_STATUS_LOCAL_BRANCH}
        elif [[ -n $VCS_STATUS_TAG ]]; then
            res+="${meta}#"
            where=${(V)VCS_STATUS_TAG}
        fi

        # If local branch name or tag is at most 32 characters long, show it in full.
        # Otherwise show the first 12 … the last 12.
        (( $#where > 32 )) && where[13,-13]="…"
        res+="${clean}${where//\%/%%}"  # escape %

        # Display the current Git commit if there is no branch or tag.
        # Tip: To always display the current Git commit, remove `[[ -z $where ]] &&` from the next line.
        [[ -z $where ]] && res+="${meta}@${clean}${VCS_STATUS_COMMIT[1,8]}"

        # Show tracking branch name if it differs from local branch.
        if [[ -n ${VCS_STATUS_REMOTE_BRANCH:#$VCS_STATUS_LOCAL_BRANCH} ]]; then
            res+="${meta}:${clean}${(V)VCS_STATUS_REMOTE_BRANCH//\%/%%}"  # escape %
        fi

        # ⇣42 if behind the remote.
        (( VCS_STATUS_COMMITS_BEHIND )) && res+=" ${clean}⇣${VCS_STATUS_COMMITS_BEHIND}"
        # ⇡42 if ahead of the remote; no leading space if also behind the remote: ⇣42⇡42.
        (( VCS_STATUS_COMMITS_AHEAD && !VCS_STATUS_COMMITS_BEHIND )) && res+=" "
        (( VCS_STATUS_COMMITS_AHEAD  )) && res+="${clean}⇡${VCS_STATUS_COMMITS_AHEAD}"
        # ⇠42 if behind the push remote.
        (( VCS_STATUS_PUSH_COMMITS_BEHIND )) && res+=" ${clean}⇠${VCS_STATUS_PUSH_COMMITS_BEHIND}"
        (( VCS_STATUS_PUSH_COMMITS_AHEAD && !VCS_STATUS_PUSH_COMMITS_BEHIND )) && res+=" "
        # ⇢42 if ahead of the push remote; no leading space if also behind: ⇠42⇢42.
        (( VCS_STATUS_PUSH_COMMITS_AHEAD  )) && res+="${clean}⇢${VCS_STATUS_PUSH_COMMITS_AHEAD}"
        # *42 if have stashes.
        (( VCS_STATUS_STASHES        )) && res+=" ${clean}*${VCS_STATUS_STASHES}"
        # 'merge' if the repo is in an unusual state.
        [[ -n $VCS_STATUS_ACTION     ]] && res+=" ${conflicted}${VCS_STATUS_ACTION}"
        # ~42 if have merge conflicts.
        (( VCS_STATUS_NUM_CONFLICTED )) && res+=" ${conflicted}~${VCS_STATUS_NUM_CONFLICTED}"
        # +42 if have staged changes.
        (( VCS_STATUS_NUM_STAGED     )) && res+=" ${modified}+${VCS_STATUS_NUM_STAGED}"
        # !42 if have unstaged changes.
        (( VCS_STATUS_NUM_UNSTAGED   )) && res+=" ${modified}!${VCS_STATUS_NUM_UNSTAGED}"
        # ?42 if have untracked files. It's really a question mark, your font isn't broken.
        # See POWERLEVEL9K_VCS_UNTRACKED_ICON above if you want to use a different icon.
        # Remove the next line if you don't want to see untracked files at all.
        (( VCS_STATUS_NUM_UNTRACKED  )) && res+=" ${untracked}${(g::)POWERLEVEL9K_VCS_UNTRACKED_ICON}${VCS_STATUS_NUM_UNTRACKED}"
        # "─" if the number of unstaged files is unknown. This can happen due to
        # POWERLEVEL9K_VCS_MAX_INDEX_SIZE_DIRTY (see below) being set to a non-negative number lower
        # than the number of files in the Git index, or due to bash.showDirtyState being set to false
        # in the repository config. The number of staged and untracked files may also be unknown
        # in this case.
        (( VCS_STATUS_HAS_UNSTAGED == -1 )) && res+=" ${modified}─"

        typeset -g my_git_format=$res
    }
    functions -M my_git_formatter 2>/dev/null

    # Don't count the number of unstaged, untracked and conflicted files in Git repositories with
    # more than this many files in the index. Negative value means infinity.
    #
    # If you are working in Git repositories with tens of millions of files and seeing performance
    # sagging, try setting POWERLEVEL9K_VCS_MAX_INDEX_SIZE_DIRTY to a number lower than the output
    # of `git ls-files | wc -l`. Alternatively, add `bash.showDirtyState = false` to the repository's
    # config: `git config bash.showDirtyState false`.
    typeset -g POWERLEVEL9K_VCS_MAX_INDEX_SIZE_DIRTY=-1

    # Don't show Git status in prompt for repositories whose workdir matches this pattern.
    # For example, if set to '~', the Git repository at $HOME/.git will be ignored.
    # Multiple patterns can be combined with '|': '~|~/some/dir'.
    typeset -g POWERLEVEL9K_VCS_DISABLED_WORKDIR_PATTERN='~'

    # Disable the default Git status formatting.
    typeset -g POWERLEVEL9K_VCS_DISABLE_GITSTATUS_FORMATTING=true
    # Install our own Git status formatter.
    typeset -g POWERLEVEL9K_VCS_CONTENT_EXPANSION='${$((my_git_formatter(1)))+${my_git_format}}'
    typeset -g POWERLEVEL9K_VCS_LOADING_CONTENT_EXPANSION='${$((my_git_formatter(0)))+${my_git_format}}'
    # Enable counters for staged, unstaged, etc.
    typeset -g POWERLEVEL9K_VCS_{STAGED,UNSTAGED,UNTRACKED,CONFLICTED,COMMITS_AHEAD,COMMITS_BEHIND}_MAX_NUM=-1

    # Icon color.
    typeset -g POWERLEVEL9K_VCS_VISUAL_IDENTIFIER_COLOR=70
    typeset -g POWERLEVEL9K_VCS_LOADING_VISUAL_IDENTIFIER_COLOR=244
    # Custom icon.
    typeset -g POWERLEVEL9K_VCS_VISUAL_IDENTIFIER_EXPANSION=
    # Custom prefix.
    typeset -g POWERLEVEL9K_VCS_PREFIX='%248Fon '

    # Show status of repositories of these types. You can add svn and/or hg if you are
    # using them. If you do, your prompt may become slow even when your current directory
    # isn't in an svn or hg reposotiry.
    typeset -g POWERLEVEL9K_VCS_BACKENDS=(git)

    # These settings are used for respositories other than Git or when gitstatusd fails and
    # Powerlevel10k has to fall back to using vcs_info.
    typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND='darkgreen'
    typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND='blue'
    typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND='yellow'

    ##########################[ status: exit code of the last command ]###########################
    # Enable OK_PIPE, ERROR_PIPE and ERROR_SIGNAL status states to allow us to enable, disable and
    # style them independently from the regular OK and ERROR state.
    typeset -g POWERLEVEL9K_STATUS_EXTENDED_STATES=true

    # Status on success. No content, just an icon. No need to show it if prompt_char is enabled as
    # it will signify success by turning green.
    typeset -g POWERLEVEL9K_STATUS_OK=true
    typeset -g POWERLEVEL9K_STATUS_OK_FOREGROUND=70
    typeset -g POWERLEVEL9K_STATUS_OK_VISUAL_IDENTIFIER_EXPANSION='✔'

    # Status when some part of a pipe command fails but the overall exit status is zero. It may look
    # like this: 1|0.
    typeset -g POWERLEVEL9K_STATUS_OK_PIPE=true
    typeset -g POWERLEVEL9K_STATUS_OK_PIPE_FOREGROUND=70
    typeset -g POWERLEVEL9K_STATUS_OK_PIPE_VISUAL_IDENTIFIER_EXPANSION='✔'

    # Status when it's just an error code (e.g., '1'). No need to show it if prompt_char is enabled as
    # it will signify error by turning red.
    typeset -g POWERLEVEL9K_STATUS_ERROR=true
    typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND=160
    typeset -g POWERLEVEL9K_STATUS_ERROR_VISUAL_IDENTIFIER_EXPANSION='х'

    # Status when the last command was terminated by a signal.
    typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL=true
    typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_FOREGROUND=160
    # Use terse signal names: "INT" instead of "SIGINT(2)".
    typeset -g POWERLEVEL9K_STATUS_VERBOSE_SIGNAME=false
    typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_VISUAL_IDENTIFIER_EXPANSION='х'

    # Status when some part of a pipe command fails and the overall exit status is also non-zero.
    # It may look like this: 1|0.
    typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE=true
    typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_FOREGROUND=160
    typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_VISUAL_IDENTIFIER_EXPANSION='х'

    ###################[ command_execution_time: duration of the last command ]###################
    # Show duration of the last command if takes longer than this many seconds.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=3
    # Show this many fractional digits. Zero means round to seconds.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION=0
    # Execution time color.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND=248
    # Duration format: 1d 2h 3m 4s.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FORMAT='d h m s'
    # Custom icon.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_VISUAL_IDENTIFIER_EXPANSION=
    # Custom prefix.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PREFIX='%248Ftook '

    #######################[ background_jobs: presence of background jobs ]#######################
    # Don't show the number of background jobs.
    typeset -g POWERLEVEL9K_BACKGROUND_JOBS_VERBOSE=false
    # Background jobs color.
    typeset -g POWERLEVEL9K_BACKGROUND_JOBS_FOREGROUND=37
    # Custom icon.
    typeset -g POWERLEVEL9K_BACKGROUND_JOBS_VISUAL_IDENTIFIER_EXPANSION='≡'

    #######################[ direnv: direnv status (https://direnv.net/) ]########################
    # Direnv color.
    typeset -g POWERLEVEL9K_DIRENV_FOREGROUND=178
    # Custom icon.
    # typeset -g POWERLEVEL9K_DIRENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###############[ asdf: asdf version manager (https://github.com/asdf-vm/asdf) ]###############
    # Default asdf color. Only used to display tools for which there is no color override (see below).
    typeset -g POWERLEVEL9K_ASDF_FOREGROUND=66

    # There are four parameters that can be used to hide asdf tools. Each parameter describes
    # conditions under which a tool gets hidden. Parameters can hide tools but not unhide them. If at
    # least one parameter decides to hide a tool, that tool gets hidden. If no parameter decides to
    # hide a tool, it gets shown.
    #
    # Special note on the difference between POWERLEVEL9K_ASDF_SOURCES and
    # POWERLEVEL9K_ASDF_PROMPT_ALWAYS_SHOW. Consider the effect of the following commands:
    #
    #   asdf local  python 3.8.1
    #   asdf global python 3.8.1
    #
    # After running both commands the current python version is 3.8.1 and its source is "local" as
    # it takes precedence over "global". If POWERLEVEL9K_ASDF_PROMPT_ALWAYS_SHOW is set to false,
    # it'll hide python version in this case because 3.8.1 is the same as the global version.
    # POWERLEVEL9K_ASDF_SOURCES will hide python version only if the value of this parameter doesn't
    # contain "local".

    # Hide tool versions that don't come from one of these sources.
    #
    # Available sources:
    #
    # - shell   `asdf current` says "set by ASDF_${TOOL}_VERSION environment variable"
    # - local   `asdf current` says "set by /some/not/home/directory/file"
    # - global  `asdf current` says "set by /home/username/file"
    #
    # Note: If this parameter is set to (shell local global), it won't hide tools.
    # Tip:  Override this parameter for ${TOOL} with POWERLEVEL9K_ASDF_${TOOL}_SOURCES.
    typeset -g POWERLEVEL9K_ASDF_SOURCES=(shell local global)

    # If set to false, hide tool versions that are the same as global.
    #
    # Note: The name of this parameter doesn't reflect its meaning at all.
    # Note: If this parameter is set to true, it won't hide tools.
    # Tip:  Override this parameter for ${TOOL} with POWERLEVEL9K_ASDF_${TOOL}_PROMPT_ALWAYS_SHOW.
    typeset -g POWERLEVEL9K_ASDF_PROMPT_ALWAYS_SHOW=false

    # If set to false, hide tool versions that are equal to "system".
    #
    # Note: If this parameter is set to true, it won't hide tools.
    # Tip: Override this parameter for ${TOOL} with POWERLEVEL9K_ASDF_${TOOL}_SHOW_SYSTEM.
    typeset -g POWERLEVEL9K_ASDF_SHOW_SYSTEM=true

    # If set to non-empty value, hide tools unless there is a file matching the specified file pattern
    # in the current directory, or its parent diretory, or its grandparent directory, and so on.
    #
    # Note: If this parameter is set to empty value, it won't hide tools.
    # Note: SHOW_ON_UPGLOB isn't specific to asdf. It works with all prompt segments.
    # Tip: Override this parameter for ${TOOL} with POWERLEVEL9K_ASDF_${TOOL}_SHOW_ON_UPGLOB.
    #
    # Example: Hide nodejs version when there is no package.json and no *.js files in the current
    # directory, in `..`, in `../..` and so on.
    #
    #   typeset -g POWERLEVEL9K_ASDF_NODEJS_SHOW_ON_UPGLOB='*.js|package.json'
    typeset -g POWERLEVEL9K_ASDF_SHOW_ON_UPGLOB=

    # Ruby version from asdf.
    typeset -g POWERLEVEL9K_ASDF_RUBY_FOREGROUND=168
    # typeset -g POWERLEVEL9K_ASDF_RUBY_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_RUBY_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Python version from asdf.
    typeset -g POWERLEVEL9K_ASDF_PYTHON_FOREGROUND=37
    # typeset -g POWERLEVEL9K_ASDF_PYTHON_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_PYTHON_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Go version from asdf.
    typeset -g POWERLEVEL9K_ASDF_GOLANG_FOREGROUND=37
    # typeset -g POWERLEVEL9K_ASDF_GOLANG_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_GOLANG_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Node.js version from asdf.
    typeset -g POWERLEVEL9K_ASDF_NODEJS_FOREGROUND=70
    # typeset -g POWERLEVEL9K_ASDF_NODEJS_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_NODEJS_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Rust version from asdf.
    typeset -g POWERLEVEL9K_ASDF_RUST_FOREGROUND=37
    # typeset -g POWERLEVEL9K_ASDF_RUST_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_RUST_SHOW_ON_UPGLOB='*.foo|*.bar'

    # .NET Core version from asdf.
    typeset -g POWERLEVEL9K_ASDF_DOTNET_CORE_FOREGROUND=134
    # typeset -g POWERLEVEL9K_ASDF_DOTNET_CORE_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_DOTNET_CORE_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Flutter version from asdf.
    typeset -g POWERLEVEL9K_ASDF_FLUTTER_FOREGROUND=38
    # typeset -g POWERLEVEL9K_ASDF_FLUTTER_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_FLUTTER_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Lua version from asdf.
    typeset -g POWERLEVEL9K_ASDF_LUA_FOREGROUND=32
    # typeset -g POWERLEVEL9K_ASDF_LUA_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_LUA_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Java version from asdf.
    typeset -g POWERLEVEL9K_ASDF_JAVA_FOREGROUND=32
    # typeset -g POWERLEVEL9K_ASDF_JAVA_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_JAVA_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Perl version from asdf.
    typeset -g POWERLEVEL9K_ASDF_PERL_FOREGROUND=67
    # typeset -g POWERLEVEL9K_ASDF_PERL_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_PERL_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Erlang version from asdf.
    typeset -g POWERLEVEL9K_ASDF_ERLANG_FOREGROUND=125
    # typeset -g POWERLEVEL9K_ASDF_ERLANG_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_ERLANG_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Elixir version from asdf.
    typeset -g POWERLEVEL9K_ASDF_ELIXIR_FOREGROUND=129
    # typeset -g POWERLEVEL9K_ASDF_ELIXIR_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_ELIXIR_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Postgres version from asdf.
    typeset -g POWERLEVEL9K_ASDF_POSTGRES_FOREGROUND=31
    # typeset -g POWERLEVEL9K_ASDF_POSTGRES_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_POSTGRES_SHOW_ON_UPGLOB='*.foo|*.bar'

    # PHP version from asdf.
    typeset -g POWERLEVEL9K_ASDF_PHP_FOREGROUND=99
    # typeset -g POWERLEVEL9K_ASDF_PHP_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_PHP_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Haskell version from asdf.
    typeset -g POWERLEVEL9K_ASDF_HASKELL_FOREGROUND=172
    # typeset -g POWERLEVEL9K_ASDF_HASKELL_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_HASKELL_SHOW_ON_UPGLOB='*.foo|*.bar'

    ##########[ nordvpn: nordvpn connection status, linux only (https://nordvpn.com/) ]###########
    # NordVPN connection indicator color.
    typeset -g POWERLEVEL9K_NORDVPN_FOREGROUND=39
    # Hide NordVPN connection indicator when not connected.
    typeset -g POWERLEVEL9K_NORDVPN_{DISCONNECTED,CONNECTING,DISCONNECTING}_CONTENT_EXPANSION=
    typeset -g POWERLEVEL9K_NORDVPN_{DISCONNECTED,CONNECTING,DISCONNECTING}_VISUAL_IDENTIFIER_EXPANSION=
    # Custom icon.
    # typeset -g POWERLEVEL9K_NORDVPN_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #################[ ranger: ranger shell (https://github.com/ranger/ranger) ]##################
    # Ranger shell color.
    typeset -g POWERLEVEL9K_RANGER_FOREGROUND=178
    # Custom icon.
    typeset -g POWERLEVEL9K_RANGER_VISUAL_IDENTIFIER_EXPANSION='▲'

    ######################[ nnn: nnn shell (https://github.com/jarun/nnn) ]#######################
    # Nnn shell color.
    typeset -g POWERLEVEL9K_NNN_FOREGROUND=72
    # Custom icon.
    # typeset -g POWERLEVEL9K_NNN_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###########################[ vim_shell: vim shell indicator (:sh) ]###########################
    # Vim shell indicator color.
    typeset -g POWERLEVEL9K_VIM_SHELL_FOREGROUND=34
    # Custom icon.
    # typeset -g POWERLEVEL9K_VIM_SHELL_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ######[ midnight_commander: midnight commander shell (https://midnight-commander.org/) ]######
    # Midnight Commander shell color.
    typeset -g POWERLEVEL9K_MIDNIGHT_COMMANDER_FOREGROUND=178
    # Custom icon.
    # typeset -g POWERLEVEL9K_MIDNIGHT_COMMANDER_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #[ nix_shell: nix shell (https://nixos.org/nixos/nix-pills/developing-with-nix-shell.html) ]##
    # Nix shell color.
    typeset -g POWERLEVEL9K_NIX_SHELL_FOREGROUND=74

    # Tip: If you want to see just the icon without "pure" and "impure", uncomment the next line.
    # typeset -g POWERLEVEL9K_NIX_SHELL_CONTENT_EXPANSION=

    # Custom icon.
    # typeset -g POWERLEVEL9K_NIX_SHELL_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##################################[ disk_usage: disk usage ]##################################
    # Colors for different levels of disk usage.
    typeset -g POWERLEVEL9K_DISK_USAGE_NORMAL_FOREGROUND=35
    typeset -g POWERLEVEL9K_DISK_USAGE_WARNING_FOREGROUND=220
    typeset -g POWERLEVEL9K_DISK_USAGE_CRITICAL_FOREGROUND=160
    # Thresholds for different levels of disk usage (percentage points).
    typeset -g POWERLEVEL9K_DISK_USAGE_WARNING_LEVEL=90
    typeset -g POWERLEVEL9K_DISK_USAGE_CRITICAL_LEVEL=95
    # If set to true, hide disk usage when below $POWERLEVEL9K_DISK_USAGE_WARNING_LEVEL percent.
    typeset -g POWERLEVEL9K_DISK_USAGE_ONLY_WARNING=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_DISK_USAGE_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###########[ vi_mode: vi mode (you don't need this if you've enabled prompt_char) ]###########
    # Text and color for normal (a.k.a. command) vi mode.
    typeset -g POWERLEVEL9K_VI_COMMAND_MODE_STRING=NORMAL
    typeset -g POWERLEVEL9K_VI_MODE_NORMAL_FOREGROUND=106
    # Text and color for visual vi mode.
    typeset -g POWERLEVEL9K_VI_VISUAL_MODE_STRING=VISUAL
    typeset -g POWERLEVEL9K_VI_MODE_VISUAL_FOREGROUND=68
    # Text and color for overtype (a.k.a. overwrite and replace) vi mode.
    typeset -g POWERLEVEL9K_VI_OVERWRITE_MODE_STRING=OVERTYPE
    typeset -g POWERLEVEL9K_VI_MODE_OVERWRITE_FOREGROUND=172
    # Text and color for insert vi mode.
    typeset -g POWERLEVEL9K_VI_INSERT_MODE_STRING=
    typeset -g POWERLEVEL9K_VI_MODE_INSERT_FOREGROUND=66

    # Custom icon.
    typeset -g POWERLEVEL9K_RANGER_VISUAL_IDENTIFIER_EXPANSION='▲'

    ######################################[ ram: free RAM ]#######################################
    # RAM color.
    typeset -g POWERLEVEL9K_RAM_FOREGROUND=66
    # Custom icon.
    # typeset -g POWERLEVEL9K_RAM_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #####################################[ swap: used swap ]######################################
    # Swap color.
    typeset -g POWERLEVEL9K_SWAP_FOREGROUND=96
    # Custom icon.
    # typeset -g POWERLEVEL9K_SWAP_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ######################################[ load: CPU load ]######################################
    # Show average CPU load over this many last minutes. Valid values are 1, 5 and 15.
    typeset -g POWERLEVEL9K_LOAD_WHICH=5
    # Load color when load is under 50%.
    typeset -g POWERLEVEL9K_LOAD_NORMAL_FOREGROUND=66
    # Load color when load is between 50% and 70%.
    typeset -g POWERLEVEL9K_LOAD_WARNING_FOREGROUND=178
    # Load color when load is over 70%.
    typeset -g POWERLEVEL9K_LOAD_CRITICAL_FOREGROUND=166
    # Custom icon.
    # typeset -g POWERLEVEL9K_LOAD_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ################[ todo: todo items (https://github.com/todotxt/todo.txt-cli) ]################
    # Todo color.
    typeset -g POWERLEVEL9K_TODO_FOREGROUND=110
    # Hide todo when the total number of tasks is zero.
    typeset -g POWERLEVEL9K_TODO_HIDE_ZERO_TOTAL=true
    # Hide todo when the number of tasks after filtering is zero.
    typeset -g POWERLEVEL9K_TODO_HIDE_ZERO_FILTERED=false

    # Todo format. The following parameters are available within the expansion.
    #
    # - P9K_TODO_TOTAL_TASK_COUNT     The total number of tasks.
    # - P9K_TODO_FILTERED_TASK_COUNT  The number of tasks after filtering.
    #
    # These variables correspond to the last line of the output of `todo.sh -p ls`:
    #
    #   TODO: 24 of 42 tasks shown
    #
    # Here 24 is P9K_TODO_FILTERED_TASK_COUNT and 42 is P9K_TODO_TOTAL_TASK_COUNT.
    #
    # typeset -g POWERLEVEL9K_TODO_CONTENT_EXPANSION='$P9K_TODO_FILTERED_TASK_COUNT'

    # Custom icon.
    # typeset -g POWERLEVEL9K_TODO_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###########[ timewarrior: timewarrior tracking status (https://timewarrior.net/) ]############
    # Timewarrior color.
    typeset -g POWERLEVEL9K_TIMEWARRIOR_FOREGROUND=110
    # If the tracked task is longer than 24 characters, truncate and append "…".
    # Tip: To always display tasks without truncation, delete the following parameter.
    # Tip: To hide task names and display just the icon when time tracking is enabled, set the
    # value of the following parameter to "".
    typeset -g POWERLEVEL9K_TIMEWARRIOR_CONTENT_EXPANSION='${P9K_CONTENT:0:24}${${P9K_CONTENT:24}:+…}'

    # Custom icon.
    # typeset -g POWERLEVEL9K_TIMEWARRIOR_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##############[ taskwarrior: taskwarrior task count (https://taskwarrior.org/) ]##############
    # Taskwarrior color.
    typeset -g POWERLEVEL9K_TASKWARRIOR_FOREGROUND=74

    # Taskwarrior segment format. The following parameters are available within the expansion.
    #
    # - P9K_TASKWARRIOR_PENDING_COUNT   The number of pending tasks: `task +PENDING count`.
    # - P9K_TASKWARRIOR_OVERDUE_COUNT   The number of overdue tasks: `task +OVERDUE count`.
    #
    # Zero values are represented as empty parameters.
    #
    # The default format:
    #
    #   '${P9K_TASKWARRIOR_OVERDUE_COUNT:+"!$P9K_TASKWARRIOR_OVERDUE_COUNT/"}$P9K_TASKWARRIOR_PENDING_COUNT'
    #
    # typeset -g POWERLEVEL9K_TASKWARRIOR_CONTENT_EXPANSION='$P9K_TASKWARRIOR_PENDING_COUNT'

    # Custom icon.
    # typeset -g POWERLEVEL9K_TASKWARRIOR_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##################################[ context: user@hostname ]##################################
    # Context color when running with privileges.
    typeset -g POWERLEVEL9K_CONTEXT_ROOT_FOREGROUND=178
    # Context color in SSH without privileges.
    typeset -g POWERLEVEL9K_CONTEXT_{REMOTE,REMOTE_SUDO}_FOREGROUND=180
    # Default context color (no privileges, no SSH).
    typeset -g POWERLEVEL9K_CONTEXT_FOREGROUND=180

    # Context format when running with privileges: bold user@hostname.
    typeset -g POWERLEVEL9K_CONTEXT_ROOT_TEMPLATE='%B%n@%m'
    # Context format when in SSH without privileges: user@hostname.
    typeset -g POWERLEVEL9K_CONTEXT_{REMOTE,REMOTE_SUDO}_TEMPLATE='%n@%m'
    # Default context format (no privileges, no SSH): user@hostname.
    typeset -g POWERLEVEL9K_CONTEXT_TEMPLATE='%n@%m'

    # Don't show context unless running with privileges or in SSH.
    # Tip: Remove the next line to always show context.
    typeset -g POWERLEVEL9K_CONTEXT_{DEFAULT,SUDO}_{CONTENT,VISUAL_IDENTIFIER}_EXPANSION=

    # Custom icon.
    # typeset -g POWERLEVEL9K_CONTEXT_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # Custom prefix.
    typeset -g POWERLEVEL9K_CONTEXT_PREFIX='%248Fwith '

    ###[ virtualenv: python virtual environment (https://docs.python.org/3/library/venv.html) ]###
    # Python virtual environment color.
    typeset -g POWERLEVEL9K_VIRTUALENV_FOREGROUND=37
    # Don't show Python version next to the virtual environment name.
    typeset -g POWERLEVEL9K_VIRTUALENV_SHOW_PYTHON_VERSION=false
    # Separate environment name from Python version only with a space.
    typeset -g POWERLEVEL9K_VIRTUALENV_{LEFT,RIGHT}_DELIMITER=
    # Custom icon.
    # typeset -g POWERLEVEL9K_VIRTUALENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #####################[ anaconda: conda environment (https://conda.io/) ]######################
    # Anaconda environment color.
    typeset -g POWERLEVEL9K_ANACONDA_FOREGROUND=37
    # Don't show Python version next to the anaconda environment name.
    typeset -g POWERLEVEL9K_ANACONDA_SHOW_PYTHON_VERSION=false
    # Separate environment name from Python version only with a space.
    typeset -g POWERLEVEL9K_ANACONDA_{LEFT,RIGHT}_DELIMITER=
    # Custom icon.
    typeset -g POWERLEVEL9K_ANACONDA_VISUAL_IDENTIFIER_EXPANSION='🐍'

    ################[ pyenv: python environment (https://github.com/pyenv/pyenv) ]################
    # Pyenv color.
    typeset -g POWERLEVEL9K_PYENV_FOREGROUND=37
    # Hide python version if it doesn't come from one of these sources.
    typeset -g POWERLEVEL9K_PYENV_SOURCES=(shell local global)
    # If set to false, hide python version if it's the same as global:
    # $(pyenv version-name) == $(pyenv global).
    typeset -g POWERLEVEL9K_PYENV_PROMPT_ALWAYS_SHOW=false
    # If set to false, hide python version if it's equal to "system".
    typeset -g POWERLEVEL9K_PYENV_SHOW_SYSTEM=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_PYENV_VISUAL_IDENTIFIER_EXPANSION='🐍'

    ################[ goenv: go environment (https://github.com/syndbg/goenv) ]################
    # Goenv color.
    typeset -g POWERLEVEL9K_GOENV_FOREGROUND=37
    # Hide go version if it doesn't come from one of these sources.
    typeset -g POWERLEVEL9K_GOENV_SOURCES=(shell local global)
    # If set to false, hide go version if it's the same as global:
    # $(goenv version-name) == $(goenv global).
    typeset -g POWERLEVEL9K_GOENV_PROMPT_ALWAYS_SHOW=false
    # If set to false, hide go version if it's equal to "system".
    typeset -g POWERLEVEL9K_GOENV_SHOW_SYSTEM=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_GOENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##########[ nodenv: node.js version from nodenv (https://github.com/nodenv/nodenv) ]##########
    # Nodenv color.
    typeset -g POWERLEVEL9K_NODENV_FOREGROUND=70
    # Hide node version if it doesn't come from one of these sources.
    typeset -g POWERLEVEL9K_NODENV_SOURCES=(shell local global)
    # If set to false, hide node version if it's the same as global:
    # $(nodenv version-name) == $(nodenv global).
    typeset -g POWERLEVEL9K_NODENV_PROMPT_ALWAYS_SHOW=false
    # If set to false, hide node version if it's equal to "system".
    typeset -g POWERLEVEL9K_NODENV_SHOW_SYSTEM=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_NODENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##############[ nvm: node.js version from nvm (https://github.com/nvm-sh/nvm) ]###############
    # Nvm color.
    typeset -g POWERLEVEL9K_NVM_FOREGROUND=70
    # Custom icon.
    # typeset -g POWERLEVEL9K_NVM_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ############[ nodeenv: node.js environment (https://github.com/ekalinin/nodeenv) ]############
    # Nodeenv color.
    typeset -g POWERLEVEL9K_NODEENV_FOREGROUND=70
    # Don't show Node version next to the environment name.
    typeset -g POWERLEVEL9K_NODEENV_SHOW_NODE_VERSION=false
    # Separate environment name from Node version only with a space.
    typeset -g POWERLEVEL9K_NODEENV_{LEFT,RIGHT}_DELIMITER=
    # Custom icon.
    # typeset -g POWERLEVEL9K_NODEENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##############################[ node_version: node.js version ]###############################
    # Node version color.
    typeset -g POWERLEVEL9K_NODE_VERSION_FOREGROUND=70
    # Show node version only when in a directory tree containing package.json.
    typeset -g POWERLEVEL9K_NODE_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_NODE_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #######################[ go_version: go version (https://golang.org) ]########################
    # Go version color.
    typeset -g POWERLEVEL9K_GO_VERSION_FOREGROUND=37
    # Show go version only when in a go project subdirectory.
    typeset -g POWERLEVEL9K_GO_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_GO_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #################[ rust_version: rustc version (https://www.rust-lang.org) ]##################
    # Rust version color.
    typeset -g POWERLEVEL9K_RUST_VERSION_FOREGROUND=37
    # Show rust version only when in a rust project subdirectory.
    typeset -g POWERLEVEL9K_RUST_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_RUST_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###############[ dotnet_version: .NET version (https://dotnet.microsoft.com) ]################
    # .NET version color.
    typeset -g POWERLEVEL9K_DOTNET_VERSION_FOREGROUND=134
    # Show .NET version only when in a .NET project subdirectory.
    typeset -g POWERLEVEL9K_DOTNET_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_DOTNET_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #####################[ php_version: php version (https://www.php.net/) ]######################
    # PHP version color.
    typeset -g POWERLEVEL9K_PHP_VERSION_FOREGROUND=99
    # Show PHP version only when in a PHP project subdirectory.
    typeset -g POWERLEVEL9K_PHP_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_PHP_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##########[ laravel_version: laravel php framework version (https://laravel.com/) ]###########
    # Laravel version color.
    typeset -g POWERLEVEL9K_LARAVEL_VERSION_FOREGROUND=161
    # Custom icon.
    # typeset -g POWERLEVEL9K_LARAVEL_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ####################[ java_version: java version (https://www.java.com/) ]####################
    # Java version color.
    typeset -g POWERLEVEL9K_JAVA_VERSION_FOREGROUND=32
    # Show java version only when in a java project subdirectory.
    typeset -g POWERLEVEL9K_JAVA_VERSION_PROJECT_ONLY=true
    # Show brief version.
    typeset -g POWERLEVEL9K_JAVA_VERSION_FULL=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_JAVA_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###[ package: name@version from package.json (https://docs.npmjs.com/files/package.json) ]####
    # Package color.
    typeset -g POWERLEVEL9K_PACKAGE_FOREGROUND=117
    # Package format. The following parameters are available within the expansion.
    #
    # - P9K_PACKAGE_NAME     The value of `name` field in package.json.
    # - P9K_PACKAGE_VERSION  The value of `version` field in package.json.
    #
    # typeset -g POWERLEVEL9K_PACKAGE_CONTENT_EXPANSION='${P9K_PACKAGE_NAME//\%/%%}@${P9K_PACKAGE_VERSION//\%/%%}'
    # Custom icon.
    # typeset -g POWERLEVEL9K_PACKAGE_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #############[ rbenv: ruby version from rbenv (https://github.com/rbenv/rbenv) ]##############
    # Rbenv color.
    typeset -g POWERLEVEL9K_RBENV_FOREGROUND=168
    # Hide ruby version if it doesn't come from one of these sources.
    typeset -g POWERLEVEL9K_RBENV_SOURCES=(shell local global)
    # If set to false, hide ruby version if it's the same as global:
    # $(rbenv version-name) == $(rbenv global).
    typeset -g POWERLEVEL9K_RBENV_PROMPT_ALWAYS_SHOW=false
    # If set to false, hide ruby version if it's equal to "system".
    typeset -g POWERLEVEL9K_RBENV_SHOW_SYSTEM=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_RBENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #######################[ rvm: ruby version from rvm (https://rvm.io) ]########################
    # Rvm color.
    typeset -g POWERLEVEL9K_RVM_FOREGROUND=168
    # Don't show @gemset at the end.
    typeset -g POWERLEVEL9K_RVM_SHOW_GEMSET=false
    # Don't show ruby- at the front.
    typeset -g POWERLEVEL9K_RVM_SHOW_PREFIX=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_RVM_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###########[ fvm: flutter version management (https://github.com/leoafarias/fvm) ]############
    # Fvm color.
    typeset -g POWERLEVEL9K_FVM_FOREGROUND=38
    # Custom icon.
    # typeset -g POWERLEVEL9K_FVM_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##########[ luaenv: lua version from luaenv (https://github.com/cehoffman/luaenv) ]###########
    # Lua color.
    typeset -g POWERLEVEL9K_LUAENV_FOREGROUND=32
    # Hide lua version if it doesn't come from one of these sources.
    typeset -g POWERLEVEL9K_LUAENV_SOURCES=(shell local global)
    # If set to false, hide lua version if it's the same as global:
    # $(luaenv version-name) == $(luaenv global).
    typeset -g POWERLEVEL9K_LUAENV_PROMPT_ALWAYS_SHOW=false
    # If set to false, hide lua version if it's equal to "system".
    typeset -g POWERLEVEL9K_LUAENV_SHOW_SYSTEM=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_LUAENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###############[ jenv: java version from jenv (https://github.com/jenv/jenv) ]################
    # Java color.
    typeset -g POWERLEVEL9K_JENV_FOREGROUND=32
    # Hide java version if it doesn't come from one of these sources.
    typeset -g POWERLEVEL9K_JENV_SOURCES=(shell local global)
    # If set to false, hide java version if it's the same as global:
    # $(jenv version-name) == $(jenv global).
    typeset -g POWERLEVEL9K_JENV_PROMPT_ALWAYS_SHOW=false
    # If set to false, hide java version if it's equal to "system".
    typeset -g POWERLEVEL9K_JENV_SHOW_SYSTEM=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_JENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###########[ plenv: perl version from plenv (https://github.com/tokuhirom/plenv) ]############
    # Perl color.
    typeset -g POWERLEVEL9K_PLENV_FOREGROUND=67
    # Hide perl version if it doesn't come from one of these sources.
    typeset -g POWERLEVEL9K_PLENV_SOURCES=(shell local global)
    # If set to false, hide perl version if it's the same as global:
    # $(plenv version-name) == $(plenv global).
    typeset -g POWERLEVEL9K_PLENV_PROMPT_ALWAYS_SHOW=false
    # If set to false, hide perl version if it's equal to "system".
    typeset -g POWERLEVEL9K_PLENV_SHOW_SYSTEM=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_PLENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ############[ phpenv: php version from phpenv (https://github.com/phpenv/phpenv) ]############
    # PHP color.
    typeset -g POWERLEVEL9K_PHPENV_FOREGROUND=99
    # Hide php version if it doesn't come from one of these sources.
    typeset -g POWERLEVEL9K_PHPENV_SOURCES=(shell local global)
    # If set to false, hide php version if it's the same as global:
    # $(phpenv version-name) == $(phpenv global).
    typeset -g POWERLEVEL9K_PHPENV_PROMPT_ALWAYS_SHOW=false
    # If set to false, hide php version if it's equal to "system".
    typeset -g POWERLEVEL9K_PHPENV_SHOW_SYSTEM=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_PHPENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##########[ haskell_stack: haskell version from stack (https://haskellstack.org/) ]###########
    # Haskell color.
    typeset -g POWERLEVEL9K_HASKELL_STACK_FOREGROUND=172
    # Hide haskell version if it doesn't come from one of these sources.
    #
    #   shell:  version is set by STACK_YAML
    #   local:  version is set by stack.yaml up the directory tree
    #   global: version is set by the implicit global project (~/.stack/global-project/stack.yaml)
    typeset -g POWERLEVEL9K_HASKELL_STACK_SOURCES=(shell local)
    # If set to false, hide haskell version if it's the same as in the implicit global project.
    typeset -g POWERLEVEL9K_HASKELL_STACK_ALWAYS_SHOW=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_HASKELL_STACK_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ################[ terraform: terraform workspace (https://www.terraform.io) ]#################
    # POWERLEVEL9K_TERRAFORM_CLASSES is an array with even number of elements. The first element
    # in each pair defines a pattern against which the current terraform workspace gets matched.
    # More specifically, it's P9K_CONTENT prior to the application of context expansion (see below)
    # that gets matched. If you unset all POWERLEVEL9K_TERRAFORM_*CONTENT_EXPANSION parameters,
    # you'll see this value in your prompt. The second element of each pair in
    # POWERLEVEL9K_TERRAFORM_CLASSES defines the workspace class. Patterns are tried in order. The
    # first match wins.
    #
    # For example, given these settings:
    #
    #   typeset -g POWERLEVEL9K_TERRAFORM_CLASSES=(
    #     '*prod*'  PROD
    #     '*test*'  TEST
    #     '*'       DEFAULT)
    #
    # If your current terraform workspace is "project_test", its class is TEST because "project_test"
    # doesn't match the pattern '*prod*' but does match '*test*'.
    #
    # You can define different colors, icons and content expansions for different classes:
    #
    #   typeset -g POWERLEVEL9K_TERRAFORM_TEST_FOREGROUND=28
    #   typeset -g POWERLEVEL9K_TERRAFORM_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'
    #   typeset -g POWERLEVEL9K_TERRAFORM_TEST_CONTENT_EXPANSION='> ${P9K_CONTENT} <'
    typeset -g POWERLEVEL9K_TERRAFORM_CLASSES=(
        # '*prod*'  PROD    # These values are examples that are unlikely
        # '*test*'  TEST    # to match your needs. Customize them as needed.
        '*'       DEFAULT)
    typeset -g POWERLEVEL9K_TERRAFORM_DEFAULT_FOREGROUND=38
    # typeset -g POWERLEVEL9K_TERRAFORM_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #############[ kubecontext: current kubernetes context (https://kubernetes.io/) ]#############
    # Show kubecontext only when the the command you are typing invokes one of these tools.
    # Tip: Remove the next line to always show kubecontext.
    typeset -g POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND='kubectl|helm|kubens|kubectx|oc|istioctl|kogito'

    # Kubernetes context classes for the purpose of using different colors, icons and expansions with
    # different contexts.
    #
    # POWERLEVEL9K_KUBECONTEXT_CLASSES is an array with even number of elements. The first element
    # in each pair defines a pattern against which the current kubernetes context gets matched.
    # More specifically, it's P9K_CONTENT prior to the application of context expansion (see below)
    # that gets matched. If you unset all POWERLEVEL9K_KUBECONTEXT_*CONTENT_EXPANSION parameters,
    # you'll see this value in your prompt. The second element of each pair in
    # POWERLEVEL9K_KUBECONTEXT_CLASSES defines the context class. Patterns are tried in order. The
    # first match wins.
    #
    # For example, given these settings:
    #
    #   typeset -g POWERLEVEL9K_KUBECONTEXT_CLASSES=(
    #     '*prod*'  PROD
    #     '*test*'  TEST
    #     '*'       DEFAULT)
    #
    # If your current kubernetes context is "deathray-testing/default", its class is TEST
    # because "deathray-testing/default" doesn't match the pattern '*prod*' but does match '*test*'.
    #
    # You can define different colors, icons and content expansions for different classes:
    #
    #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_FOREGROUND=28
    #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'
    #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_CONTENT_EXPANSION='> ${P9K_CONTENT} <'
    typeset -g POWERLEVEL9K_KUBECONTEXT_CLASSES=(
        # '*prod*'  PROD    # These values are examples that are unlikely
        # '*test*'  TEST    # to match your needs. Customize them as needed.
        '*'       DEFAULT)
    typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_FOREGROUND=134
    typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='○'

    # Use POWERLEVEL9K_KUBECONTEXT_CONTENT_EXPANSION to specify the content displayed by kubecontext
    # segment. Parameter expansions are very flexible and fast, too. See reference:
    # http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion.
    #
    # Within the expansion the following parameters are always available:
    #
    # - P9K_CONTENT                The content that would've been displayed if there was no content
    #                              expansion defined.
    # - P9K_KUBECONTEXT_NAME       The current context's name. Corresponds to column NAME in the
    #                              output of `kubectl config get-contexts`.
    # - P9K_KUBECONTEXT_CLUSTER    The current context's cluster. Corresponds to column CLUSTER in the
    #                              output of `kubectl config get-contexts`.
    # - P9K_KUBECONTEXT_NAMESPACE  The current context's namespace. Corresponds to column NAMESPACE
    #                              in the output of `kubectl config get-contexts`. If there is no
    #                              namespace, the parameter is set to "default".
    # - P9K_KUBECONTEXT_USER       The current context's user. Corresponds to column AUTHINFO in the
    #                              output of `kubectl config get-contexts`.
    #
    # If the context points to Google Kubernetes Engine (GKE) or Elastic Kubernetes Service (EKS),
    # the following extra parameters are available:
    #
    # - P9K_KUBECONTEXT_CLOUD_NAME     Either "gke" or "eks".
    # - P9K_KUBECONTEXT_CLOUD_ACCOUNT  Account/project ID.
    # - P9K_KUBECONTEXT_CLOUD_ZONE     Availability zone.
    # - P9K_KUBECONTEXT_CLOUD_CLUSTER  Cluster.
    #
    # P9K_KUBECONTEXT_CLOUD_* parameters are derived from P9K_KUBECONTEXT_CLUSTER. For example,
    # if P9K_KUBECONTEXT_CLUSTER is "gke_my-account_us-east1-a_my-cluster-01":
    #
    #   - P9K_KUBECONTEXT_CLOUD_NAME=gke
    #   - P9K_KUBECONTEXT_CLOUD_ACCOUNT=my-account
    #   - P9K_KUBECONTEXT_CLOUD_ZONE=us-east1-a
    #   - P9K_KUBECONTEXT_CLOUD_CLUSTER=my-cluster-01
    #
    # If P9K_KUBECONTEXT_CLUSTER is "arn:aws:eks:us-east-1:123456789012:cluster/my-cluster-01":
    #
    #   - P9K_KUBECONTEXT_CLOUD_NAME=eks
    #   - P9K_KUBECONTEXT_CLOUD_ACCOUNT=123456789012
    #   - P9K_KUBECONTEXT_CLOUD_ZONE=us-east-1
    #   - P9K_KUBECONTEXT_CLOUD_CLUSTER=my-cluster-01
    typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION=
    # Show P9K_KUBECONTEXT_CLOUD_CLUSTER if it's not empty and fall back to P9K_KUBECONTEXT_NAME.
    POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION+='${P9K_KUBECONTEXT_CLOUD_CLUSTER:-${P9K_KUBECONTEXT_NAME}}'
    # Append the current context's namespace if it's not "default".
    POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION+='${${:-/$P9K_KUBECONTEXT_NAMESPACE}:#/default}'

    # Custom prefix.
    typeset -g POWERLEVEL9K_KUBECONTEXT_PREFIX='%248Fat '

    #[ aws: aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html) ]#
    # Show aws only when the the command you are typing invokes one of these tools.
    # Tip: Remove the next line to always show aws.
    typeset -g POWERLEVEL9K_AWS_SHOW_ON_COMMAND='aws|awless|terraform|pulumi'

    # POWERLEVEL9K_AWS_CLASSES is an array with even number of elements. The first element
    # in each pair defines a pattern against which the current AWS profile gets matched.
    # More specifically, it's P9K_CONTENT prior to the application of context expansion (see below)
    # that gets matched. If you unset all POWERLEVEL9K_AWS_*CONTENT_EXPANSION parameters,
    # you'll see this value in your prompt. The second element of each pair in
    # POWERLEVEL9K_AWS_CLASSES defines the profile class. Patterns are tried in order. The
    # first match wins.
    #
    # For example, given these settings:
    #
    #   typeset -g POWERLEVEL9K_AWS_CLASSES=(
    #     '*prod*'  PROD
    #     '*test*'  TEST
    #     '*'       DEFAULT)
    #
    # If your current AWS profile is "company_test", its class is TEST
    # because "company_test" doesn't match the pattern '*prod*' but does match '*test*'.
    #
    # You can define different colors, icons and content expansions for different classes:
    #
    #   typeset -g POWERLEVEL9K_AWS_TEST_FOREGROUND=28
    #   typeset -g POWERLEVEL9K_AWS_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'
    #   typeset -g POWERLEVEL9K_AWS_TEST_CONTENT_EXPANSION='> ${P9K_CONTENT} <'
    typeset -g POWERLEVEL9K_AWS_CLASSES=(
        # '*prod*'  PROD    # These values are examples that are unlikely
        # '*test*'  TEST    # to match your needs. Customize them as needed.
        '*'       DEFAULT)
    typeset -g POWERLEVEL9K_AWS_DEFAULT_FOREGROUND=208
    # typeset -g POWERLEVEL9K_AWS_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #[ aws_eb_env: aws elastic beanstalk environment (https://aws.amazon.com/elasticbeanstalk/) ]#
    # AWS Elastic Beanstalk environment color.
    typeset -g POWERLEVEL9K_AWS_EB_ENV_FOREGROUND=70
    # Custom icon.
    typeset -g POWERLEVEL9K_AWS_EB_ENV_VISUAL_IDENTIFIER_EXPANSION='eb'

    ##########[ azure: azure account name (https://docs.microsoft.com/en-us/cli/azure) ]##########
    # Show azure only when the the command you are typing invokes one of these tools.
    # Tip: Remove the next line to always show azure.
    typeset -g POWERLEVEL9K_AZURE_SHOW_ON_COMMAND='az|terraform|pulumi'
    # Azure account name color.
    typeset -g POWERLEVEL9K_AZURE_FOREGROUND=32
    # Custom icon.
    typeset -g POWERLEVEL9K_AZURE_VISUAL_IDENTIFIER_EXPANSION='az'

    ##########[ gcloud: google cloud account and project (https://cloud.google.com/) ]###########
    # Show gcloud only when the the command you are typing invokes one of these tools.
    # Tip: Remove the next line to always show gcloud.
    typeset -g POWERLEVEL9K_GCLOUD_SHOW_ON_COMMAND='gcloud|gcs'
    # Google cloud color.
    typeset -g POWERLEVEL9K_GCLOUD_FOREGROUND=32

    # Google cloud format. Change the value of POWERLEVEL9K_GCLOUD_PARTIAL_CONTENT_EXPANSION and/or
    # POWERLEVEL9K_GCLOUD_COMPLETE_CONTENT_EXPANSION if the default is too verbose or not informative
    # enough. You can use the following parameters in the expansions. Each of them corresponds to the
    # output of `gcloud` tool.
    #
    #   Parameter                | Source
    #   -------------------------|--------------------------------------------------------------------
    #   P9K_GCLOUD_CONFIGURATION | gcloud config configurations list --format='value(name)'
    #   P9K_GCLOUD_ACCOUNT       | gcloud config get-value account
    #   P9K_GCLOUD_PROJECT_ID    | gcloud config get-value project
    #   P9K_GCLOUD_PROJECT_NAME  | gcloud projects describe $P9K_GCLOUD_PROJECT_ID --format='value(name)'
    #
    # Note: ${VARIABLE//\%/%%} expands to ${VARIABLE} with all occurences of '%' replaced with '%%'.
    #
    # Obtaining project name requires sending a request to Google servers. This can take a long time
    # and even fail. When project name is unknown, P9K_GCLOUD_PROJECT_NAME is not set and gcloud
    # prompt segment is in state PARTIAL. When project name gets known, P9K_GCLOUD_PROJECT_NAME gets
    # set and gcloud prompt segment transitions to state COMPLETE.
    #
    # You can customize the format, icon and colors of gcloud segment separately for states PARTIAL
    # and COMPLETE. You can also hide gcloud in state PARTIAL by setting
    # POWERLEVEL9K_GCLOUD_PARTIAL_VISUAL_IDENTIFIER_EXPANSION and
    # POWERLEVEL9K_GCLOUD_PARTIAL_CONTENT_EXPANSION to empty.
    typeset -g POWERLEVEL9K_GCLOUD_PARTIAL_CONTENT_EXPANSION='${P9K_GCLOUD_PROJECT_ID//\%/%%}'
    typeset -g POWERLEVEL9K_GCLOUD_COMPLETE_CONTENT_EXPANSION='${P9K_GCLOUD_PROJECT_NAME//\%/%%}'

    # Send a request to Google (by means of `gcloud projects describe ...`) to obtain project name
    # this often. Negative value disables periodic polling. In this mode project name is retrieved
    # only when the current configuration, account or project id changes.
    typeset -g POWERLEVEL9K_GCLOUD_REFRESH_PROJECT_NAME_SECONDS=60

    # Custom icon.
    # typeset -g POWERLEVEL9K_GCLOUD_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #[ google_app_cred: google application credentials (https://cloud.google.com/docs/authentication/production) ]#
    # Show google_app_cred only when the the command you are typing invokes one of these tools.
    # Tip: Remove the next line to always show google_app_cred.
    typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_SHOW_ON_COMMAND='terraform|pulumi'

    # Google application credentials classes for the purpose of using different colors, icons and
    # expansions with different credentials.
    #
    # POWERLEVEL9K_GOOGLE_APP_CRED_CLASSES is an array with even number of elements. The first
    # element in each pair defines a pattern against which the current kubernetes context gets
    # matched. More specifically, it's P9K_CONTENT prior to the application of context expansion
    # (see below) that gets matched. If you unset all POWERLEVEL9K_GOOGLE_APP_CRED_*CONTENT_EXPANSION
    # parameters, you'll see this value in your prompt. The second element of each pair in
    # POWERLEVEL9K_GOOGLE_APP_CRED_CLASSES defines the context class. Patterns are tried in order.
    # The first match wins.
    #
    # For example, given these settings:
    #
    #   typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_CLASSES=(
    #     '*:*prod*:*'  PROD
    #     '*:*test*:*'  TEST
    #     '*'           DEFAULT)
    #
    # If your current Google application credentials is "service_account deathray-testing x@y.com",
    # its class is TEST because it doesn't match the pattern '* *prod* *' but does match '* *test* *'.
    #
    # You can define different colors, icons and content expansions for different classes:
    #
    #   typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_TEST_FOREGROUND=28
    #   typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'
    #   typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_TEST_CONTENT_EXPANSION='$P9K_GOOGLE_APP_CRED_PROJECT_ID'
    typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_CLASSES=(
        # '*:*prod*:*'  PROD    # These values are examples that are unlikely
        # '*:*test*:*'  TEST    # to match your needs. Customize them as needed.
        '*'             DEFAULT)
    typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_DEFAULT_FOREGROUND=32
    # typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='⭐'

    # Use POWERLEVEL9K_GOOGLE_APP_CRED_CONTENT_EXPANSION to specify the content displayed by
    # google_app_cred segment. Parameter expansions are very flexible and fast, too. See reference:
    # http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion.
    #
    # You can use the following parameters in the expansion. Each of them corresponds to one of the
    # fields in the JSON file pointed to by GOOGLE_APPLICATION_CREDENTIALS.
    #
    #   Parameter                        | JSON key file field
    #   ---------------------------------+---------------
    #   P9K_GOOGLE_APP_CRED_TYPE         | type
    #   P9K_GOOGLE_APP_CRED_PROJECT_ID   | project_id
    #   P9K_GOOGLE_APP_CRED_CLIENT_EMAIL | client_email
    #
    # Note: ${VARIABLE//\%/%%} expands to ${VARIABLE} with all occurences of '%' replaced by '%%'.
    typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_DEFAULT_CONTENT_EXPANSION='${P9K_GOOGLE_APP_CRED_PROJECT_ID//\%/%%}'

    ###############################[ public_ip: public IP address ]###############################
    # Public IP color.
    typeset -g POWERLEVEL9K_PUBLIC_IP_FOREGROUND=94
    # Custom icon.
    # typeset -g POWERLEVEL9K_PUBLIC_IP_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ########################[ vpn_ip: virtual private network indicator ]#########################
    # VPN IP color.
    typeset -g POWERLEVEL9K_VPN_IP_FOREGROUND=81
    # When on VPN, show just an icon without the IP address.
    # Tip: To display the private IP address when on VPN, remove the next line.
    typeset -g POWERLEVEL9K_VPN_IP_CONTENT_EXPANSION=
    # Regular expression for the VPN network interface. Run `ifconfig` or `ip -4 a show` while on VPN
    # to see the name of the interface.
    typeset -g POWERLEVEL9K_VPN_IP_INTERFACE='(wg|(.*tun))[0-9]*'
    # If set to true, show one segment per matching network interface. If set to false, show only
    # one segment corresponding to the first matching network interface.
    # Tip: If you set it to true, you'll probably want to unset POWERLEVEL9K_VPN_IP_CONTENT_EXPANSION.
    typeset -g POWERLEVEL9K_VPN_IP_SHOW_ALL=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_VPN_IP_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###########[ ip: ip address and bandwidth usage for a specified network interface ]###########
    # IP color.
    typeset -g POWERLEVEL9K_IP_FOREGROUND=38
    # The following parameters are accessible within the expansion:
    #
    #   Parameter             | Meaning
    #   ----------------------+---------------
    #   P9K_IP_IP         | IP address
    #   P9K_IP_INTERFACE  | network interface
    #   P9K_IP_RX_BYTES   | total number of bytes received
    #   P9K_IP_TX_BYTES   | total number of bytes sent
    #   P9K_IP_RX_RATE    | receive rate (since last prompt)
    #   P9K_IP_TX_RATE    | send rate (since last prompt)
    typeset -g POWERLEVEL9K_IP_CONTENT_EXPANSION='${P9K_IP_RX_RATE:+%70F⇣$P9K_IP_RX_RATE }${P9K_IP_TX_RATE:+%215F⇡$P9K_IP_TX_RATE }%38F$P9K_IP_IP'
    # Show information for the first network interface whose name matches this regular expression.
    # Run `ifconfig` or `ip -4 a show` to see the names of all network interfaces.
    typeset -g POWERLEVEL9K_IP_INTERFACE='e.*'
    # Custom icon.
    # typeset -g POWERLEVEL9K_IP_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #########################[ proxy: system-wide http/https/ftp proxy ]##########################
    # Proxy color.
    typeset -g POWERLEVEL9K_PROXY_FOREGROUND=68
    # Custom icon.
    # typeset -g POWERLEVEL9K_PROXY_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ################################[ battery: internal battery ]#################################
    # Show battery in red when it's below this level and not connected to power supply.
    typeset -g POWERLEVEL9K_BATTERY_LOW_THRESHOLD=20
    typeset -g POWERLEVEL9K_BATTERY_LOW_FOREGROUND=160
    # Show battery in green when it's charging or fully charged.
    typeset -g POWERLEVEL9K_BATTERY_{CHARGING,CHARGED}_FOREGROUND=70
    # Show battery in yellow when it's discharging.
    typeset -g POWERLEVEL9K_BATTERY_DISCONNECTED_FOREGROUND=070
    # Battery pictograms going from low to high level of charge.
    typeset -g POWERLEVEL9K_BATTERY_STAGES=(
        "\uf244 " "\uf243 " "\uf242 " "\uf241 " "\uf240 "
    )
    typeset -g POWERLEVEL9K_BATTERY_STAGES=('%K{232}▁' '%K{232}▂' '%K{232}▃' '%K{232}▄' '%K{232}▅' '%K{232}▆' '%K{232}▇' '%K{232}█')
    # Don't show the remaining time to charge/discharge.
    typeset -g POWERLEVEL9K_BATTERY_VERBOSE=false

    #####################################[ wifi: wifi speed ]#####################################
    # WiFi color.
    typeset -g POWERLEVEL9K_WIFI_FOREGROUND=68
    # Custom icon.
    # typeset -g POWERLEVEL9K_WIFI_VISUAL_IDENTIFIER_EXPANSION='⭐'

    # Use different colors and icons depending on signal strength ($P9K_WIFI_BARS).
    #
    #   # Wifi colors and icons for different signal strength levels (low to high).
    #   typeset -g my_wifi_fg=(68 68 68 68 68)                           # <-- change these values
    #   typeset -g my_wifi_icon=('WiFi' 'WiFi' 'WiFi' 'WiFi' 'WiFi')     # <-- change these values
    #
    #   typeset -g POWERLEVEL9K_WIFI_CONTENT_EXPANSION='%F{${my_wifi_fg[P9K_WIFI_BARS+1]}}$P9K_WIFI_LAST_TX_RATE Mbps'
    #   typeset -g POWERLEVEL9K_WIFI_VISUAL_IDENTIFIER_EXPANSION='%F{${my_wifi_fg[P9K_WIFI_BARS+1]}}${my_wifi_icon[P9K_WIFI_BARS+1]}'
    #
    # The following parameters are accessible within the expansions:
    #
    #   Parameter             | Meaning
    #   ----------------------+---------------
    #   P9K_WIFI_SSID         | service set identifier, a.k.a. network name
    #   P9K_WIFI_LINK_AUTH    | authentication protocol such as "wpa2-psk" or "none"
    #   P9K_WIFI_LAST_TX_RATE | wireless transmit rate in megabits per second
    #   P9K_WIFI_RSSI         | signal strength in dBm, from -120 to 0
    #   P9K_WIFI_NOISE        | noise in dBm, from -120 to 0
    #   P9K_WIFI_BARS         | signal strength in bars, from 0 to 4 (derived from P9K_WIFI_RSSI and P9K_WIFI_NOISE)
    #
    # All parameters except P9K_WIFI_BARS are extracted from the output of the following command:
    #
    #   /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I

    ####################################[ time: current time ]####################################
    # Current time color.
    typeset -g POWERLEVEL9K_TIME_FOREGROUND=66
    # Format for the current time: 09:51:02. See `man 3 strftime`.
    typeset -g POWERLEVEL9K_TIME_FORMAT="%D{\uf017 %H:%M \uf073 %d.%m.%y}"
    # If set to true, time will update when you hit enter. This way prompts for the past
    # commands will contain the start times of their commands as opposed to the default
    # behavior where they contain the end times of their preceding commands.
    typeset -g POWERLEVEL9K_TIME_UPDATE_ON_COMMAND=false
    # Custom icon.
    typeset -g POWERLEVEL9K_TIME_VISUAL_IDENTIFIER_EXPANSION=
    # Custom prefix.
    typeset -g POWERLEVEL9K_TIME_PREFIX=' '

    # Example of a user-defined prompt segment. Function prompt_example will be called on every
    # prompt if `example` prompt segment is added to POWERLEVEL9K_LEFT_PROMPT_ELEMENTS or
    # POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS. It displays an icon and orange text greeting the user.
    #
    # Type `p10k help segment` for documentation and a more sophisticated example.
    function prompt_example() {
        p10k segment -f 208 -i '⭐' -t 'hello, %n'
    }

    # User-defined prompt segments may optionally provide an instant_prompt_* function. Its job
    # is to generate the prompt segment for display in instant prompt. See
    # https://github.com/romkatv/powerlevel10k/blob/master/README.md#instant-prompt.
    #
    # Powerlevel10k will call instant_prompt_* at the same time as the regular prompt_* function
    # and will record all `p10k segment` calls it makes. When displaying instant prompt, Powerlevel10k
    # will replay these calls without actually calling instant_prompt_*. It is imperative that
    # instant_prompt_* always makes the same `p10k segment` calls regardless of environment. If this
    # rule is not observed, the content of instant prompt will be incorrect.
    #
    # Usually, you should either not define instant_prompt_* or simply call prompt_* from it. If
    # instant_prompt_* is not defined for a segment, the segment won't be shown in instant prompt.
    function instant_prompt_example() {
        # Since prompt_example always makes the same `p10k segment` calls, we can call it from
        # instant_prompt_example. This will give us the same `example` prompt segment in the instant
        # and regular prompts.
        prompt_example
    }

    # User-defined prompt segments can be customized the same way as built-in segments.
    # typeset -g POWERLEVEL9K_EXAMPLE_FOREGROUND=208
    # typeset -g POWERLEVEL9K_EXAMPLE_VISUAL_IDENTIFIER_EXPANSION='⭐'

    # Transient prompt works similarly to the builtin transient_rprompt option. It trims down prompt
    # when accepting a command line. Supported values:
    #
    #   - off:      Don't change prompt when accepting a command line.
    #   - always:   Trim down prompt when accepting a command line.
    #   - same-dir: Trim down prompt when accepting a command line unless this is the first command
    #               typed after changing current working directory.
    typeset -g POWERLEVEL9K_TRANSIENT_PROMPT=always

    # Instant prompt mode.
    #
    #   - off:     Disable instant prompt. Choose this if you've tried instant prompt and found
    #              it incompatible with your zsh configuration files.
    #   - quiet:   Enable instant prompt and don't print warnings when detecting console output
    #              during zsh initialization. Choose this if you've read and understood
    #              https://github.com/romkatv/powerlevel10k/blob/master/README.md#instant-prompt.
    #   - verbose: Enable instant prompt and print a warning when detecting console output during
    #              zsh initialization. Choose this if you've never tried instant prompt, haven't
    #              seen the warning, or if you are unsure what this all means.
    typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet

    # Hot reload allows you to change POWERLEVEL9K options after Powerlevel10k has been initialized.
    # For example, you can type POWERLEVEL9K_BACKGROUND=red and see your prompt turn red. Hot reload
    # can slow down prompt by 1-2 milliseconds, so it's better to keep it turned off unless you
    # really need it.
    typeset -g POWERLEVEL9K_DISABLE_HOT_RELOAD=true

    # If p10k is already loaded, reload configuration.
    # This works even with POWERLEVEL9K_DISABLE_HOT_RELOAD=true.
    (( ! $+functions[p10k] )) || p10k reload
}

(( ${#p10k_config_opts} )) && setopt ${p10k_config_opts[@]}
'builtin' 'unset' 'p10k_config_opts'
#+end_src

*** Emacs
#+begin_src shell :results output replace :tangle ~/.config/zsh/emacs_p10k.zsh :mkdirp yes
  # Generated by Powerlevel10k configuration wizard on 2021-04-10 at 12:54 IST.
  # Based on romkatv/powerlevel10k/config/p10k-lean.zsh, checksum 11947.
  # Wizard options: nerdfont-complete + powerline, small icons, unicode, lean, 24h time,
  # 1 line, sparse, many icons, concise, transient_prompt, instant_prompt=verbose.
  # Type `p10k configure` to generate another config.
  #
  # Config for Powerlevel10k with lean prompt style. Type `p10k configure` to generate
  # your own config based on it.
  #
  # Tip: Looking for a nice color? Here's a one-liner to print colormap.
  #
  #   for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; done

  # Temporarily change options.
  'builtin' 'local' '-a' 'p10k_config_opts'
  [[ ! -o 'aliases'         ]] || p10k_config_opts+=('aliases')
  [[ ! -o 'sh_glob'         ]] || p10k_config_opts+=('sh_glob')
  [[ ! -o 'no_brace_expand' ]] || p10k_config_opts+=('no_brace_expand')
  'builtin' 'setopt' 'no_aliases' 'no_sh_glob' 'brace_expand'

  () {
    emulate -L zsh -o extended_glob

    # Unset all configuration options. This allows you to apply configuration changes without
    # restarting zsh. Edit ~/.p10k.zsh and type `source ~/.p10k.zsh`.
    unset -m '(POWERLEVEL9K_*|DEFAULT_USER)~POWERLEVEL9K_GITSTATUS_DIR'

    # Zsh >= 5.1 is required.
    autoload -Uz is-at-least && is-at-least 5.1 || return

    # The list of segments shown on the left. Fill it with the most important segments.
    typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(
        # =========================[ Line #1 ]=========================
        status                  # exit code of the last command
        anaconda                # conda environment (https://conda.io/)
        dir                     # current directory
        vcs                     # git status
        prompt_char             # prompt symbol
    )

    # The list of segments shown on the right. Fill it with less important segments.
    # Right prompt on the last prompt line (where you are typing your commands) gets
    # automatically hidden when the input line reaches it. Right prompt above the
    # last prompt line gets hidden if it would overlap with left prompt.
    typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(
          command_execution_time  # duration of the last command
          background_jobs         # presence of background jobs
          battery               # internal battery
          direnv                  # direnv status (https://direnv.net/)
          asdf                    # asdf version manager (https://github.com/asdf-vm/asdf)
          goenv                   # go environment (https://github.com/syndbg/goenv)
          nodenv                  # node.js version from nodenv (https://github.com/nodenv/nodenv)
          nvm                     # node.js version from nvm (https://github.com/nvm-sh/nvm)
          nodeenv                 # node.js environment (https://github.com/ekalinin/nodeenv)
    )

    # Defines character set used by powerlevel10k. It's best to let `p10k configure` set it for you.
    typeset -g POWERLEVEL9K_MODE=nerdfont-complete
    # When set to `moderate`, some icons will have an extra space after them. This is meant to avoid
    # icon overlap when using non-monospace fonts. When set to `none`, spaces are not added.
    typeset -g POWERLEVEL9K_ICON_PADDING=none

    # Basic style options that define the overall look of your prompt. You probably don't want to
    # change them.
    typeset -g POWERLEVEL9K_BACKGROUND=                            # transparent background
    typeset -g POWERLEVEL9K_{LEFT,RIGHT}_{LEFT,RIGHT}_WHITESPACE=  # no surrounding whitespace
    typeset -g POWERLEVEL9K_{LEFT,RIGHT}_SUBSEGMENT_SEPARATOR=' '  # separate segments with a space
    typeset -g POWERLEVEL9K_{LEFT,RIGHT}_SEGMENT_SEPARATOR=        # no end-of-line symbol

    # When set to true, icons appear before content on both sides of the prompt. When set
    # to false, icons go after content. If empty or not set, icons go before content in the left
    # prompt and after content in the right prompt.
    #
    # You can also override it for a specific segment:
    #
    #   POWERLEVEL9K_STATUS_ICON_BEFORE_CONTENT=false
    #
    # Or for a specific segment in specific state:
    #
    #   POWERLEVEL9K_DIR_NOT_WRITABLE_ICON_BEFORE_CONTENT=false
    typeset -g POWERLEVEL9K_ICON_BEFORE_CONTENT=true

    # Add an empty line before each prompt.
    typeset -g POWERLEVEL9K_PROMPT_ADD_NEWLINE=true

    # Connect left prompt lines with these symbols.
    typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=
    typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_PREFIX=
    typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=
    # Connect right prompt lines with these symbols.
    typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_SUFFIX=
    typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_SUFFIX=
    typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_SUFFIX=

    # The left end of left prompt.
    typeset -g POWERLEVEL9K_LEFT_PROMPT_FIRST_SEGMENT_START_SYMBOL=
    # The right end of right prompt.
    typeset -g POWERLEVEL9K_RIGHT_PROMPT_LAST_SEGMENT_END_SYMBOL=

    # Ruler, a.k.a. the horizontal line before each prompt. If you set it to true, you'll
    # probably want to set POWERLEVEL9K_PROMPT_ADD_NEWLINE=false above and
    # POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR=' ' below.
    typeset -g POWERLEVEL9K_SHOW_RULER=false
    typeset -g POWERLEVEL9K_RULER_CHAR='─'        # reasonable alternative: '·'
    typeset -g POWERLEVEL9K_RULER_FOREGROUND=242

    # Filler between left and right prompt on the first prompt line. You can set it to '·' or '─'
    # to make it easier to see the alignment between left and right prompt and to separate prompt
    # from command output. It serves the same purpose as ruler (see above) without increasing
    # the number of prompt lines. You'll probably want to set POWERLEVEL9K_SHOW_RULER=false
    # if using this. You might also like POWERLEVEL9K_PROMPT_ADD_NEWLINE=false for more compact
    # prompt.
    typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR=' '
    if [[ $POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR != ' ' ]]; then
      # The color of the filler.
      typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_FOREGROUND=242
      # Add a space between the end of left prompt and the filler.
      typeset -g POWERLEVEL9K_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL=' '
      # Add a space between the filler and the start of right prompt.
      typeset -g POWERLEVEL9K_RIGHT_PROMPT_FIRST_SEGMENT_START_SYMBOL=' '
      # Start filler from the edge of the screen if there are no left segments on the first line.
      typeset -g POWERLEVEL9K_EMPTY_LINE_LEFT_PROMPT_FIRST_SEGMENT_END_SYMBOL='%{%}'
      # End filler on the edge of the screen if there are no right segments on the first line.
      typeset -g POWERLEVEL9K_EMPTY_LINE_RIGHT_PROMPT_FIRST_SEGMENT_START_SYMBOL='%{%}'
    fi

    #################################[ os_icon: os identifier ]##################################
    # OS identifier color.
    typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=
    # Make the icon bold.
    typeset -g POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION='${P9K_CONTENT}'

    ################################[ prompt_char: prompt symbol ]################################
    # Green prompt symbol if the last command succeeded.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND=76
    # Red prompt symbol if the last command failed.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND=196
    # Default prompt symbol.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIINS_CONTENT_EXPANSION='❯'
    # Prompt symbol in command vi mode.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VICMD_CONTENT_EXPANSION='❮'
    # Prompt symbol in visual vi mode.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIVIS_CONTENT_EXPANSION='V'
    # Prompt symbol in overwrite vi mode.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIOWR_CONTENT_EXPANSION='▶'
    typeset -g POWERLEVEL9K_PROMPT_CHAR_OVERWRITE_STATE=true
    # No line terminator if prompt_char is the last segment.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL=''
    # No line introducer if prompt_char is the first segment.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_LEFT_PROMPT_FIRST_SEGMENT_START_SYMBOL=

    ##################################[ dir: current directory ]##################################
    # Default current directory color.
    typeset -g POWERLEVEL9K_DIR_FOREGROUND=31
    # If directory is too long, shorten some of its segments to the shortest possible unique
    # prefix. The shortened directory can be tab-completed to the original.
    typeset -g POWERLEVEL9K_SHORTEN_STRATEGY=truncate_to_unique
    # Replace removed segment suffixes with this symbol.
    typeset -g POWERLEVEL9K_SHORTEN_DELIMITER=
    # Color of the shortened directory segments.
    typeset -g POWERLEVEL9K_DIR_SHORTENED_FOREGROUND=103
    # Color of the anchor directory segments. Anchor segments are never shortened. The first
    # segment is always an anchor.
    typeset -g POWERLEVEL9K_DIR_ANCHOR_FOREGROUND=39
    # Display anchor directory segments in bold.
    typeset -g POWERLEVEL9K_DIR_ANCHOR_BOLD=true
    # Don't shorten directories that contain any of these files. They are anchors.
    local anchor_files=(
      .bzr
      .citc
      .git
      .hg
      .node-version
      .python-version
      .go-version
      .ruby-version
      .lua-version
      .java-version
      .perl-version
      .php-version
      .tool-version
      .shorten_folder_marker
      .svn
      .terraform
      CVS
      Cargo.toml
      composer.json
      go.mod
      package.json
      stack.yaml
    )
    typeset -g POWERLEVEL9K_SHORTEN_FOLDER_MARKER="(${(j:|:)anchor_files})"
    # If set to "first" ("last"), remove everything before the first (last) subdirectory that contains
    # files matching $POWERLEVEL9K_SHORTEN_FOLDER_MARKER. For example, when the current directory is
    # /foo/bar/git_repo/nested_git_repo/baz, prompt will display git_repo/nested_git_repo/baz (first)
    # or nested_git_repo/baz (last). This assumes that git_repo and nested_git_repo contain markers
    # and other directories don't.
    #
    # Optionally, "first" and "last" can be followed by ":<offset>" where <offset> is an integer.
    # This moves the truncation point to the right (positive offset) or to the left (negative offset)
    # relative to the marker. Plain "first" and "last" are equivalent to "first:0" and "last:0"
    # respectively.
    typeset -g POWERLEVEL9K_DIR_TRUNCATE_BEFORE_MARKER=false
    # Don't shorten this many last directory segments. They are anchors.
    typeset -g POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
    # Shorten directory if it's longer than this even if there is space for it. The value can
    # be either absolute (e.g., '80') or a percentage of terminal width (e.g, '50%'). If empty,
    # directory will be shortened only when prompt doesn't fit or when other parameters demand it
    # (see POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS and POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT below).
    # If set to `0`, directory will always be shortened to its minimum length.
    typeset -g POWERLEVEL9K_DIR_MAX_LENGTH=80
    # When `dir` segment is on the last prompt line, try to shorten it enough to leave at least this
    # many columns for typing commands.
    typeset -g POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS=40
    # When `dir` segment is on the last prompt line, try to shorten it enough to leave at least
    # COLUMNS * POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT * 0.01 columns for typing commands.
    typeset -g POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT=50
    # If set to true, embed a hyperlink into the directory. Useful for quickly
    # opening a directory in the file manager simply by clicking the link.
    # Can also be handy when the directory is shortened, as it allows you to see
    # the full directory that was used in previous commands.
    typeset -g POWERLEVEL9K_DIR_HYPERLINK=false

    # Enable special styling for non-writable directories. See POWERLEVEL9K_LOCK_ICON and
    # POWERLEVEL9K_DIR_CLASSES below.
    typeset -g POWERLEVEL9K_DIR_SHOW_WRITABLE=v2

    # The default icon shown next to non-writable directories when POWERLEVEL9K_DIR_SHOW_WRITABLE is
    # set to v2.
    # typeset -g POWERLEVEL9K_LOCK_ICON='⭐'

    # POWERLEVEL9K_DIR_CLASSES allows you to specify custom icons and colors for different
    # directories. It must be an array with 3 * N elements. Each triplet consists of:
    #
    #   1. A pattern against which the current directory ($PWD) is matched. Matching is done with
    #      extended_glob option enabled.
    #   2. Directory class for the purpose of styling.
    #   3. An empty string.
    #
    # Triplets are tried in order. The first triplet whose pattern matches $PWD wins.
    #
    # If POWERLEVEL9K_DIR_SHOW_WRITABLE is set to v2 and the current directory is not writable,
    # its class gets suffix _NOT_WRITABLE.
    #
    # For example, given these settings:
    #
    #   typeset -g POWERLEVEL9K_DIR_CLASSES=(
    #     '~/work(|/*)'  WORK     ''
    #     '~(|/*)'       HOME     ''
    #     '*'            DEFAULT  '')
    #
    # Whenever the current directory is ~/work or a subdirectory of ~/work, it gets styled with class
    # WORK or WORK_NOT_WRITABLE.
    #
    # Simply assigning classes to directories doesn't have any visible effects. It merely gives you an
    # option to define custom colors and icons for different directory classes.
    #
    #   # Styling for WORK.
    #   typeset -g POWERLEVEL9K_DIR_WORK_VISUAL_IDENTIFIER_EXPANSION='⭐'
    #   typeset -g POWERLEVEL9K_DIR_WORK_FOREGROUND=31
    #   typeset -g POWERLEVEL9K_DIR_WORK_SHORTENED_FOREGROUND=103
    #   typeset -g POWERLEVEL9K_DIR_WORK_ANCHOR_FOREGROUND=39
    #
    #   # Styling for WORK_NOT_WRITABLE.
    #   typeset -g POWERLEVEL9K_DIR_WORK_NOT_WRITABLE_VISUAL_IDENTIFIER_EXPANSION='⭐'
    #   typeset -g POWERLEVEL9K_DIR_WORK_NOT_WRITABLE_FOREGROUND=31
    #   typeset -g POWERLEVEL9K_DIR_WORK_NOT_WRITABLE_SHORTENED_FOREGROUND=103
    #   typeset -g POWERLEVEL9K_DIR_WORK_NOT_WRITABLE_ANCHOR_FOREGROUND=39
    #
    # If a styling parameter isn't explicitly defined for some class, it falls back to the classless
    # parameter. For example, if POWERLEVEL9K_DIR_WORK_NOT_WRITABLE_FOREGROUND is not set, it falls
    # back to POWERLEVEL9K_DIR_FOREGROUND.
    #
    # typeset -g POWERLEVEL9K_DIR_CLASSES=()

    # Custom prefix.
    # typeset -g POWERLEVEL9K_DIR_PREFIX='%fin '

    #####################################[ vcs: git status ]######################################
    # Branch icon. Set this parameter to '\uF126 ' for the popular Powerline branch icon.
    typeset -g POWERLEVEL9K_VCS_BRANCH_ICON=''

    # Untracked files icon. It's really a question mark, your font isn't broken.
    # Change the value of this parameter to show a different icon.
    typeset -g POWERLEVEL9K_VCS_UNTRACKED_ICON='?'

    # Formatter for Git status.
    #
    # Example output: master ⇣42⇡42 *42 merge ~42 +42 !42 ?42.
    #
    # You can edit the function to customize how Git status looks.
    #
    # VCS_STATUS_* parameters are set by gitstatus plugin. See reference:
    # https://github.com/romkatv/gitstatus/blob/master/gitstatus.plugin.zsh.
    function my_git_formatter() {
      emulate -L zsh

      if [[ -n $P9K_CONTENT ]]; then
        # If P9K_CONTENT is not empty, use it. It's either "loading" or from vcs_info (not from
        # gitstatus plugin). VCS_STATUS_* parameters are not available in this case.
        typeset -g my_git_format=$P9K_CONTENT
        return
      fi

      if (( $1 )); then
        # Styling for up-to-date Git status.
        local       meta='%f'     # default foreground
        local      clean='%76F'   # green foreground
        local   modified='%178F'  # yellow foreground
        local  untracked='%39F'   # blue foreground
        local conflicted='%196F'  # red foreground
      else
        # Styling for incomplete and stale Git status.
        local       meta='%244F'  # grey foreground
        local      clean='%244F'  # grey foreground
        local   modified='%244F'  # grey foreground
        local  untracked='%244F'  # grey foreground
        local conflicted='%244F'  # grey foreground
      fi

      local res
      local where  # branch or tag
      if [[ -n $VCS_STATUS_LOCAL_BRANCH ]]; then
        res+="${clean}${(g::)POWERLEVEL9K_VCS_BRANCH_ICON}"
        where=${(V)VCS_STATUS_LOCAL_BRANCH}
      elif [[ -n $VCS_STATUS_TAG ]]; then
        res+="${meta}#"
        where=${(V)VCS_STATUS_TAG}
      fi

      # If local branch name or tag is at most 32 characters long, show it in full.
      # Otherwise show the first 12 … the last 12.
      # Tip: To always show local branch name in full without truncation, delete the next line.
      (( $#where > 32 )) && where[13,-13]="…"

      res+="${clean}${where//\%/%%}"  # escape %

      # Display the current Git commit if there is no branch or tag.
      # Tip: To always display the current Git commit, remove `[[ -z $where ]] &&` from the next line.
      [[ -z $where ]] && res+="${meta}@${clean}${VCS_STATUS_COMMIT[1,8]}"

      # Show tracking branch name if it differs from local branch.
      if [[ -n ${VCS_STATUS_REMOTE_BRANCH:#$VCS_STATUS_LOCAL_BRANCH} ]]; then
        res+="${meta}:${clean}${(V)VCS_STATUS_REMOTE_BRANCH//\%/%%}"  # escape %
      fi

      # ⇣42 if behind the remote.
      (( VCS_STATUS_COMMITS_BEHIND )) && res+=" ${clean}⇣${VCS_STATUS_COMMITS_BEHIND}"
      # ⇡42 if ahead of the remote; no leading space if also behind the remote: ⇣42⇡42.
      (( VCS_STATUS_COMMITS_AHEAD && !VCS_STATUS_COMMITS_BEHIND )) && res+=" "
      (( VCS_STATUS_COMMITS_AHEAD  )) && res+="${clean}⇡${VCS_STATUS_COMMITS_AHEAD}"
      # ⇠42 if behind the push remote.
      (( VCS_STATUS_PUSH_COMMITS_BEHIND )) && res+=" ${clean}⇠${VCS_STATUS_PUSH_COMMITS_BEHIND}"
      (( VCS_STATUS_PUSH_COMMITS_AHEAD && !VCS_STATUS_PUSH_COMMITS_BEHIND )) && res+=" "
      # ⇢42 if ahead of the push remote; no leading space if also behind: ⇠42⇢42.
      (( VCS_STATUS_PUSH_COMMITS_AHEAD  )) && res+="${clean}⇢${VCS_STATUS_PUSH_COMMITS_AHEAD}"
      # *42 if have stashes.
      (( VCS_STATUS_STASHES        )) && res+=" ${clean}*${VCS_STATUS_STASHES}"
      # 'merge' if the repo is in an unusual state.
      [[ -n $VCS_STATUS_ACTION     ]] && res+=" ${conflicted}${VCS_STATUS_ACTION}"
      # ~42 if have merge conflicts.
      (( VCS_STATUS_NUM_CONFLICTED )) && res+=" ${conflicted}~${VCS_STATUS_NUM_CONFLICTED}"
      # +42 if have staged changes.
      (( VCS_STATUS_NUM_STAGED     )) && res+=" ${modified}+${VCS_STATUS_NUM_STAGED}"
      # !42 if have unstaged changes.
      (( VCS_STATUS_NUM_UNSTAGED   )) && res+=" ${modified}!${VCS_STATUS_NUM_UNSTAGED}"
      # ?42 if have untracked files. It's really a question mark, your font isn't broken.
      # See POWERLEVEL9K_VCS_UNTRACKED_ICON above if you want to use a different icon.
      # Remove the next line if you don't want to see untracked files at all.
      (( VCS_STATUS_NUM_UNTRACKED  )) && res+=" ${untracked}${(g::)POWERLEVEL9K_VCS_UNTRACKED_ICON}${VCS_STATUS_NUM_UNTRACKED}"
      # "─" if the number of unstaged files is unknown. This can happen due to
      # POWERLEVEL9K_VCS_MAX_INDEX_SIZE_DIRTY (see below) being set to a non-negative number lower
      # than the number of files in the Git index, or due to bash.showDirtyState being set to false
      # in the repository config. The number of staged and untracked files may also be unknown
      # in this case.
      (( VCS_STATUS_HAS_UNSTAGED == -1 )) && res+=" ${modified}─"

      typeset -g my_git_format=$res
    }
    functions -M my_git_formatter 2>/dev/null

    # Don't count the number of unstaged, untracked and conflicted files in Git repositories with
    # more than this many files in the index. Negative value means infinity.
    #
    # If you are working in Git repositories with tens of millions of files and seeing performance
    # sagging, try setting POWERLEVEL9K_VCS_MAX_INDEX_SIZE_DIRTY to a number lower than the output
    # of `git ls-files | wc -l`. Alternatively, add `bash.showDirtyState = false` to the repository's
    # config: `git config bash.showDirtyState false`.
    typeset -g POWERLEVEL9K_VCS_MAX_INDEX_SIZE_DIRTY=-1

    # Don't show Git status in prompt for repositories whose workdir matches this pattern.
    # For example, if set to '~', the Git repository at $HOME/.git will be ignored.
    # Multiple patterns can be combined with '|': '~(|/foo)|/bar/baz/*'.
    typeset -g POWERLEVEL9K_VCS_DISABLED_WORKDIR_PATTERN='~'

    # Disable the default Git status formatting.
    typeset -g POWERLEVEL9K_VCS_DISABLE_GITSTATUS_FORMATTING=true
    # Install our own Git status formatter.
    typeset -g POWERLEVEL9K_VCS_CONTENT_EXPANSION='${$((my_git_formatter(1)))+${my_git_format}}'
    typeset -g POWERLEVEL9K_VCS_LOADING_CONTENT_EXPANSION='${$((my_git_formatter(0)))+${my_git_format}}'
    # Enable counters for staged, unstaged, etc.
    typeset -g POWERLEVEL9K_VCS_{STAGED,UNSTAGED,UNTRACKED,CONFLICTED,COMMITS_AHEAD,COMMITS_BEHIND}_MAX_NUM=-1

    # Icon color.
    typeset -g POWERLEVEL9K_VCS_VISUAL_IDENTIFIER_COLOR=76
    typeset -g POWERLEVEL9K_VCS_LOADING_VISUAL_IDENTIFIER_COLOR=244
    # Custom icon.
    # typeset -g POWERLEVEL9K_VCS_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # Custom prefix.
    # typeset -g POWERLEVEL9K_VCS_PREFIX='%fon '

    # Show status of repositories of these types. You can add svn and/or hg if you are
    # using them. If you do, your prompt may become slow even when your current directory
    # isn't in an svn or hg reposotiry.
    typeset -g POWERLEVEL9K_VCS_BACKENDS=(git)

    # These settings are used for repositories other than Git or when gitstatusd fails and
    # Powerlevel10k has to fall back to using vcs_info.
    typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND=76
    typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=76
    typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=178

    ##########################[ status: exit code of the last command ]###########################
    # Enable OK_PIPE, ERROR_PIPE and ERROR_SIGNAL status states to allow us to enable, disable and
    # style them independently from the regular OK and ERROR state.
    typeset -g POWERLEVEL9K_STATUS_EXTENDED_STATES=true

    # Status on success. No content, just an icon. No need to show it if prompt_char is enabled as
    # it will signify success by turning green.
    typeset -g POWERLEVEL9K_STATUS_OK=false
    typeset -g POWERLEVEL9K_STATUS_OK_FOREGROUND=70
    typeset -g POWERLEVEL9K_STATUS_OK_VISUAL_IDENTIFIER_EXPANSION='✔'

    # Status when some part of a pipe command fails but the overall exit status is zero. It may look
    # like this: 1|0.
    typeset -g POWERLEVEL9K_STATUS_OK_PIPE=true
    typeset -g POWERLEVEL9K_STATUS_OK_PIPE_FOREGROUND=70
    typeset -g POWERLEVEL9K_STATUS_OK_PIPE_VISUAL_IDENTIFIER_EXPANSION='✔'

    # Status when it's just an error code (e.g., '1'). No need to show it if prompt_char is enabled as
    # it will signify error by turning red.
    typeset -g POWERLEVEL9K_STATUS_ERROR=false
    typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND=160
    typeset -g POWERLEVEL9K_STATUS_ERROR_VISUAL_IDENTIFIER_EXPANSION='✘'

    # Status when the last command was terminated by a signal.
    typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL=true
    typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_FOREGROUND=160
    # Use terse signal names: "INT" instead of "SIGINT(2)".
    typeset -g POWERLEVEL9K_STATUS_VERBOSE_SIGNAME=false
    typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_VISUAL_IDENTIFIER_EXPANSION='✘'

    # Status when some part of a pipe command fails and the overall exit status is also non-zero.
    # It may look like this: 1|0.
    typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE=true
    typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_FOREGROUND=160
    typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_VISUAL_IDENTIFIER_EXPANSION='✘'

    ###################[ command_execution_time: duration of the last command ]###################
    # Show duration of the last command if takes at least this many seconds.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=3
    # Show this many fractional digits. Zero means round to seconds.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION=0
    # Execution time color.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND=101
    # Duration format: 1d 2h 3m 4s.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FORMAT='d h m s'
    # Custom icon.
    # typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # Custom prefix.
    # typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PREFIX='%ftook '

    #######################[ background_jobs: presence of background jobs ]#######################
    # Don't show the number of background jobs.
    typeset -g POWERLEVEL9K_BACKGROUND_JOBS_VERBOSE=false
    # Background jobs color.
    typeset -g POWERLEVEL9K_BACKGROUND_JOBS_FOREGROUND=70
    # Custom icon.
    # typeset -g POWERLEVEL9K_BACKGROUND_JOBS_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #######################[ direnv: direnv status (https://direnv.net/) ]########################
    # Direnv color.
    typeset -g POWERLEVEL9K_DIRENV_FOREGROUND=178
    # Custom icon.
    # typeset -g POWERLEVEL9K_DIRENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###############[ asdf: asdf version manager (https://github.com/asdf-vm/asdf) ]###############
    # Default asdf color. Only used to display tools for which there is no color override (see below).
    # Tip:  Override this parameter for ${TOOL} with POWERLEVEL9K_ASDF_${TOOL}_FOREGROUND.
    typeset -g POWERLEVEL9K_ASDF_FOREGROUND=66

    # There are four parameters that can be used to hide asdf tools. Each parameter describes
    # conditions under which a tool gets hidden. Parameters can hide tools but not unhide them. If at
    # least one parameter decides to hide a tool, that tool gets hidden. If no parameter decides to
    # hide a tool, it gets shown.
    #
    # Special note on the difference between POWERLEVEL9K_ASDF_SOURCES and
    # POWERLEVEL9K_ASDF_PROMPT_ALWAYS_SHOW. Consider the effect of the following commands:
    #
    #   asdf local  python 3.8.1
    #   asdf global python 3.8.1
    #
    # After running both commands the current python version is 3.8.1 and its source is "local" as
    # it takes precedence over "global". If POWERLEVEL9K_ASDF_PROMPT_ALWAYS_SHOW is set to false,
    # it'll hide python version in this case because 3.8.1 is the same as the global version.
    # POWERLEVEL9K_ASDF_SOURCES will hide python version only if the value of this parameter doesn't
    # contain "local".

    # Hide tool versions that don't come from one of these sources.
    #
    # Available sources:
    #
    # - shell   `asdf current` says "set by ASDF_${TOOL}_VERSION environment variable"
    # - local   `asdf current` says "set by /some/not/home/directory/file"
    # - global  `asdf current` says "set by /home/username/file"
    #
    # Note: If this parameter is set to (shell local global), it won't hide tools.
    # Tip:  Override this parameter for ${TOOL} with POWERLEVEL9K_ASDF_${TOOL}_SOURCES.
    typeset -g POWERLEVEL9K_ASDF_SOURCES=(shell local global)

    # If set to false, hide tool versions that are the same as global.
    #
    # Note: The name of this parameter doesn't reflect its meaning at all.
    # Note: If this parameter is set to true, it won't hide tools.
    # Tip:  Override this parameter for ${TOOL} with POWERLEVEL9K_ASDF_${TOOL}_PROMPT_ALWAYS_SHOW.
    typeset -g POWERLEVEL9K_ASDF_PROMPT_ALWAYS_SHOW=false

    # If set to false, hide tool versions that are equal to "system".
    #
    # Note: If this parameter is set to true, it won't hide tools.
    # Tip: Override this parameter for ${TOOL} with POWERLEVEL9K_ASDF_${TOOL}_SHOW_SYSTEM.
    typeset -g POWERLEVEL9K_ASDF_SHOW_SYSTEM=true

    # If set to non-empty value, hide tools unless there is a file matching the specified file pattern
    # in the current directory, or its parent directory, or its grandparent directory, and so on.
    #
    # Note: If this parameter is set to empty value, it won't hide tools.
    # Note: SHOW_ON_UPGLOB isn't specific to asdf. It works with all prompt segments.
    # Tip: Override this parameter for ${TOOL} with POWERLEVEL9K_ASDF_${TOOL}_SHOW_ON_UPGLOB.
    #
    # Example: Hide nodejs version when there is no package.json and no *.js files in the current
    # directory, in `..`, in `../..` and so on.
    #
    #   typeset -g POWERLEVEL9K_ASDF_NODEJS_SHOW_ON_UPGLOB='*.js|package.json'
    typeset -g POWERLEVEL9K_ASDF_SHOW_ON_UPGLOB=

    # Ruby version from asdf.
    typeset -g POWERLEVEL9K_ASDF_RUBY_FOREGROUND=168
    # typeset -g POWERLEVEL9K_ASDF_RUBY_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_RUBY_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Python version from asdf.
    typeset -g POWERLEVEL9K_ASDF_PYTHON_FOREGROUND=37
    # typeset -g POWERLEVEL9K_ASDF_PYTHON_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_PYTHON_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Go version from asdf.
    typeset -g POWERLEVEL9K_ASDF_GOLANG_FOREGROUND=37
    # typeset -g POWERLEVEL9K_ASDF_GOLANG_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_GOLANG_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Node.js version from asdf.
    typeset -g POWERLEVEL9K_ASDF_NODEJS_FOREGROUND=70
    # typeset -g POWERLEVEL9K_ASDF_NODEJS_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_NODEJS_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Rust version from asdf.
    typeset -g POWERLEVEL9K_ASDF_RUST_FOREGROUND=37
    # typeset -g POWERLEVEL9K_ASDF_RUST_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_RUST_SHOW_ON_UPGLOB='*.foo|*.bar'

    # .NET Core version from asdf.
    typeset -g POWERLEVEL9K_ASDF_DOTNET_CORE_FOREGROUND=134
    # typeset -g POWERLEVEL9K_ASDF_DOTNET_CORE_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_DOTNET_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Flutter version from asdf.
    typeset -g POWERLEVEL9K_ASDF_FLUTTER_FOREGROUND=38
    # typeset -g POWERLEVEL9K_ASDF_FLUTTER_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_FLUTTER_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Lua version from asdf.
    typeset -g POWERLEVEL9K_ASDF_LUA_FOREGROUND=32
    # typeset -g POWERLEVEL9K_ASDF_LUA_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_LUA_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Java version from asdf.
    typeset -g POWERLEVEL9K_ASDF_JAVA_FOREGROUND=32
    # typeset -g POWERLEVEL9K_ASDF_JAVA_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_JAVA_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Perl version from asdf.
    typeset -g POWERLEVEL9K_ASDF_PERL_FOREGROUND=67
    # typeset -g POWERLEVEL9K_ASDF_PERL_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_PERL_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Erlang version from asdf.
    typeset -g POWERLEVEL9K_ASDF_ERLANG_FOREGROUND=125
    # typeset -g POWERLEVEL9K_ASDF_ERLANG_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_ERLANG_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Elixir version from asdf.
    typeset -g POWERLEVEL9K_ASDF_ELIXIR_FOREGROUND=129
    # typeset -g POWERLEVEL9K_ASDF_ELIXIR_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_ELIXIR_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Postgres version from asdf.
    typeset -g POWERLEVEL9K_ASDF_POSTGRES_FOREGROUND=31
    # typeset -g POWERLEVEL9K_ASDF_POSTGRES_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_POSTGRES_SHOW_ON_UPGLOB='*.foo|*.bar'

    # PHP version from asdf.
    typeset -g POWERLEVEL9K_ASDF_PHP_FOREGROUND=99
    # typeset -g POWERLEVEL9K_ASDF_PHP_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_PHP_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Haskell version from asdf.
    typeset -g POWERLEVEL9K_ASDF_HASKELL_FOREGROUND=172
    # typeset -g POWERLEVEL9K_ASDF_HASKELL_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_HASKELL_SHOW_ON_UPGLOB='*.foo|*.bar'

    # Julia version from asdf.
    typeset -g POWERLEVEL9K_ASDF_JULIA_FOREGROUND=70
    # typeset -g POWERLEVEL9K_ASDF_JULIA_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # typeset -g POWERLEVEL9K_ASDF_JULIA_SHOW_ON_UPGLOB='*.foo|*.bar'

    ##########[ nordvpn: nordvpn connection status, linux only (https://nordvpn.com/) ]###########
    # NordVPN connection indicator color.
    typeset -g POWERLEVEL9K_NORDVPN_FOREGROUND=39
    # Hide NordVPN connection indicator when not connected.
    typeset -g POWERLEVEL9K_NORDVPN_{DISCONNECTED,CONNECTING,DISCONNECTING}_CONTENT_EXPANSION=
    typeset -g POWERLEVEL9K_NORDVPN_{DISCONNECTED,CONNECTING,DISCONNECTING}_VISUAL_IDENTIFIER_EXPANSION=
    # Custom icon.
    # typeset -g POWERLEVEL9K_NORDVPN_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #################[ ranger: ranger shell (https://github.com/ranger/ranger) ]##################
    # Ranger shell color.
    typeset -g POWERLEVEL9K_RANGER_FOREGROUND=178
    # Custom icon.
    # typeset -g POWERLEVEL9K_RANGER_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ######################[ nnn: nnn shell (https://github.com/jarun/nnn) ]#######################
    # Nnn shell color.
    typeset -g POWERLEVEL9K_NNN_FOREGROUND=72
    # Custom icon.
    # typeset -g POWERLEVEL9K_NNN_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###########################[ vim_shell: vim shell indicator (:sh) ]###########################
    # Vim shell indicator color.
    typeset -g POWERLEVEL9K_VIM_SHELL_FOREGROUND=34
    # Custom icon.
    # typeset -g POWERLEVEL9K_VIM_SHELL_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ######[ midnight_commander: midnight commander shell (https://midnight-commander.org/) ]######
    # Midnight Commander shell color.
    typeset -g POWERLEVEL9K_MIDNIGHT_COMMANDER_FOREGROUND=178
    # Custom icon.
    # typeset -g POWERLEVEL9K_MIDNIGHT_COMMANDER_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #[ nix_shell: nix shell (https://nixos.org/nixos/nix-pills/developing-with-nix-shell.html) ]##
    # Nix shell color.
    typeset -g POWERLEVEL9K_NIX_SHELL_FOREGROUND=74

    # Tip: If you want to see just the icon without "pure" and "impure", uncomment the next line.
    # typeset -g POWERLEVEL9K_NIX_SHELL_CONTENT_EXPANSION=

    # Custom icon.
    # typeset -g POWERLEVEL9K_NIX_SHELL_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##################################[ disk_usage: disk usage ]##################################
    # Colors for different levels of disk usage.
    typeset -g POWERLEVEL9K_DISK_USAGE_NORMAL_FOREGROUND=35
    typeset -g POWERLEVEL9K_DISK_USAGE_WARNING_FOREGROUND=220
    typeset -g POWERLEVEL9K_DISK_USAGE_CRITICAL_FOREGROUND=160
    # Thresholds for different levels of disk usage (percentage points).
    typeset -g POWERLEVEL9K_DISK_USAGE_WARNING_LEVEL=90
    typeset -g POWERLEVEL9K_DISK_USAGE_CRITICAL_LEVEL=95
    # If set to true, hide disk usage when below $POWERLEVEL9K_DISK_USAGE_WARNING_LEVEL percent.
    typeset -g POWERLEVEL9K_DISK_USAGE_ONLY_WARNING=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_DISK_USAGE_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ######################################[ ram: free RAM ]#######################################
    # RAM color.
    typeset -g POWERLEVEL9K_RAM_FOREGROUND=66
    # Custom icon.
    # typeset -g POWERLEVEL9K_RAM_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #####################################[ swap: used swap ]######################################
    # Swap color.
    typeset -g POWERLEVEL9K_SWAP_FOREGROUND=96
    # Custom icon.
    # typeset -g POWERLEVEL9K_SWAP_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ######################################[ load: CPU load ]######################################
    # Show average CPU load over this many last minutes. Valid values are 1, 5 and 15.
    typeset -g POWERLEVEL9K_LOAD_WHICH=5
    # Load color when load is under 50%.
    typeset -g POWERLEVEL9K_LOAD_NORMAL_FOREGROUND=66
    # Load color when load is between 50% and 70%.
    typeset -g POWERLEVEL9K_LOAD_WARNING_FOREGROUND=178
    # Load color when load is over 70%.
    typeset -g POWERLEVEL9K_LOAD_CRITICAL_FOREGROUND=166
    # Custom icon.
    # typeset -g POWERLEVEL9K_LOAD_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ################[ todo: todo items (https://github.com/todotxt/todo.txt-cli) ]################
    # Todo color.
    typeset -g POWERLEVEL9K_TODO_FOREGROUND=110
    # Hide todo when the total number of tasks is zero.
    typeset -g POWERLEVEL9K_TODO_HIDE_ZERO_TOTAL=true
    # Hide todo when the number of tasks after filtering is zero.
    typeset -g POWERLEVEL9K_TODO_HIDE_ZERO_FILTERED=false

    # Todo format. The following parameters are available within the expansion.
    #
    # - P9K_TODO_TOTAL_TASK_COUNT     The total number of tasks.
    # - P9K_TODO_FILTERED_TASK_COUNT  The number of tasks after filtering.
    #
    # These variables correspond to the last line of the output of `todo.sh -p ls`:
    #
    #   TODO: 24 of 42 tasks shown
    #
    # Here 24 is P9K_TODO_FILTERED_TASK_COUNT and 42 is P9K_TODO_TOTAL_TASK_COUNT.
    #
    # typeset -g POWERLEVEL9K_TODO_CONTENT_EXPANSION='$P9K_TODO_FILTERED_TASK_COUNT'

    # Custom icon.
    # typeset -g POWERLEVEL9K_TODO_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###########[ timewarrior: timewarrior tracking status (https://timewarrior.net/) ]############
    # Timewarrior color.
    typeset -g POWERLEVEL9K_TIMEWARRIOR_FOREGROUND=110
    # If the tracked task is longer than 24 characters, truncate and append "…".
    # Tip: To always display tasks without truncation, delete the following parameter.
    # Tip: To hide task names and display just the icon when time tracking is enabled, set the
    # value of the following parameter to "".
    typeset -g POWERLEVEL9K_TIMEWARRIOR_CONTENT_EXPANSION='${P9K_CONTENT:0:24}${${P9K_CONTENT:24}:+…}'

    # Custom icon.
    # typeset -g POWERLEVEL9K_TIMEWARRIOR_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##############[ taskwarrior: taskwarrior task count (https://taskwarrior.org/) ]##############
    # Taskwarrior color.
    typeset -g POWERLEVEL9K_TASKWARRIOR_FOREGROUND=74

    # Taskwarrior segment format. The following parameters are available within the expansion.
    #
    # - P9K_TASKWARRIOR_PENDING_COUNT   The number of pending tasks: `task +PENDING count`.
    # - P9K_TASKWARRIOR_OVERDUE_COUNT   The number of overdue tasks: `task +OVERDUE count`.
    #
    # Zero values are represented as empty parameters.
    #
    # The default format:
    #
    #   '${P9K_TASKWARRIOR_OVERDUE_COUNT:+"!$P9K_TASKWARRIOR_OVERDUE_COUNT/"}$P9K_TASKWARRIOR_PENDING_COUNT'
    #
    # typeset -g POWERLEVEL9K_TASKWARRIOR_CONTENT_EXPANSION='$P9K_TASKWARRIOR_PENDING_COUNT'

    # Custom icon.
    # typeset -g POWERLEVEL9K_TASKWARRIOR_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##################################[ context: user@hostname ]##################################
    # Context color when running with privileges.
    typeset -g POWERLEVEL9K_CONTEXT_ROOT_FOREGROUND=178
    # Context color in SSH without privileges.
    typeset -g POWERLEVEL9K_CONTEXT_{REMOTE,REMOTE_SUDO}_FOREGROUND=180
    # Default context color (no privileges, no SSH).
    typeset -g POWERLEVEL9K_CONTEXT_FOREGROUND=180

    # Context format when running with privileges: bold user@hostname.
    typeset -g POWERLEVEL9K_CONTEXT_ROOT_TEMPLATE='%B%n@%m'
    # Context format when in SSH without privileges: user@hostname.
    typeset -g POWERLEVEL9K_CONTEXT_{REMOTE,REMOTE_SUDO}_TEMPLATE='%n@%m'
    # Default context format (no privileges, no SSH): user@hostname.
    typeset -g POWERLEVEL9K_CONTEXT_TEMPLATE='%n@%m'

    # Don't show context unless running with privileges or in SSH.
    # Tip: Remove the next line to always show context.
    typeset -g POWERLEVEL9K_CONTEXT_{DEFAULT,SUDO}_{CONTENT,VISUAL_IDENTIFIER}_EXPANSION=

    # Custom icon.
    # typeset -g POWERLEVEL9K_CONTEXT_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # Custom prefix.
    # typeset -g POWERLEVEL9K_CONTEXT_PREFIX='%fwith '

    ###[ virtualenv: python virtual environment (https://docs.python.org/3/library/venv.html) ]###
    # Python virtual environment color.
    typeset -g POWERLEVEL9K_VIRTUALENV_FOREGROUND=37
    # Don't show Python version next to the virtual environment name.
    typeset -g POWERLEVEL9K_VIRTUALENV_SHOW_PYTHON_VERSION=false
    # If set to "false", won't show virtualenv if pyenv is already shown.
    # If set to "if-different", won't show virtualenv if it's the same as pyenv.
    typeset -g POWERLEVEL9K_VIRTUALENV_SHOW_WITH_PYENV=false
    # Separate environment name from Python version only with a space.
    typeset -g POWERLEVEL9K_VIRTUALENV_{LEFT,RIGHT}_DELIMITER=
    # Custom icon.
    # typeset -g POWERLEVEL9K_VIRTUALENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #####################[ anaconda: conda environment (https://conda.io/) ]######################
    # Anaconda environment color.
    typeset -g POWERLEVEL9K_ANACONDA_FOREGROUND=37

    # Anaconda segment format. The following parameters are available within the expansion.
    #
    # - CONDA_PREFIX                 Absolute path to the active Anaconda/Miniconda environment.
    # - CONDA_DEFAULT_ENV            Name of the active Anaconda/Miniconda environment.
    # - CONDA_PROMPT_MODIFIER        Configurable prompt modifier (see below).
    # - P9K_ANACONDA_PYTHON_VERSION  Current python version (python --version).
    #
    # CONDA_PROMPT_MODIFIER can be configured with the following command:
    #
    #   conda config --set env_prompt '({default_env}) '
    #
    # The last argument is a Python format string that can use the following variables:
    #
    # - prefix       The same as CONDA_PREFIX.
    # - default_env  The same as CONDA_DEFAULT_ENV.
    # - name         The last segment of CONDA_PREFIX.
    # - stacked_env  Comma-separated list of names in the environment stack. The first element is
    #                always the same as default_env.
    #
    # Note: '({default_env}) ' is the default value of env_prompt.
    #
    # The default value of POWERLEVEL9K_ANACONDA_CONTENT_EXPANSION expands to $CONDA_PROMPT_MODIFIER
    # without the surrounding parentheses, or to the last path component of CONDA_PREFIX if the former
    # is empty.
    typeset -g POWERLEVEL9K_ANACONDA_CONTENT_EXPANSION='${${${${CONDA_PROMPT_MODIFIER#\(}% }%\)}:-${CONDA_PREFIX:t}}'

    # Custom icon.
    # typeset -g POWERLEVEL9K_ANACONDA_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ################[ pyenv: python environment (https://github.com/pyenv/pyenv) ]################
    # Pyenv color.
    typeset -g POWERLEVEL9K_PYENV_FOREGROUND=37
    # Hide python version if it doesn't come from one of these sources.
    typeset -g POWERLEVEL9K_PYENV_SOURCES=(shell local global)
    # If set to false, hide python version if it's the same as global:
    # $(pyenv version-name) == $(pyenv global).
    typeset -g POWERLEVEL9K_PYENV_PROMPT_ALWAYS_SHOW=false
    # If set to false, hide python version if it's equal to "system".
    typeset -g POWERLEVEL9K_PYENV_SHOW_SYSTEM=true

    # Pyenv segment format. The following parameters are available within the expansion.
    #
    # - P9K_CONTENT                Current pyenv environment (pyenv version-name).
    # - P9K_PYENV_PYTHON_VERSION   Current python version (python --version).
    #
    # The default format has the following logic:
    #
    # 1. Display "$P9K_CONTENT $P9K_PYENV_PYTHON_VERSION" if $P9K_PYENV_PYTHON_VERSION is not
    #   empty and unequal to $P9K_CONTENT.
    # 2. Otherwise display just "$P9K_CONTENT".
    typeset -g POWERLEVEL9K_PYENV_CONTENT_EXPANSION='${P9K_CONTENT}${${P9K_PYENV_PYTHON_VERSION:#$P9K_CONTENT}:+ $P9K_PYENV_PYTHON_VERSION}'

    # Custom icon.
    # typeset -g POWERLEVEL9K_PYENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ################[ goenv: go environment (https://github.com/syndbg/goenv) ]################
    # Goenv color.
    typeset -g POWERLEVEL9K_GOENV_FOREGROUND=37
    # Hide go version if it doesn't come from one of these sources.
    typeset -g POWERLEVEL9K_GOENV_SOURCES=(shell local global)
    # If set to false, hide go version if it's the same as global:
    # $(goenv version-name) == $(goenv global).
    typeset -g POWERLEVEL9K_GOENV_PROMPT_ALWAYS_SHOW=false
    # If set to false, hide go version if it's equal to "system".
    typeset -g POWERLEVEL9K_GOENV_SHOW_SYSTEM=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_GOENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##########[ nodenv: node.js version from nodenv (https://github.com/nodenv/nodenv) ]##########
    # Nodenv color.
    typeset -g POWERLEVEL9K_NODENV_FOREGROUND=70
    # Hide node version if it doesn't come from one of these sources.
    typeset -g POWERLEVEL9K_NODENV_SOURCES=(shell local global)
    # If set to false, hide node version if it's the same as global:
    # $(nodenv version-name) == $(nodenv global).
    typeset -g POWERLEVEL9K_NODENV_PROMPT_ALWAYS_SHOW=false
    # If set to false, hide node version if it's equal to "system".
    typeset -g POWERLEVEL9K_NODENV_SHOW_SYSTEM=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_NODENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##############[ nvm: node.js version from nvm (https://github.com/nvm-sh/nvm) ]###############
    # Nvm color.
    typeset -g POWERLEVEL9K_NVM_FOREGROUND=70
    # Custom icon.
    # typeset -g POWERLEVEL9K_NVM_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ############[ nodeenv: node.js environment (https://github.com/ekalinin/nodeenv) ]############
    # Nodeenv color.
    typeset -g POWERLEVEL9K_NODEENV_FOREGROUND=70
    # Don't show Node version next to the environment name.
    typeset -g POWERLEVEL9K_NODEENV_SHOW_NODE_VERSION=false
    # Separate environment name from Node version only with a space.
    typeset -g POWERLEVEL9K_NODEENV_{LEFT,RIGHT}_DELIMITER=
    # Custom icon.
    # typeset -g POWERLEVEL9K_NODEENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##############################[ node_version: node.js version ]###############################
    # Node version color.
    typeset -g POWERLEVEL9K_NODE_VERSION_FOREGROUND=70
    # Show node version only when in a directory tree containing package.json.
    typeset -g POWERLEVEL9K_NODE_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_NODE_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #######################[ go_version: go version (https://golang.org) ]########################
    # Go version color.
    typeset -g POWERLEVEL9K_GO_VERSION_FOREGROUND=37
    # Show go version only when in a go project subdirectory.
    typeset -g POWERLEVEL9K_GO_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_GO_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #################[ rust_version: rustc version (https://www.rust-lang.org) ]##################
    # Rust version color.
    typeset -g POWERLEVEL9K_RUST_VERSION_FOREGROUND=37
    # Show rust version only when in a rust project subdirectory.
    typeset -g POWERLEVEL9K_RUST_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_RUST_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###############[ dotnet_version: .NET version (https://dotnet.microsoft.com) ]################
    # .NET version color.
    typeset -g POWERLEVEL9K_DOTNET_VERSION_FOREGROUND=134
    # Show .NET version only when in a .NET project subdirectory.
    typeset -g POWERLEVEL9K_DOTNET_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_DOTNET_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #####################[ php_version: php version (https://www.php.net/) ]######################
    # PHP version color.
    typeset -g POWERLEVEL9K_PHP_VERSION_FOREGROUND=99
    # Show PHP version only when in a PHP project subdirectory.
    typeset -g POWERLEVEL9K_PHP_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_PHP_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##########[ laravel_version: laravel php framework version (https://laravel.com/) ]###########
    # Laravel version color.
    typeset -g POWERLEVEL9K_LARAVEL_VERSION_FOREGROUND=161
    # Custom icon.
    # typeset -g POWERLEVEL9K_LARAVEL_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ####################[ java_version: java version (https://www.java.com/) ]####################
    # Java version color.
    typeset -g POWERLEVEL9K_JAVA_VERSION_FOREGROUND=32
    # Show java version only when in a java project subdirectory.
    typeset -g POWERLEVEL9K_JAVA_VERSION_PROJECT_ONLY=true
    # Show brief version.
    typeset -g POWERLEVEL9K_JAVA_VERSION_FULL=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_JAVA_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###[ package: name@version from package.json (https://docs.npmjs.com/files/package.json) ]####
    # Package color.
    typeset -g POWERLEVEL9K_PACKAGE_FOREGROUND=117
    # Package format. The following parameters are available within the expansion.
    #
    # - P9K_PACKAGE_NAME     The value of `name` field in package.json.
    # - P9K_PACKAGE_VERSION  The value of `version` field in package.json.
    #
    # typeset -g POWERLEVEL9K_PACKAGE_CONTENT_EXPANSION='${P9K_PACKAGE_NAME//\%/%%}@${P9K_PACKAGE_VERSION//\%/%%}'
    # Custom icon.
    # typeset -g POWERLEVEL9K_PACKAGE_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #############[ rbenv: ruby version from rbenv (https://github.com/rbenv/rbenv) ]##############
    # Rbenv color.
    typeset -g POWERLEVEL9K_RBENV_FOREGROUND=168
    # Hide ruby version if it doesn't come from one of these sources.
    typeset -g POWERLEVEL9K_RBENV_SOURCES=(shell local global)
    # If set to false, hide ruby version if it's the same as global:
    # $(rbenv version-name) == $(rbenv global).
    typeset -g POWERLEVEL9K_RBENV_PROMPT_ALWAYS_SHOW=false
    # If set to false, hide ruby version if it's equal to "system".
    typeset -g POWERLEVEL9K_RBENV_SHOW_SYSTEM=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_RBENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #######################[ rvm: ruby version from rvm (https://rvm.io) ]########################
    # Rvm color.
    typeset -g POWERLEVEL9K_RVM_FOREGROUND=168
    # Don't show @gemset at the end.
    typeset -g POWERLEVEL9K_RVM_SHOW_GEMSET=false
    # Don't show ruby- at the front.
    typeset -g POWERLEVEL9K_RVM_SHOW_PREFIX=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_RVM_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###########[ fvm: flutter version management (https://github.com/leoafarias/fvm) ]############
    # Fvm color.
    typeset -g POWERLEVEL9K_FVM_FOREGROUND=38
    # Custom icon.
    # typeset -g POWERLEVEL9K_FVM_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##########[ luaenv: lua version from luaenv (https://github.com/cehoffman/luaenv) ]###########
    # Lua color.
    typeset -g POWERLEVEL9K_LUAENV_FOREGROUND=32
    # Hide lua version if it doesn't come from one of these sources.
    typeset -g POWERLEVEL9K_LUAENV_SOURCES=(shell local global)
    # If set to false, hide lua version if it's the same as global:
    # $(luaenv version-name) == $(luaenv global).
    typeset -g POWERLEVEL9K_LUAENV_PROMPT_ALWAYS_SHOW=false
    # If set to false, hide lua version if it's equal to "system".
    typeset -g POWERLEVEL9K_LUAENV_SHOW_SYSTEM=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_LUAENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###############[ jenv: java version from jenv (https://github.com/jenv/jenv) ]################
    # Java color.
    typeset -g POWERLEVEL9K_JENV_FOREGROUND=32
    # Hide java version if it doesn't come from one of these sources.
    typeset -g POWERLEVEL9K_JENV_SOURCES=(shell local global)
    # If set to false, hide java version if it's the same as global:
    # $(jenv version-name) == $(jenv global).
    typeset -g POWERLEVEL9K_JENV_PROMPT_ALWAYS_SHOW=false
    # If set to false, hide java version if it's equal to "system".
    typeset -g POWERLEVEL9K_JENV_SHOW_SYSTEM=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_JENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###########[ plenv: perl version from plenv (https://github.com/tokuhirom/plenv) ]############
    # Perl color.
    typeset -g POWERLEVEL9K_PLENV_FOREGROUND=67
    # Hide perl version if it doesn't come from one of these sources.
    typeset -g POWERLEVEL9K_PLENV_SOURCES=(shell local global)
    # If set to false, hide perl version if it's the same as global:
    # $(plenv version-name) == $(plenv global).
    typeset -g POWERLEVEL9K_PLENV_PROMPT_ALWAYS_SHOW=false
    # If set to false, hide perl version if it's equal to "system".
    typeset -g POWERLEVEL9K_PLENV_SHOW_SYSTEM=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_PLENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ############[ phpenv: php version from phpenv (https://github.com/phpenv/phpenv) ]############
    # PHP color.
    typeset -g POWERLEVEL9K_PHPENV_FOREGROUND=99
    # Hide php version if it doesn't come from one of these sources.
    typeset -g POWERLEVEL9K_PHPENV_SOURCES=(shell local global)
    # If set to false, hide php version if it's the same as global:
    # $(phpenv version-name) == $(phpenv global).
    typeset -g POWERLEVEL9K_PHPENV_PROMPT_ALWAYS_SHOW=false
    # If set to false, hide php version if it's equal to "system".
    typeset -g POWERLEVEL9K_PHPENV_SHOW_SYSTEM=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_PHPENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #######[ scalaenv: scala version from scalaenv (https://github.com/scalaenv/scalaenv) ]#######
    # Scala color.
    typeset -g POWERLEVEL9K_SCALAENV_FOREGROUND=160
    # Hide scala version if it doesn't come from one of these sources.
    typeset -g POWERLEVEL9K_SCALAENV_SOURCES=(shell local global)
    # If set to false, hide scala version if it's the same as global:
    # $(scalaenv version-name) == $(scalaenv global).
    typeset -g POWERLEVEL9K_SCALAENV_PROMPT_ALWAYS_SHOW=false
    # If set to false, hide scala version if it's equal to "system".
    typeset -g POWERLEVEL9K_SCALAENV_SHOW_SYSTEM=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_SCALAENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##########[ haskell_stack: haskell version from stack (https://haskellstack.org/) ]###########
    # Haskell color.
    typeset -g POWERLEVEL9K_HASKELL_STACK_FOREGROUND=172
    # Hide haskell version if it doesn't come from one of these sources.
    #
    #   shell:  version is set by STACK_YAML
    #   local:  version is set by stack.yaml up the directory tree
    #   global: version is set by the implicit global project (~/.stack/global-project/stack.yaml)
    typeset -g POWERLEVEL9K_HASKELL_STACK_SOURCES=(shell local)
    # If set to false, hide haskell version if it's the same as in the implicit global project.
    typeset -g POWERLEVEL9K_HASKELL_STACK_ALWAYS_SHOW=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_HASKELL_STACK_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #############[ kubecontext: current kubernetes context (https://kubernetes.io/) ]#############
    # Show kubecontext only when the the command you are typing invokes one of these tools.
    # Tip: Remove the next line to always show kubecontext.
    typeset -g POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND='kubectl|helm|kubens|kubectx|oc|istioctl|kogito|k9s|helmfile'

    # Kubernetes context classes for the purpose of using different colors, icons and expansions with
    # different contexts.
    #
    # POWERLEVEL9K_KUBECONTEXT_CLASSES is an array with even number of elements. The first element
    # in each pair defines a pattern against which the current kubernetes context gets matched.
    # More specifically, it's P9K_CONTENT prior to the application of context expansion (see below)
    # that gets matched. If you unset all POWERLEVEL9K_KUBECONTEXT_*CONTENT_EXPANSION parameters,
    # you'll see this value in your prompt. The second element of each pair in
    # POWERLEVEL9K_KUBECONTEXT_CLASSES defines the context class. Patterns are tried in order. The
    # first match wins.
    #
    # For example, given these settings:
    #
    #   typeset -g POWERLEVEL9K_KUBECONTEXT_CLASSES=(
    #     '*prod*'  PROD
    #     '*test*'  TEST
    #     '*'       DEFAULT)
    #
    # If your current kubernetes context is "deathray-testing/default", its class is TEST
    # because "deathray-testing/default" doesn't match the pattern '*prod*' but does match '*test*'.
    #
    # You can define different colors, icons and content expansions for different classes:
    #
    #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_FOREGROUND=28
    #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'
    #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_CONTENT_EXPANSION='> ${P9K_CONTENT} <'
    typeset -g POWERLEVEL9K_KUBECONTEXT_CLASSES=(
        # '*prod*'  PROD    # These values are examples that are unlikely
        # '*test*'  TEST    # to match your needs. Customize them as needed.
        '*'       DEFAULT)
    typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_FOREGROUND=134
    # typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='⭐'

    # Use POWERLEVEL9K_KUBECONTEXT_CONTENT_EXPANSION to specify the content displayed by kubecontext
    # segment. Parameter expansions are very flexible and fast, too. See reference:
    # http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion.
    #
    # Within the expansion the following parameters are always available:
    #
    # - P9K_CONTENT                The content that would've been displayed if there was no content
    #                              expansion defined.
    # - P9K_KUBECONTEXT_NAME       The current context's name. Corresponds to column NAME in the
    #                              output of `kubectl config get-contexts`.
    # - P9K_KUBECONTEXT_CLUSTER    The current context's cluster. Corresponds to column CLUSTER in the
    #                              output of `kubectl config get-contexts`.
    # - P9K_KUBECONTEXT_NAMESPACE  The current context's namespace. Corresponds to column NAMESPACE
    #                              in the output of `kubectl config get-contexts`. If there is no
    #                              namespace, the parameter is set to "default".
    # - P9K_KUBECONTEXT_USER       The current context's user. Corresponds to column AUTHINFO in the
    #                              output of `kubectl config get-contexts`.
    #
    # If the context points to Google Kubernetes Engine (GKE) or Elastic Kubernetes Service (EKS),
    # the following extra parameters are available:
    #
    # - P9K_KUBECONTEXT_CLOUD_NAME     Either "gke" or "eks".
    # - P9K_KUBECONTEXT_CLOUD_ACCOUNT  Account/project ID.
    # - P9K_KUBECONTEXT_CLOUD_ZONE     Availability zone.
    # - P9K_KUBECONTEXT_CLOUD_CLUSTER  Cluster.
    #
    # P9K_KUBECONTEXT_CLOUD_* parameters are derived from P9K_KUBECONTEXT_CLUSTER. For example,
    # if P9K_KUBECONTEXT_CLUSTER is "gke_my-account_us-east1-a_my-cluster-01":
    #
    #   - P9K_KUBECONTEXT_CLOUD_NAME=gke
    #   - P9K_KUBECONTEXT_CLOUD_ACCOUNT=my-account
    #   - P9K_KUBECONTEXT_CLOUD_ZONE=us-east1-a
    #   - P9K_KUBECONTEXT_CLOUD_CLUSTER=my-cluster-01
    #
    # If P9K_KUBECONTEXT_CLUSTER is "arn:aws:eks:us-east-1:123456789012:cluster/my-cluster-01":
    #
    #   - P9K_KUBECONTEXT_CLOUD_NAME=eks
    #   - P9K_KUBECONTEXT_CLOUD_ACCOUNT=123456789012
    #   - P9K_KUBECONTEXT_CLOUD_ZONE=us-east-1
    #   - P9K_KUBECONTEXT_CLOUD_CLUSTER=my-cluster-01
    typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION=
    # Show P9K_KUBECONTEXT_CLOUD_CLUSTER if it's not empty and fall back to P9K_KUBECONTEXT_NAME.
    POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION+='${P9K_KUBECONTEXT_CLOUD_CLUSTER:-${P9K_KUBECONTEXT_NAME}}'
    # Append the current context's namespace if it's not "default".
    POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION+='${${:-/$P9K_KUBECONTEXT_NAMESPACE}:#/default}'

    # Custom prefix.
    # typeset -g POWERLEVEL9K_KUBECONTEXT_PREFIX='%fat '

    ################[ terraform: terraform workspace (https://www.terraform.io) ]#################
    # Don't show terraform workspace if it's literally "default".
    typeset -g POWERLEVEL9K_TERRAFORM_SHOW_DEFAULT=false
    # POWERLEVEL9K_TERRAFORM_CLASSES is an array with even number of elements. The first element
    # in each pair defines a pattern against which the current terraform workspace gets matched.
    # More specifically, it's P9K_CONTENT prior to the application of context expansion (see below)
    # that gets matched. If you unset all POWERLEVEL9K_TERRAFORM_*CONTENT_EXPANSION parameters,
    # you'll see this value in your prompt. The second element of each pair in
    # POWERLEVEL9K_TERRAFORM_CLASSES defines the workspace class. Patterns are tried in order. The
    # first match wins.
    #
    # For example, given these settings:
    #
    #   typeset -g POWERLEVEL9K_TERRAFORM_CLASSES=(
    #     '*prod*'  PROD
    #     '*test*'  TEST
    #     '*'       OTHER)
    #
    # If your current terraform workspace is "project_test", its class is TEST because "project_test"
    # doesn't match the pattern '*prod*' but does match '*test*'.
    #
    # You can define different colors, icons and content expansions for different classes:
    #
    #   typeset -g POWERLEVEL9K_TERRAFORM_TEST_FOREGROUND=28
    #   typeset -g POWERLEVEL9K_TERRAFORM_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'
    #   typeset -g POWERLEVEL9K_TERRAFORM_TEST_CONTENT_EXPANSION='> ${P9K_CONTENT} <'
    typeset -g POWERLEVEL9K_TERRAFORM_CLASSES=(
        # '*prod*'  PROD    # These values are examples that are unlikely
        # '*test*'  TEST    # to match your needs. Customize them as needed.
        '*'         OTHER)
    typeset -g POWERLEVEL9K_TERRAFORM_OTHER_FOREGROUND=38
    # typeset -g POWERLEVEL9K_TERRAFORM_OTHER_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #[ aws: aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html) ]#
    # Show aws only when the the command you are typing invokes one of these tools.
    # Tip: Remove the next line to always show aws.
    typeset -g POWERLEVEL9K_AWS_SHOW_ON_COMMAND='aws|awless|terraform|pulumi|terragrunt'

    # POWERLEVEL9K_AWS_CLASSES is an array with even number of elements. The first element
    # in each pair defines a pattern against which the current AWS profile gets matched.
    # More specifically, it's P9K_CONTENT prior to the application of context expansion (see below)
    # that gets matched. If you unset all POWERLEVEL9K_AWS_*CONTENT_EXPANSION parameters,
    # you'll see this value in your prompt. The second element of each pair in
    # POWERLEVEL9K_AWS_CLASSES defines the profile class. Patterns are tried in order. The
    # first match wins.
    #
    # For example, given these settings:
    #
    #   typeset -g POWERLEVEL9K_AWS_CLASSES=(
    #     '*prod*'  PROD
    #     '*test*'  TEST
    #     '*'       DEFAULT)
    #
    # If your current AWS profile is "company_test", its class is TEST
    # because "company_test" doesn't match the pattern '*prod*' but does match '*test*'.
    #
    # You can define different colors, icons and content expansions for different classes:
    #
    #   typeset -g POWERLEVEL9K_AWS_TEST_FOREGROUND=28
    #   typeset -g POWERLEVEL9K_AWS_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'
    #   typeset -g POWERLEVEL9K_AWS_TEST_CONTENT_EXPANSION='> ${P9K_CONTENT} <'
    typeset -g POWERLEVEL9K_AWS_CLASSES=(
        # '*prod*'  PROD    # These values are examples that are unlikely
        # '*test*'  TEST    # to match your needs. Customize them as needed.
        '*'       DEFAULT)
    typeset -g POWERLEVEL9K_AWS_DEFAULT_FOREGROUND=208
    # typeset -g POWERLEVEL9K_AWS_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #[ aws_eb_env: aws elastic beanstalk environment (https://aws.amazon.com/elasticbeanstalk/) ]#
    # AWS Elastic Beanstalk environment color.
    typeset -g POWERLEVEL9K_AWS_EB_ENV_FOREGROUND=70
    # Custom icon.
    # typeset -g POWERLEVEL9K_AWS_EB_ENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##########[ azure: azure account name (https://docs.microsoft.com/en-us/cli/azure) ]##########
    # Show azure only when the the command you are typing invokes one of these tools.
    # Tip: Remove the next line to always show azure.
    typeset -g POWERLEVEL9K_AZURE_SHOW_ON_COMMAND='az|terraform|pulumi|terragrunt'
    # Azure account name color.
    typeset -g POWERLEVEL9K_AZURE_FOREGROUND=32
    # Custom icon.
    # typeset -g POWERLEVEL9K_AZURE_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##########[ gcloud: google cloud account and project (https://cloud.google.com/) ]###########
    # Show gcloud only when the the command you are typing invokes one of these tools.
    # Tip: Remove the next line to always show gcloud.
    typeset -g POWERLEVEL9K_GCLOUD_SHOW_ON_COMMAND='gcloud|gcs'
     # Google cloud color.
    typeset -g POWERLEVEL9K_GCLOUD_FOREGROUND=32

    # Google cloud format. Change the value of POWERLEVEL9K_GCLOUD_PARTIAL_CONTENT_EXPANSION and/or
    # POWERLEVEL9K_GCLOUD_COMPLETE_CONTENT_EXPANSION if the default is too verbose or not informative
    # enough. You can use the following parameters in the expansions. Each of them corresponds to the
    # output of `gcloud` tool.
    #
    #   Parameter                | Source
    #   -------------------------|--------------------------------------------------------------------
    #   P9K_GCLOUD_CONFIGURATION | gcloud config configurations list --format='value(name)'
    #   P9K_GCLOUD_ACCOUNT       | gcloud config get-value account
    #   P9K_GCLOUD_PROJECT_ID    | gcloud config get-value project
    #   P9K_GCLOUD_PROJECT_NAME  | gcloud projects describe $P9K_GCLOUD_PROJECT_ID --format='value(name)'
    #
    # Note: ${VARIABLE//\%/%%} expands to ${VARIABLE} with all occurrences of '%' replaced with '%%'.
    #
    # Obtaining project name requires sending a request to Google servers. This can take a long time
    # and even fail. When project name is unknown, P9K_GCLOUD_PROJECT_NAME is not set and gcloud
    # prompt segment is in state PARTIAL. When project name gets known, P9K_GCLOUD_PROJECT_NAME gets
    # set and gcloud prompt segment transitions to state COMPLETE.
    #
    # You can customize the format, icon and colors of gcloud segment separately for states PARTIAL
    # and COMPLETE. You can also hide gcloud in state PARTIAL by setting
    # POWERLEVEL9K_GCLOUD_PARTIAL_VISUAL_IDENTIFIER_EXPANSION and
    # POWERLEVEL9K_GCLOUD_PARTIAL_CONTENT_EXPANSION to empty.
    typeset -g POWERLEVEL9K_GCLOUD_PARTIAL_CONTENT_EXPANSION='${P9K_GCLOUD_PROJECT_ID//\%/%%}'
    typeset -g POWERLEVEL9K_GCLOUD_COMPLETE_CONTENT_EXPANSION='${P9K_GCLOUD_PROJECT_NAME//\%/%%}'

    # Send a request to Google (by means of `gcloud projects describe ...`) to obtain project name
    # this often. Negative value disables periodic polling. In this mode project name is retrieved
    # only when the current configuration, account or project id changes.
    typeset -g POWERLEVEL9K_GCLOUD_REFRESH_PROJECT_NAME_SECONDS=60

    # Custom icon.
    # typeset -g POWERLEVEL9K_GCLOUD_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #[ google_app_cred: google application credentials (https://cloud.google.com/docs/authentication/production) ]#
    # Show google_app_cred only when the the command you are typing invokes one of these tools.
    # Tip: Remove the next line to always show google_app_cred.
    typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_SHOW_ON_COMMAND='terraform|pulumi|terragrunt'

    # Google application credentials classes for the purpose of using different colors, icons and
    # expansions with different credentials.
    #
    # POWERLEVEL9K_GOOGLE_APP_CRED_CLASSES is an array with even number of elements. The first
    # element in each pair defines a pattern against which the current kubernetes context gets
    # matched. More specifically, it's P9K_CONTENT prior to the application of context expansion
    # (see below) that gets matched. If you unset all POWERLEVEL9K_GOOGLE_APP_CRED_*CONTENT_EXPANSION
    # parameters, you'll see this value in your prompt. The second element of each pair in
    # POWERLEVEL9K_GOOGLE_APP_CRED_CLASSES defines the context class. Patterns are tried in order.
    # The first match wins.
    #
    # For example, given these settings:
    #
    #   typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_CLASSES=(
    #     '*:*prod*:*'  PROD
    #     '*:*test*:*'  TEST
    #     '*'           DEFAULT)
    #
    # If your current Google application credentials is "service_account deathray-testing x@y.com",
    # its class is TEST because it doesn't match the pattern '* *prod* *' but does match '* *test* *'.
    #
    # You can define different colors, icons and content expansions for different classes:
    #
    #   typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_TEST_FOREGROUND=28
    #   typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'
    #   typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_TEST_CONTENT_EXPANSION='$P9K_GOOGLE_APP_CRED_PROJECT_ID'
    typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_CLASSES=(
        # '*:*prod*:*'  PROD    # These values are examples that are unlikely
        # '*:*test*:*'  TEST    # to match your needs. Customize them as needed.
        '*'             DEFAULT)
    typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_DEFAULT_FOREGROUND=32
    # typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='⭐'

    # Use POWERLEVEL9K_GOOGLE_APP_CRED_CONTENT_EXPANSION to specify the content displayed by
    # google_app_cred segment. Parameter expansions are very flexible and fast, too. See reference:
    # http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion.
    #
    # You can use the following parameters in the expansion. Each of them corresponds to one of the
    # fields in the JSON file pointed to by GOOGLE_APPLICATION_CREDENTIALS.
    #
    #   Parameter                        | JSON key file field
    #   ---------------------------------+---------------
    #   P9K_GOOGLE_APP_CRED_TYPE         | type
    #   P9K_GOOGLE_APP_CRED_PROJECT_ID   | project_id
    #   P9K_GOOGLE_APP_CRED_CLIENT_EMAIL | client_email
    #
    # Note: ${VARIABLE//\%/%%} expands to ${VARIABLE} with all occurrences of '%' replaced by '%%'.
    typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_DEFAULT_CONTENT_EXPANSION='${P9K_GOOGLE_APP_CRED_PROJECT_ID//\%/%%}'

    ###############################[ public_ip: public IP address ]###############################
    # Public IP color.
    typeset -g POWERLEVEL9K_PUBLIC_IP_FOREGROUND=94
    # Custom icon.
    # typeset -g POWERLEVEL9K_PUBLIC_IP_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ########################[ vpn_ip: virtual private network indicator ]#########################
    # VPN IP color.
    typeset -g POWERLEVEL9K_VPN_IP_FOREGROUND=81
    # When on VPN, show just an icon without the IP address.
    # Tip: To display the private IP address when on VPN, remove the next line.
    typeset -g POWERLEVEL9K_VPN_IP_CONTENT_EXPANSION=
    # Regular expression for the VPN network interface. Run `ifconfig` or `ip -4 a show` while on VPN
    # to see the name of the interface.
    typeset -g POWERLEVEL9K_VPN_IP_INTERFACE='(gpd|wg|(.*tun))[0-9]*'
    # If set to true, show one segment per matching network interface. If set to false, show only
    # one segment corresponding to the first matching network interface.
    # Tip: If you set it to true, you'll probably want to unset POWERLEVEL9K_VPN_IP_CONTENT_EXPANSION.
    typeset -g POWERLEVEL9K_VPN_IP_SHOW_ALL=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_VPN_IP_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###########[ ip: ip address and bandwidth usage for a specified network interface ]###########
    # IP color.
    typeset -g POWERLEVEL9K_IP_FOREGROUND=38
    # The following parameters are accessible within the expansion:
    #
    #   Parameter             | Meaning
    #   ----------------------+---------------
    #   P9K_IP_IP         | IP address
    #   P9K_IP_INTERFACE  | network interface
    #   P9K_IP_RX_BYTES   | total number of bytes received
    #   P9K_IP_TX_BYTES   | total number of bytes sent
    #   P9K_IP_RX_RATE    | receive rate (since last prompt)
    #   P9K_IP_TX_RATE    | send rate (since last prompt)
    typeset -g POWERLEVEL9K_IP_CONTENT_EXPANSION='$P9K_IP_IP${P9K_IP_RX_RATE:+ %70F⇣$P9K_IP_RX_RATE}${P9K_IP_TX_RATE:+ %215F⇡$P9K_IP_TX_RATE}'
    # Show information for the first network interface whose name matches this regular expression.
    # Run `ifconfig` or `ip -4 a show` to see the names of all network interfaces.
    typeset -g POWERLEVEL9K_IP_INTERFACE='e.*'
    # Custom icon.
    # typeset -g POWERLEVEL9K_IP_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #########################[ proxy: system-wide http/https/ftp proxy ]##########################
    # Proxy color.
    typeset -g POWERLEVEL9K_PROXY_FOREGROUND=68
    # Custom icon.
    # typeset -g POWERLEVEL9K_PROXY_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ################################[ battery: internal battery ]#################################
    # Show battery in red when it's below this level and not connected to power supply.
    typeset -g POWERLEVEL9K_BATTERY_LOW_THRESHOLD=20
    typeset -g POWERLEVEL9K_BATTERY_LOW_FOREGROUND=160
    # Show battery in green when it's charging or fully charged.
    typeset -g POWERLEVEL9K_BATTERY_{CHARGING,CHARGED}_FOREGROUND=70
    # Show battery in yellow when it's discharging.
    typeset -g POWERLEVEL9K_BATTERY_DISCONNECTED_FOREGROUND=178
    # Battery pictograms going from low to high level of charge.
    typeset -g POWERLEVEL9K_BATTERY_STAGES='\uf58d\uf579\uf57a\uf57b\uf57c\uf57d\uf57e\uf57f\uf580\uf581\uf578'
    # Don't show the remaining time to charge/discharge.
    typeset -g POWERLEVEL9K_BATTERY_VERBOSE=false

    #####################################[ wifi: wifi speed ]#####################################
    # WiFi color.
    typeset -g POWERLEVEL9K_WIFI_FOREGROUND=68
    # Custom icon.
    # typeset -g POWERLEVEL9K_WIFI_VISUAL_IDENTIFIER_EXPANSION='⭐'

    # Use different colors and icons depending on signal strength ($P9K_WIFI_BARS).
    #
    #   # Wifi colors and icons for different signal strength levels (low to high).
    #   typeset -g my_wifi_fg=(68 68 68 68 68)                           # <-- change these values
    #   typeset -g my_wifi_icon=('WiFi' 'WiFi' 'WiFi' 'WiFi' 'WiFi')     # <-- change these values
    #
    #   typeset -g POWERLEVEL9K_WIFI_CONTENT_EXPANSION='%F{${my_wifi_fg[P9K_WIFI_BARS+1]}}$P9K_WIFI_LAST_TX_RATE Mbps'
    #   typeset -g POWERLEVEL9K_WIFI_VISUAL_IDENTIFIER_EXPANSION='%F{${my_wifi_fg[P9K_WIFI_BARS+1]}}${my_wifi_icon[P9K_WIFI_BARS+1]}'
    #
    # The following parameters are accessible within the expansions:
    #
    #   Parameter             | Meaning
    #   ----------------------+---------------
    #   P9K_WIFI_SSID         | service set identifier, a.k.a. network name
    #   P9K_WIFI_LINK_AUTH    | authentication protocol such as "wpa2-psk" or "none"; empty if unknown
    #   P9K_WIFI_LAST_TX_RATE | wireless transmit rate in megabits per second
    #   P9K_WIFI_RSSI         | signal strength in dBm, from -120 to 0
    #   P9K_WIFI_NOISE        | noise in dBm, from -120 to 0
    #   P9K_WIFI_BARS         | signal strength in bars, from 0 to 4 (derived from P9K_WIFI_RSSI and P9K_WIFI_NOISE)

    ####################################[ time: current time ]####################################
    # Current time color.
    typeset -g POWERLEVEL9K_TIME_FOREGROUND=66
    # Format for the current time: 09:51:02. See `man 3 strftime`.
    typeset -g POWERLEVEL9K_TIME_FORMAT='%D{%H:%M:%S}'
    # If set to true, time will update when you hit enter. This way prompts for the past
    # commands will contain the start times of their commands as opposed to the default
    # behavior where they contain the end times of their preceding commands.
    typeset -g POWERLEVEL9K_TIME_UPDATE_ON_COMMAND=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_TIME_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # Custom prefix.
    # typeset -g POWERLEVEL9K_TIME_PREFIX='%fat '

    # Example of a user-defined prompt segment. Function prompt_example will be called on every
    # prompt if `example` prompt segment is added to POWERLEVEL9K_LEFT_PROMPT_ELEMENTS or
    # POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS. It displays an icon and orange text greeting the user.
    #
    # Type `p10k help segment` for documentation and a more sophisticated example.
    function prompt_example() {
      p10k segment -f 208 -i '⭐' -t 'hello, %n'
    }

    # User-defined prompt segments may optionally provide an instant_prompt_* function. Its job
    # is to generate the prompt segment for display in instant prompt. See
    # https://github.com/romkatv/powerlevel10k/blob/master/README.md#instant-prompt.
    #
    # Powerlevel10k will call instant_prompt_* at the same time as the regular prompt_* function
    # and will record all `p10k segment` calls it makes. When displaying instant prompt, Powerlevel10k
    # will replay these calls without actually calling instant_prompt_*. It is imperative that
    # instant_prompt_* always makes the same `p10k segment` calls regardless of environment. If this
    # rule is not observed, the content of instant prompt will be incorrect.
    #
    # Usually, you should either not define instant_prompt_* or simply call prompt_* from it. If
    # instant_prompt_* is not defined for a segment, the segment won't be shown in instant prompt.
    function instant_prompt_example() {
      # Since prompt_example always makes the same `p10k segment` calls, we can call it from
      # instant_prompt_example. This will give us the same `example` prompt segment in the instant
      # and regular prompts.
      prompt_example
    }

    # User-defined prompt segments can be customized the same way as built-in segments.
    # typeset -g POWERLEVEL9K_EXAMPLE_FOREGROUND=208
    # typeset -g POWERLEVEL9K_EXAMPLE_VISUAL_IDENTIFIER_EXPANSION='⭐'

    # Transient prompt works similarly to the builtin transient_rprompt option. It trims down prompt
    # when accepting a command line. Supported values:
    #
    #   - off:      Don't change prompt when accepting a command line.
    #   - always:   Trim down prompt when accepting a command line.
    #   - same-dir: Trim down prompt when accepting a command line unless this is the first command
    #               typed after changing current working directory.
    typeset -g POWERLEVEL9K_TRANSIENT_PROMPT=always

    # Instant prompt mode.
    #
    #   - off:     Disable instant prompt. Choose this if you've tried instant prompt and found
    #              it incompatible with your zsh configuration files.
    #   - quiet:   Enable instant prompt and don't print warnings when detecting console output
    #              during zsh initialization. Choose this if you've read and understood
    #              https://github.com/romkatv/powerlevel10k/blob/master/README.md#instant-prompt.
    #   - verbose: Enable instant prompt and print a warning when detecting console output during
    #              zsh initialization. Choose this if you've never tried instant prompt, haven't
    #              seen the warning, or if you are unsure what this all means.
    typeset -g POWERLEVEL9K_INSTANT_PROMPT=verbose

    # Hot reload allows you to change POWERLEVEL9K options after Powerlevel10k has been initialized.
    # For example, you can type POWERLEVEL9K_BACKGROUND=red and see your prompt turn red. Hot reload
    # can slow down prompt by 1-2 milliseconds, so it's better to keep it turned off unless you
    # really need it.
    typeset -g POWERLEVEL9K_DISABLE_HOT_RELOAD=true

    # If p10k is already loaded, reload configuration.
    # This works even with POWERLEVEL9K_DISABLE_HOT_RELOAD=true.
    (( ! $+functions[p10k] )) || p10k reload
  }

  # Tell `p10k configure` which file it should overwrite.
  typeset -g POWERLEVEL9K_CONFIG_FILE=${${(%):-%x}:a}

  (( ${#p10k_config_opts} )) && setopt ${p10k_config_opts[@]}
  'builtin' 'unset' 'p10k_config_opts'

#+end_src

* Wayland
#+begin_src shell :results output replace :tangle "~/.config/environment.d/10-global.conf" :mkdirp yes
  PATH=$HOME/bin:$HOME/environment/local/bin:$HOME/work/tools/local/bin/:$HOME/work/maintained_tools/local/bin/:$HOME/.local/bin:$PATH
#+end_src

* COMMENT some extra configuration
