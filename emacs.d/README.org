#+TITLE: Emacs configuration file
#+AUTHOR: SÃ©bastien Le Maguer
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:5 num:t toc:t prop:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://seblemaguer.github.io/css/main.css" />

#+PROPERTY: header-args:emacs-lisp  :mkdirp yes :lexical t :exports code
#+PROPERTY: header-args:emacs-lisp+ :tangle ~/.emacs.d/init.el
#+PROPERTY: header-args:emacs-lisp+ :mkdirp yes :noweb no-export

This is my emacs configuration file. It is under version control and available, among other
configurations, at this repository: https://github.com/seblemaguer/dotfiles

* DONE Command line management
CLOSED: [2025-05-08 Thu 09:57]
:PROPERTIES:
:ID:       42569b59-48db-4832-a639-18e3ec531b09
:END:
This part is dedicated to support some configuration using the command line by defining some options.
For now, only the option =--no-connection= is defined in order enforce the loading without packages requiring internet.

#+begin_src emacs-lisp
  (defvar no-connection nil
    "Flag indicating if we are operating without any internet connection")

  ;; Theming Command line options (this will cancel warning messages)
  (add-to-list 'command-switch-alist '("--no-connection"   . (lambda (args))))
  (add-to-list 'command-switch-alist '("--start-profiler"   . (lambda (args))))

  ;; If required, start profiler
  (when (member "--start-profiler" command-line-args)
    (profiler-start 'cpu))

  (when (member "--debug-init" command-line-args)
    (toggle-debug-on-error))

  ;; Indicates we are operating in no-connection mode
  (when (member "--no-connection" command-line-args)
    (setq no-connection t))
#+end_src

* DONE Elpaca
CLOSED: [2021-01-03 Sun 10:52]
:PROPERTIES:
:ID:       08b8b3b9-31a4-4436-9789-502e7ddd3ef1
:END:

The file =tangle.el= contains the backbone to configure elpaca.
In order to avoid duplication and potential mismatch, we simply transclude the needed part from this file.

#+transclude: [[file:~/.emacs.d/tangle.el]] :lines 3-68 :src emacs-lisp

Now, we introduce some really useful macros:

#+begin_src emacs-lisp
   (defmacro use-builtin (name &rest args)
     (declare (indent defun))
     `(use-package ,name
        :ensure nil
        ,@args))
#+end_src

* DONE Definition of no-web helper routines
CLOSED: [2023-07-19 Wed 20:41]
:PROPERTIES:
:ID:       7ad5d8d3-eec1-44ed-8d16-819ae06fccae
:END:

I found the strategy of defining tables to store keybindings proposed by [[https://config.phundrak.com/][phundrak]] pretty interesting.
It has two main advantages.
First, it allows to ensure a better consistency.
Second, it provides a neatty way to generate a refcard of my personal bindings.

I also extending this to support not only default keybindings but also hydra.
As a result, we have now the following routines:
  - keybindings-gen :: generate the elisp for the keybindings from a given table
  - hydra-keybindings-gen :: generate the elisp for the *hydra* keybindings from a given table
  - hydra-keybindings-gen-with-opt :: same as previously but dedicated to take into account options specificied for hydra
  - transient-keybindings-gen :: generate the elisp *body* related to *transient* bindings (the prefix and other container related information are not included!)

#+NAME: keybindings-gen
#+header: :tangle no :exports code :results value :cache yes
#+begin_src emacs-lisp :var table=comment-keybindings prefix=""
  (mapconcat (lambda (line)
               (let* ((key      (car line))
                      (function (cadr line))
                      (comment  (caddr line)))
                 (if (string-prefix-p "[" key)
                     (format "(%s . %s)" key function)
                     (format "(\"%s\" . %s)" key function))))
             table
             "\n")
#+end_src

#+NAME: hydra-keybindings-gen
#+header: :tangle no :exports code :results value :cache yes
#+begin_src emacs-lisp :var table=comment-keybindings prefix=""
  (mapconcat (lambda (line)
               (let* ((key      (car line))
                      (function (cadr line))
                      (label    (caddr line)))
                 (if (string= "" label)
                     (format "(\"%s\" %s)" key function)
                     (format "(\"%s\" %s \"%s\")" key function label))))
             table
             "\n")
#+end_src

#+NAME: hydra-keybindings-gen-with-opt
#+header: :tangle no :exports code :results value :cache yes
#+begin_src emacs-lisp :var table=comment-keybindings prefix=""
  (mapconcat (lambda (line)
               (let* ((key      (car line))
                      (function (cadr line))
                      (label    (caddr line))
                      (options  (cadddr line)))
                 (if (string= "" label)
                   (if (string= "" options)
                     (format "(\"%s\" %s)" key function)
                     (format "(\"%s\" %s %s)" key function options))
                   (if (string= "" options)
                     (format "(\"%s\" %s \"%s\")" key function label)
                     (format "(\"%s\" %s \"%s\" %s)" key function label options)))
                   ))
             table
             "\n")
#+end_src

#+NAME: transient-keybindings-gen
#+header: :tangle no :exports code :results value :cache yes
#+begin_src emacs-lisp :var table=comment-keybindings prefix=""
  (mapconcat (lambda (line)
               (let* ((key         (car line))
                      (label       (cadr line))
                      (function    (caddr line)))
                 (if (string= "" label)
                     (error "Label is required for key %s" key)
                     (format "(\"%s\" \"%s\" %s)" key label function))))
             table
             "\n")
#+end_src

* DONE Server
CLOSED: [2025-05-08 Thu 09:57]
:PROPERTIES:
:ID:       ba09db2b-a424-46b3-b26a-6d199cddd6c9
:END:
Before anything happens, we start the server to avoid conflict if there is a problem during the
loading phase.

#+begin_src emacs-lisp
  (server-start)
#+end_src

We also provide a helper to shutdown properly the server.

#+begin_src emacs-lisp
(defun server-shutdown ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs))
#+end_src

* DONE Core [100%]
:PROPERTIES:
:ID:       5d3e0d31-680d-4865-a0ce-8e1791b59599
:END:
This section focuses on providing helpers and utilities required for the rest of the configuration.

** DONE Fundamentals [100%]
CLOSED: [2021-01-03 Sun 10:46]
:PROPERTIES:
:ID:       b08521d3-9bcd-4c5e-bba9-34fa52adc9f0
:END:
This section define the fundamental variables and helpers which are recurrently used in the configuration.

*** DONE Deal with warning issues in "nativecomp"
CLOSED: [2021-06-24 Thu 12:42]
:PROPERTIES:
:ID:       6ba6a19d-13c2-4a60-bc6d-7bb75c2c3422
:END:
Emacs 28 supports native compilation, but it creates a lot of warnings.
I preferred to disable the report while waiting for a better solution.

#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 28)
    (setq comp-async-report-warnings-errors nil
          native-comp-async-report-warnings-errors nil))
#+END_SRC

*** DONE Define some important variables
CLOSED: [2021-01-03 Sun 10:39]
:PROPERTIES:
:ID:       9c6402ff-3cdf-457e-bb4a-80d165fbc177
:END:
The section defines the variables =default-plugin-dir= and set the =custom-file=.
Some default values related to emacs' core behaviour, like the garbage collector, are also set here.

#+begin_src emacs-lisp
  ;; Define cloud variables
  (defvar cloud-org-root-dir (expand-file-name "~/shared/org-roam/")
    "The root directory of org-mode specific files which should be saved on the cloud.")

  ;; Define root directory and add the plugins
  (defvar default-plugin-dir (concat user-emacs-directory "plugins")
    "The plugins directory")

  (defvar org-agenda-default-files `(,(concat cloud-org-root-dir"perso/music/shopping_list.org"))
    "Agenda files which are not managed by org-roam/vulpea")

  ;; Don't screw up my files with custom
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file 'noerror)

  ;; Silence!!!!!!
  (setq save-abbrevs 'silently
        ad-redefinition-action 'accept

        ;; Garbage collection (see https://github.com/jethrokuan/.emacs.d/blob/master/config.org)
        gc-cons-threshold 100000000
        large-file-warning-threshold 100000000)
#+end_src

*** DONE Dealing with tangling this file
CLOSED: [2021-01-03 Sun 10:46]
:PROPERTIES:
:FROM:     https://www.reddit.com/r/emacs/comments/6t37yg/org_mode_dot_emacs/
:ID:       c6446492-0f26-4b39-9331-c34a0e8aa3a0
:END:
This section defines two functions:
one to generate the emacs init file from =~/.emacs.d/README.org= and one to byte-compile the emacs init file.

Again, the file =tangle.el= is designed to support everything needed for the tangling of the main configuration.
Therefore, we use the definition part straight up from this script:

#+transclude: [[file:~/.emacs.d/tangle.el]] :lines 74-82 :src emacs-lisp

Now we can add the specific helper for our configuration:

#+begin_src emacs-lisp
  (defun tangle-main-config (&optional with-private-conf)
    "Tangle my emacs configuration. "
    (interactive "P")

    ;; Tangle to init.el
    (tangle-current-file (concat user-emacs-directory "README.org"))

    ;; Tangle to Private variables
    (when with-private-conf
      (tangle-current-file (concat cloud-org-root-dir "perso/configuration/private.org")))

    ;; byte-compile plugins
    (byte-recompile-directory (expand-file-name default-plugin-dir) 0))
#+end_src
*** DONE Fix some keys redefinition with terminal
CLOSED: [2025-05-14 Wed 17:08]
Due to my terminal configuration f1..f4 are not mapped to what emacs expects, fix this.

#+BEGIN_SRC emacs-lisp
  (define-key input-decode-map "\eOP" [f1])
  (define-key input-decode-map "\eOQ" [f2])
  (define-key input-decode-map "\eOR" [f3])
  (define-key input-decode-map "\eOS" [f4])
#+END_SRC

** DONE Package management [100%]
:PROPERTIES:
:ID:       dbd2306f-c4de-443e-9a0b-f6f66235d91a
:END:
My configuration relies on a lot (too-many?) of packages.
It relies primarly on =use-package= and ~elpaca~.
I also use the command ~use-builtin~ from https://github.com/danilshvalov/dotfiles/blob/main/.config/emacs/config.el for a better readability of the configuration.

Furthermore, each package is tagged with several keywors to have a "machine-dependent" loading scheme.

*** DONE Tagging
CLOSED: [2021-01-03 Sun 10:58]
:PROPERTIES:
:ID:       3e80de57-39b3-47f6-a3b3-8ea351cecdba
:END:
I am using keywords/tags to define a loading scheme for each of the machine where emacs is installed.
Each package, from now on, has one or multiple keywords associated using the key =:tags=.
Each computer has a series of tags which are required to be loaded.
The specification respects the following syntax:
  - list of strings which are
  - a tag prefixed by =!= explicitely reject packages whose have this tag associated with
  - ="ALL"= is a joker indicating =all the tags!= $\rightarrow$ no filtering

#+begin_src emacs-lisp
  (use-package use-package-tags
    :ensure (:protocol ssh :type git :host github :repo "seblemaguer/use-package-tags")
    :config

    (when no-connection
        (setq use-package-tags-default-tag-list '("!CONNECTED")))

    (setq use-package-tags-enabled
          `(("surface.home"                 . ("ALL" "!MAIL"))
            (,work-hostname                 . ("ALL"))
            ("mackenzie"                    . ("!MAIL" "!RSS" "!USER" "!GUI" "!MULTIMEDIA" "!CHAT" "!DESKTOP"))
            (,use-package-tags-default-host . ("CORE" "ORG" "!USER" "!DESKTOP")))))


  ;; Block until current queue processed.
  (elpaca-wait)
#+end_src

*** DONE Hydra
CLOSED: [2021-01-03 Sun 11:01]
:PROPERTIES:
:ID:       2e5e6408-c5c6-424f-ad8c-7e7dc30752c9
:END:
I use hydra a lot so it is easier to add its support directly in the use-package configuration part.
The combination pretty-hydra/major-mode-hydra provides an easy and powerful way to declare hydra.
While alternatives exist, I find this combination more straightforward and cleaner when it is used in combination with =use-package=.

#+transclude: [[file:keytable_summary.org::major-mode-hydra-entry-keybindings]]

#+begin_src emacs-lisp
  (use-package pretty-hydra
    :tags '("CORE"))

  (use-package major-mode-hydra
    :demand t
    :tags '("CORE"))
#+end_src

*** DONE "on"
CLOSED: [2024-11-01 Fri 11:03]
The goal of this package is to provide some helpers to have a more refined control on "when" a package should be loaded.
The following hooks are provided by the package:
  - on-first-input-hook :: when a key is stroke (before)
  - on-first-file-hook :: when the first file is INTERACTIVELY loaded (before)
  - on-first-buffer-hook :: when the first buffer is INTERACTIVELY opened (before)
  - on-switch-buffer-hook :: after changing the current buffer
  - on-switch-window-hook :: after changing the focused window
  - on-switch-frame-hook :: after changing the focused frame
  - on-init-ui-hook :: when the UI has been initialized

#+begin_src emacs-lisp
  (use-package on
    :tags '("CORE"))

  (elpaca-wait)
#+end_src

*** Transient
:PROPERTIES:
:ID:       ba96bded-c66a-4aae-b3c8-693cc61032f7
:END:
#+begin_src emacs-lisp
  (use-package transient
    :tags '("CORE"))
#+end_src

*** Documentation
:PROPERTIES:
:ID:       70aa9321-e665-4d1e-b63c-770e92cf6453
:END:
#+begin_src emacs-lisp
  (use-package dash-docs
    :tags '("CORE"))
#+end_src

** DONE Dealing with authentication private configuration  [100%]
:PROPERTIES:
:ID:       d6dc9617-ee55-46ef-98b7-e744c07d0ff1
:END:

*** DONE Dealing with secret/password management
CLOSED: [2024-03-13 Wed 22:59]
:PROPERTIES:
:SOURCE:   https://ph-uhl.com/emacs-password-management-on-linux/
:ID:       af4f58fe-aa6a-48e8-8fe9-b892333fd190
:END:
Rely on the secret service protocol to retrieve the passwords.

#+begin_src emacs-lisp
  ;; Load and patch secrets
  (use-builtin secrets
    :commands (secrets-search-items
               secrets-get-secret
               secrets-get-attributes)
    :config
    ;; Adds a patch to fix behavior with KeepassXC
    (defun secrets-unlock-item (collection item)
      "Unlock item labeled ITEM from collection labeled COLLECTION.
    If successful, return the object path of the item."
      (let ((item-path (secrets-item-path collection item)))
        (unless (secrets-empty-path item-path)
          (secrets-prompt
           (cadr
            (dbus-call-method
             :session secrets-service secrets-path secrets-interface-service
             "Unlock" `(:array :object-path ,item-path)))))
        item-path))

    ;; Adds a patch to fix behavior with KeepassXC
    (defun secrets-get-secret (collection item)
      "Return the secret of item labeled ITEM in COLLECTION.
    If there are several items labeled ITEM, it is undefined which
    one is returned.  If there is no such item, return nil.

    ITEM can also be an object path, which is used if contained in COLLECTION."
      (let ((item-path (secrets-unlock-item collection item)))
        (unless (secrets-empty-path item-path)
          (dbus-byte-array-to-string
           (nth 2
                (dbus-call-method
                 :session secrets-service item-path secrets-interface-item
                 "GetSecret" :object-path secrets-session-path)))))))
#+END_SRC

*** DONE Private configuration
CLOSED: [2024-03-13 Wed 22:59]
:PROPERTIES:
:ID:       146b0726-c335-44e4-9fab-dbf696dd1063
:END:
These sensitive configuration parts are store in a dedicated file (identified by the variable =privade-file=) which is loaded here.

#+begin_src emacs-lisp
  (defvar private-file (concat user-emacs-directory "private-variables.el")
    "Path to the file which stores my configuration.")

  (when (file-exists-p private-file)
    (load private-file))
#+end_src

** DONE Notifications [100%]
CLOSED: [2021-01-03 Sun 11:14]
:PROPERTIES:
:ID:       fe2191e3-0ff3-4183-ad19-43304adcfdec
:END:
Emacs is my entry point for almost everything.
Therefore, it is also useful to have the notifications handled directly in Emacs.
To do so, I rely on the couple sauron/alert.
Alert is the entry point for raising notifications while sauron is used to log the notifications.

This combination allows me to use the modeline as an indicator of the priority of the notification.
By doing so, I can be aware of a notification but choose to ignore it if I am focusing on something else.
If another notification of at most the same priority is raised, it will be logged but there won't be any visible cue.
However, if a notification of an higher priority is raised, the color of the modeline will be updated to reflect the priority of the notification.

*** DONE Sauron
CLOSED: [2021-01-03 Sun 11:13]
:PROPERTIES:
:ID:       8950483c-d934-47f8-83fc-bf89d5213c7f
:END:
Sauron is the pivot of the notification system.
However, I need to use my own fork for two reasons:
the upstream has some priority issues with ERC; I would like to ignore some events emitted by the *org-agenda*.

#+begin_src emacs-lisp
  (use-package alert
    :tags '("CORE" "NOTIFICATION")
    )

  (use-package sauron
    :ensure (:protocol ssh :type git :host github :repo "seblemaguer/sauron" :branch "functional")
    :tags '("CORE" "NOTIFICATION")
    :commands (sauron-start-hidden sauron-add-event)

    :config
    (defun sauron-keep-priority (msg props)
      "Function to define which event should keep the same priority
    and not be raised even if it is recent. The criterion is based on
    MSG and PROPS."
      (or
       (string= (plist-get props :sender) "root")
       (string= (plist-get props :event) "join")
       (string= (plist-get props :event) "quit")))

    (setq sauron-separate-frame nil ;; The notification is on the same window ?
	  sauron-sticky-frame t
	  sauron-max-line-length nil ;; No max. length for the line
	  sauron-modules '(sauron-org sauron-appt) ;; reduced the default modules
	  sauron-column-alist '(( timestamp  .  20)
				( origin     .  20)
				( priority   .   4)
				( message    . nil))
	  sauron-org-exclude-todo-states (list "CURRENT" "EXEC-STARTED" "PAUSED" "DELEGATED" "WAITING")
	  sauron-prio-org-minutes-left-list '((15 4))
	  sauron-insensitivity-handler 'sauron-keep-priority))
  (elpaca-wait)
#+end_src

*** DONE Sauron/Alert/Modeline integration
CLOSED: [2021-01-03 Sun 11:14]
:PROPERTIES:
:ID:       15621b50-1641-4fef-9a69-c80f3245359b
:END:
By using my plugin =sauron-mode-line=, I link Alert and Sauron.
By this way, all the Alert notifications are automatically transmitted to Sauron.
If a Sauron event is raised, it is transmitted to Alert to adapt the modeline bar.
This plugin is in charge to managing the communication and avoid any cycle.

#+begin_src emacs-lisp
  (use-builtin sauron-mode-line
    :load-path default-plugin-dir
    :tags '("CORE" "NOTIFICATION")
    :hook (elpaca-after-init . sauron-mode-line-start-hidden)
    :config
    (setq sauron-event-added-functions 'sauron-mode-line-notifier-from-sauron)
    )
#+end_src

** DONE Buffer listing
CLOSED: [2021-01-03 Sun 11:24]
:PROPERTIES:
:ID:       7b8d29f3-a515-4cab-9567-eac509b71ba3
:END:
Buffer listing is the fundamental navigation tool.
After playing with =ibuffer= and other helpers, I settled using =bufler=.
This choice has been made due its the simplicity and its recursive nature.
=bufler= is used in conjunction with =prism= is assumed to be loaded later.

#+transclude: [[file:keytable_summary.org::bufler-entry-keybindings]]

#+begin_src emacs-lisp
  (use-package bufler
    :tags '("CORE" "BUFFER")
    :bind (
      <<keybindings-gen(table=bufler-entry-keybindings)>>
    )

    :custom
    (bufler-reverse nil)
    (bufler-face-prefix "prism-level-")
    (bufler-vc-state t)
    (bufler-list-group-separators '((0 . "\n")))
    (bufler-initial-face-depth 1)
    (bufler-filter-buffer-modes nil)
    (bufler-columns '("Name" "Size" "AS" "VC" "Path"))
    (bufler-groups (bufler-defgroups
                     (group (group-or "Help/Info"
                                      (mode-match "*Help*" "^help\\(ful\\)?-.*")
                                      (mode-match "*Info*" (rx bos "info-"))
                                      (mode-match "*Apropos*" (rx bos "apropos-"))))

                     (group (group-or "Mail"
                                      (mode-match "*Mu4e*" (rx bos "mu4e-"))))

                     (group (group-or "Chatty"
                                      (mode-match "IRC" (rx bos "circe-"))
                                      (name-match "Slack" (rx bos "*Slack"))
                                      (mode-match "Telegram" (rx bos "telega-"))
                                      (mode-match "Matrix" (rx bos "ement-")))

                            (group (mode-match "IRC" (rx bos "circe"))
                                   (group (name-match "Query" (rx bos "circe-query")))
                                   (group (mode-match "Channels" (rx bos "circe-channel")))
                                   (group (name-match "Servers" (rx bos "circe-server"))))

                            (group (mode-match "Telegram" (rx bos "telega"))
                                   (group (mode-match "Channels" (rx bos "telega-chat")))
                                   (group (group-not "Other" (mode-match "unknown" (rx bos "telega-chat")))))

                            (group (name-match "Slack" (rx bos "*Slack"))
                                   (group (group-not "Message" (name-match "Logging" "\\*Slack[^-]*Log -")))
                                   (group (name-match "Logging" "*Slack[^-]*Log -")))


                            (group (mode-match "Matrix" (rx bos "ement-"))))

                     (group (mode-match "EMMS" (rx bos "emms-")))

                     (group (group-or "RSS"
                                      (mode-match "*Elfeed*" (rx bos "elfeed-"))
                                      (name-match "*Elfeed*" (rx bos "*elfeed"))
                                      (name-match "rss.org" (rx bos "rss.org"))))

                     (group (group-or "Todo"
                                      (name-match "Todo" "todo.org")
                                      (name-match "Shopping List" "shopping_list.org")))

                     ;; Subgroup collecting all special buffers (i.e. ones that are not
                     ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
                     ;; through to other groups, so they end up grouped with their project buffers).
                     (group (group-and "*Special*"
                                       (lambda (buffer)
                                         (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                                              buffer)
                                                     (funcall (mode-match "Dired" (rx bos "dired"))
                                                              buffer)
                                                     (funcall (auto-file) buffer))
                                           "*Special*")))

                            ;; Subgroup collecting these "special special" buffers separately for convenience.
                            (group (name-match "**Special**"
                                               (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))

                            ;; For my- calendars
                            (group (name-match "*Calendar*" "^[*]?[Cc]alendar.*$"))

                            ;; Package management
                            (group (name-match "*Packages*" (rx bos (or "*Paradox" "*Packages*"))))

                            ;; Processes in background
                            (group (name-match "*Prodigy*" (rx bos "*prodigy-")))

                            ;; Subgroup collecting all other Magit buffers, grouped by directory.
                            (group (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
                                   (auto-directory))

                            ;; Subgroup for Helm buffers.
                            (mode-match "*Helm*" (rx bos "helm-"))

                            ;; Remaining special buffers are grouped automatically by mode.
                            (auto-mode))

                     ;; Subgroup collecting org-roam related buffers
                     (group
                      (dir (if (bound-and-true-p cloud-org-root-dir)
                               cloud-org-root-dir
                             "~/org")))

                     ;; Subgroup collecting buffers per projects
                     (group (auto-project)
                            (auto-mode))

                     ;; Subgroup collecting buffers in a projectile project.
                     (group
                      (auto-tramp)
                      (auto-mode))

                     ;; Subgroup collecting buffers in a version-control project,
                     ;; grouping them by directory.
                     (auto-mode)
                     (auto-directory)))

    :config
    (bufler-define-column "AS" (:face bufler-path :max-width nil)
      (ignore depth)
      (let* ((buffer-file-name (buffer-file-name buffer)))
        (if (and buffer-file-name
                 (not (and buffer-file-name auto-save-visited-file-name))
                 (file-newer-than-file-p
                  (or buffer-auto-save-file-name (make-auto-save-file-name))
                  buffer-file-name))
            "*"
          ""))))
#+end_src

** DONE Minibuffer
CLOSED: [2021-01-03 Sun 11:24]
:PROPERTIES:
:ID:       58719179-4890-4e96-b668-ef6064dbae5d
:END:
Minibuffer configuration part. Nothing really outstanding, just the classical stuff.

#+begin_src emacs-lisp
  (use-builtin minibuffer
    :tags '("CORE" "MINIBUFFER")
    ;; :hook
    ;; (eval-expression-minibuffer-setup .  #'eldoc-mode)
    :config
    (setq read-file-name-completion-ignore-case t
          completion-ignore-case t
          resize-mini-windows t)

    (file-name-shadow-mode 1))
#+end_src

** DONE Memory & buffer
CLOSED: [2021-01-03 Sun 11:28]
:PROPERTIES:
:ID:       e1a35d90-60ab-49b7-aa1e-f9cba607179d
:END:
Large files are difficult to handle properly in Emacs.
The best way is to use =vlf=.
However, the entry point is actually =vlf-setup=.
This leads to ensuring the package =vlf= with the use-package header defined to be =vlf-setup=

I also use buffer-terminator to avoid the explosion of opened buffers (which are unused!).

#+begin_src emacs-lisp
  (use-package buffer-terminator
    :tags '("CORE")
    :custom
    (buffer-terminator-verbose nil)
    :config
    (buffer-terminator-mode 1))

  (use-package vlf-setup
    :ensure  vlf
    :tags '("CORE")
    :init (setq vlf-application 'dont-ask))

  (use-package bufferfile
    :tags '("CORE")
    :custom
    (bufferfile-use-vc t))
#+end_src

** DONE Navigation
CLOSED: [2025-05-19 Mon 09:28]
:PROPERTIES:
:ID:       1a4b5853-49d4-437a-922a-8fedb01ec74a
:END:
To have a better scrolling/navigation, I rely on two packages =fast-scroll and =goto-last-point=.
=fast-scroll= disables some hooks while scrolling and therefore makes it smoother.
=goto-last-point= enables me to go back to the position before the move happened.
Introducing =move-text= provides a quick way to swap consecutive lines.
Finally, =ddp= is used to supper query-based search in the buffer (this depends on some system commands such as yq, jq, ...).

#+transclude: [[file:keytable_summary.org::goto-last-point-entry-keybindings]]
#+transclude: [[file:keytable_summary.org::trail-entry-keybindings]]

#+begin_src emacs-lisp
  (use-package fast-scroll
    :tags '("CORE" "NAVIGATION")
    :hook
    (fast-scroll-start      . (lambda () (flycheck-mode -1)))
    (fast-scroll-end        . (lambda () (flycheck-mode 1)))

    :config
    (fast-scroll-config)
    (fast-scroll-mode 1))

  (use-package goto-last-point
    ;; NOTE: the original repo is a pain to access with ssh, using the emacsmirror
    :ensure (goto-last-point :type git :host github :repo "emacsmirror/goto-last-point")
    :tags '("CORE" "NAVIGATION")
    :hook (elpaca-after-init . goto-last-point-mode)
    :bind (
      <<keybindings-gen(table=goto-last-point-entry-keybindings)>>
    ))

  (use-package goto-line-preview
    :tags '("CORE" "NAVIGATION")
    :commands (goto-line-preview))

  (use-package trail
    :ensure (:host github :repo "gitrj95/trail.el")
    :tags '("CORE" "NAVIGATION")
    ;; if using a persistence/restoration mechanism, the restoration of
    ;; trail-ring must happen before trail-mode is enabled
    :after savehist
    :custom
    (trail-mark-around-functions '(xref-find-definitions xref-find-references))
    (trail-ring-max 100)

    :init
    (trail-mode)

    :bind(
      <<keybindings-gen(table=trail-entry-keybindings)>>
    ))

  (use-builtin savehist
    :tags '("CORE" "NAVIGATION")
    :init
    (savehist-mode)
    (setq savehist-additional-variables
          '(trail-ring)))

  (use-package move-text
    :tags '("CORE" "NAVIGATION")
    :config (move-text-default-bindings))

  (use-package speedrect
    :tags '("CORE" "NAVIGATION")
    :config (speedrect-mode))

  (use-package locs-and-refs
    :tags '("CORE" "NAVIGATION")
    :init
    (define-globalized-minor-mode global-locs-and-refs-mode locs-and-refs-mode
      (locs-and-refs-mode)))

  (use-package ddp
    :tags '("CORE" "NAVIGATION"))
#+end_src

* DONE Session [100%]
:PROPERTIES:
:ID:       1b1316db-efb2-427e-a6b3-ff5bbd6515d6
:END:
As I am using emacs as a daemon/client combination,
my daily routine consists of opening emacs at the beginning of work and switching it off on the evening.
Therefore it is difficult to track what needs to be remembered.
This section provides helpers which automatises key part to make the transition between two sessions smoother.

** DONE Recent files
CLOSED: [2021-01-03 Sun 11:31]
:PROPERTIES:
:ID:       887bceca-455a-4223-b96e-61087c6724e9
:END:
Opening recent files is always an easy and fast shortcut. Some files should be ignored though. That
leads to this configuration

#+begin_src emacs-lisp
  (use-builtin recentf
    :tags '("CORE" "SESSION" "RECENT")
    :hook (elpaca-after-init . recentf-mode)
    :custom
    (recentf-max-saved-items 100)
    (recentf-max-menu-items 100)

    :config

    ;; Ignore
    (add-to-list 'recentf-exclude "^/\\(?:ssh\\|su\\|sudo\\)?:")

    ;; Emacs
    (add-to-list 'recentf-exclude "~/.orhc-bibtex-cache")
    (add-to-list 'recentf-exclude "~/configuration/emacs\\.d/.*")
    (add-to-list 'recentf-exclude "~/\\.emacs\\.d/.*")

    ;;
    (add-to-list 'recentf-exclude "~/\\.authinfo.gpg")

    ;; elfeed
    (add-to-list 'recentf-exclude "~/\\.elfeed/.*")

    ;; Org/todo/calendars
    (add-to-list 'recentf-exclude ".*todo.org")
    (add-to-list 'recentf-exclude "~/.emacs.d/calendars/.*")

    ;; Org-roam or accessible via org-roam
    (add-to-list 'recentf-exclude (concat cloud-org-root-dir ".*"))
    (add-to-list 'recentf-exclude (concat (abbreviate-file-name cloud-org-root-dir) ".*" ))

    ;; Maildir
    (add-to-list 'recentf-exclude "~/mail/.*" ))
#+end_src

** DONE Backup/save files [100%]
:PROPERTIES:
:ID:       17e4beae-cf9c-4dcd-a68d-7eff132a7fe3
:END:
This section is dedicated to deal with backups. The main logic is to exlude some specific files
(either because of they are sensitive, either because they are just results of a process). For the
other ones, I want to have an easy way to navigate in it.

*** DONE Saving bits
CLOSED: [2022-07-25 Mon 07:41]
:PROPERTIES:
:ID:       1773914a-aa46-4fab-b61c-6f509b46e9ee
:END:
=super-save= provides a way to save any buffers while emacs is idled.

#+begin_src emacs-lisp
  (use-package super-save
    :tags '("CORE" "SAVE")
    :custom
    (super-save-auto-save-when-idle t)

    :config
    (super-save-mode +1))
#+end_src

*** DONE Backuping bits
CLOSED: [2021-01-03 Sun 11:33]
:PROPERTIES:
:ID:       5a746626-9d25-4135-ae9b-c0414062ef28
:END:
This the global backup configuration. For that I adapted a little bit the wonderful
snapshot-timemachine package.

#+begin_src emacs-lisp
  (defun my-make-backup-file-name (FILE)
    (let* ((dirname backup-directory)
           (backup-filename (concat dirname (file-truename FILE))))
      (unless (file-exists-p (file-name-directory  backup-filename))
        (make-directory (file-name-directory backup-filename) t))
      backup-filename))

  ;; Redefine find-backup-filename to avoid the "!" replacement
  (defun find-backup-file-name (fn)
    "Find a file name for a backup file FN, and suggestions for deletions.
      Value is a list whose car is the name for the backup file
      and whose cdr is a list of old versions to consider deleting now.
      If the value is nil, don't make a backup.
      Uses `backup-directory-alist' in the same way as
      `make-backup-file-name--default-function' does."
    (let ((handler (find-file-name-handler fn 'find-backup-file-name)))
      ;; Run a handler for this function so that ange-ftp can refuse to do it.
      (if handler
          (funcall handler 'find-backup-file-name fn)
        (if (or (eq version-control 'never)
                ;; We don't support numbered backups on plain MS-DOS
                ;; when long file names are unavailable.
                (and (eq system-type 'ms-dos)
                     (not (msdos-long-file-names))))
            (list (make-backup-file-name fn))
          (let* ((basic-name (make-backup-file-name fn))
                 (base-versions (concat (file-name-nondirectory basic-name)
                                        ".~"))
                 (backup-extract-version-start (length base-versions))
                 (high-water-mark 0)
                 (number-to-delete 0)
                 possibilities deserve-versions-p versions)
            (condition-case ()
                (setq possibilities (file-name-all-completions
                                     base-versions
                                     (file-name-directory basic-name))
                      versions (sort (mapcar #'backup-extract-version
                                             possibilities)
                                     #'<)
                      high-water-mark (apply 'max 0 versions)
                      deserve-versions-p (or version-control
                                             (> high-water-mark 0))
                      number-to-delete (- (length versions)
                                          kept-old-versions
                                          kept-new-versions
                                          -1))
              (file-error (setq possibilities nil)))
            (if (not deserve-versions-p)
                (list (make-backup-file-name fn))
              (cons (format "%s.~%d~" basic-name (1+ high-water-mark))
                    (if (and (> number-to-delete 0)
                             ;; Delete nothing if there is overflow
                             ;; in the number of versions to keep.
                             (>= (+ kept-new-versions kept-old-versions -1) 0))
                        (mapcar (lambda (n)
                                  (format "%s.~%d~" basic-name n))
                                (let ((v (nthcdr kept-old-versions versions)))
                                  (rplacd (nthcdr (1- number-to-delete) v) ())
                                  v))))))))))

  ;; Default Backup directory
  (defvar backup-directory (concat user-emacs-directory "backups/"))
  (setq backup-directory-alist `((".*" . ,backup-directory)))
  (when (not (file-exists-p backup-directory))
    (make-directory backup-directory t))
  (setq make-backup-file-name-function #'my-make-backup-file-name)
  ;; Auto-save
  (defvar auto-save-directory (concat user-emacs-directory "auto-save/"))
  (setq auto-save-file-name-transforms `((".*" ,auto-save-directory t)))
  (when (not (file-exists-p auto-save-directory))
    (make-directory auto-save-directory t))

  ;; Tramp backup
  (defvar tramp-backup-directory (concat user-emacs-directory "tramp-backups/"))
  (setq tramp-backup-directory-alist `((".*" . ,tramp-backup-directory)))

  (when (not (file-exists-p tramp-backup-directory))
    (make-directory tramp-backup-directory t))

  (setq make-backup-files t               ; backup of a file the first time it is saved.
        backup-by-copying t               ; don't clobber symlinks
        version-control t                 ; version numbers for backup files
        delete-old-versions t             ; delete excess backup files silently
        delete-by-moving-to-trash t
        kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
        )


  (use-package snapshot-timemachine
    :tags '("CORE" "SESSION" "BACKUP")
    :init

    :config

    (defun snapshot-timemachine-backup-finder (file)
      "Find snapshots of FILE in rsnapshot backups."
      (let* ((file (expand-file-name file))
             (file-dir (file-name-directory file))
             (file-base (file-name-nondirectory file))
             (backup-files (directory-files (concat backup-directory file-dir) t
                                            (format "%s.*" file-base))))
        (seq-map-indexed (lambda (backup-file index)
                           (make-snapshot :id index
                                          :name (format "%d" index)
                                          :file backup-file
                                          :date (nth 5 (file-attributes backup-file))))
                         backup-files)))

    (setq snapshot-timemachine-snapshot-finder #'snapshot-timemachine-backup-finder))
#+end_src

*** DONE Sensitive mode
CLOSED: [2021-01-03 Sun 11:33]
:PROPERTIES:
:ID:       e5e1a014-7292-4d3a-a173-64e99fbf8dab
:END:
There are some files which are not desired to be backed up. This part goal is to setup this
"avoiding saving" spÃ©cificities.

#+begin_src emacs-lisp
  (define-minor-mode sensitive-mode
    "For sensitive files like password lists.
  It disables backup creation and auto saving.

  With no argument, this command toggles the mode.
  Non-null prefix argument turns on the mode.
  Null prefix argument turns off the mode."
    ;; The initial value.
    :init-value nil
    ;; The indicator for the mode line.
    :lighter " Sensitive"
    ;; The minor mode bindings.
    :keymap nil

    (if (symbol-value sensitive-mode)
        (progn
          ;; disable backups
          (set (make-local-variable 'backup-inhibited) t)
          ;; disable auto-save
          (if auto-save-default
              (auto-save-mode -1)))
                                          ;resort to default value of backup-inhibited
      (kill-local-variable 'backup-inhibited)
                                          ;resort to default auto save setting
      (if auto-save-default
          (auto-save-mode 1))))


  (use-package auto-minor-mode
    :tags '("CORE" "SESSION" "MINOR")
    :config
    (add-to-list 'auto-minor-mode-alist '("\\.git/.*\\'" . sensitive-mode))
    (add-to-list 'auto-minor-mode-alist '("emacs\\.d/.*\\'" . sensitive-mode))
    (add-to-list 'auto-minor-mode-alist '("emacs\\.d/emms/.*\\'" . sensitive-mode))
    (add-to-list 'auto-minor-mode-alist '("Calendars/.*.org\\'" . sensitive-mode))
    (add-to-list 'auto-minor-mode-alist '("\\.gpg\\'" . sensitive-mode)))
#+end_src

** DONE Reload file at saved position
CLOSED: [2021-01-03 Sun 11:35]
:PROPERTIES:
:FROM:     https://github.com/munen/emacs.d
:ID:       f341b5fe-d3a5-4448-a0a3-b52bf991038f
:END:
When a file is large, it is easier to restart from the exact position where we stopped.
To do so, I am using the package =saveplace=

#+begin_src emacs-lisp
  (use-builtin saveplace
    :tags '("CORE" "SESSION")
    :init
    (setq save-place-file (format "%s/saveplace" user-emacs-directory))
    :config
    (save-place-mode 1))
#+end_src

* DONE Org-mode [100%]
:PROPERTIES:
:ID:       f4a3bf51-0188-4b4c-9866-ffb4d2725f0f
:END:
=Org-mode= is the core of how I am organizing tasks, writing documents, ...
While it is mainly a programming/writing language, it involves too many subparts and, therefore, has its own section.

** DONE Global
CLOSED: [2021-01-03 Sun 12:42]
:PROPERTIES:
:ID:       e5e911b9-26a5-4715-81a0-496180579d5f
:END:
This section defines the global configuration for =org-mode=.
First, it actually relies on =org-contrib=, especially for the bibtex support.
Then, it defines the fundamentals of the GTD pipeline by adding some TODO keywords:
  - =CANCELLED= for the task which is not necessary after a bit of thinking;
  - =BLOCKED= for tasks which are blocked by an external event;
  - =HOLD= for tasks which are manually put to sleep for whatever reason;
  - =RUNNING= for tasks which are running but doesn't requires any manual operation (i.e. process on the cluster)
  - =DELEGATED= for tasks which are delegated to someone else
  - =REMINDER= for long "tasks" (e.g., cancelling info, ...) or tasks which have been completed but requires the reception of an element (e.g., orders, ...x)

#+transclude: [[file:keytable_summary.org::org-additional-keybindings]]
#+transclude: [[file:keytable_summary.org::org-effort-keybindings]]

#+begin_src emacs-lisp
  (use-package org
    :tags '("ORG")
    :hook
    (org-after-todo-statistics . org-summary-todo)
    (before-save . org-agenda-generate-id)

    :bind (:map org-mode-map (
      <<keybindings-gen(table=org-additional-keybindings)>>
      <<keybindings-gen(table=org-effort-keybindings)>>
    ))

    :config

    ;; Global
    (setq org-startup-indented t
          org-startup-folded 'show3levels
          org-image-actual-width nil
          org-enforce-todo-dependencies t
          org-cycle-separator-lines 2
          org-blank-before-new-entry '((heading) (plain-list-item . auto))
          org-insert-heading-respect-content nil
          org-reverse-note-order nil
          org-show-following-heading t
          org-show-hierarchy-above t
          org-show-siblings '((default))
          org-id-method 'uuidgen
          org-deadline-warning-days 30
          org-table-export-default-format "orgtbl-to-csv"
          org-src-window-setup 'other-window
          org-clone-delete-id t
          org-cycle-include-plain-lists t
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-hide-emphasis-markers t
          org-latex-prefer-user-labels t
          org-global-properties '(("Effort_ALL" . "0:15 0:30 0:45 1:00 1:30 2:00")
                                  ("STYLE_ALL" . "habit"))

          ;; Todo part
          org-todo-keywords '((sequence "TODO(t)" "DELEGATED(e)" "RUNNING(r)" "CURRENT(s)" "BLOCKED(b)" "HOLD(h)" "REMINDER(R)" "ORDERED(o)" "|" "DONE(d)" "CANCELLED(c)"))

          ;; Priority definition
          org-highest-priority ?A
          org-lowest-priority ?E
          org-default-priority ?C

          ;; Archiving
          org-archive-mark-done t
          org-log-done 'time

          ;; Refiling
          org-refile-targets '((nil              . (:maxlevel . 6))
                               (org-agenda-files . (:maxlevel . 6)))
          org-completion-use-ido nil
          org-refile-use-outline-path 'file
          org-outline-path-complete-in-steps nil
          org-refile-allow-creating-parent-nodes 'confirm

          ;; Edition
          org-list-allow-alphabetical t
          org-highlight-latex-and-related '(latex)
          org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar"
          org-babel-results-keyword "results" ;; Display images directly in the buffer
          org-confirm-babel-evaluate nil
          org-startup-with-inline-images t
          org-return-follows-link t)

    ;; FIXME: for now this is annoying
    ;; ;; Support emphasis INSIDE words (source: https://stackoverflow.com/a/24540651)
    ;; (setcar org-emphasis-regexp-components " \t('\"{[:alpha:]")
    ;; (setcar (nthcdr 1 org-emphasis-regexp-components) "[:alpha:]- \t.,:!?;'\")}\\")
    ;; (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)

    (defun org-schedule-effort (&optional no-schedule)
      "Helper to schedule a task and set the effort at the same time if the start time is provided."
      (interactive)
      (save-excursion
        (org-back-to-heading t)
        (let* ((element         (org-element-at-point))
               (effort          (org-element-property :EFFORT element))
               (scheduled       (org-element-property :scheduled element))
               (ts-year-start   (org-element-property :year-start scheduled))
               (ts-month-start  (org-element-property :month-start scheduled))
               (ts-day-start    (org-element-property :day-start scheduled))
               (ts-hour-start   (org-element-property :hour-start scheduled))
               (ts-minute-start (org-element-property :minute-start scheduled))
               (ts-hour-end     (org-element-property :hour-end scheduled))
               (ts-minute-end   (org-element-property :minute-end scheduled))
               (duration        (if ts-hour-end
                                    (- (+ (* ts-hour-end 60) ts-minute-end)
                                       (+ (* ts-hour-start 60) ts-minute-start))
                                  0)))

          ;; Just to homogeneise everything
          (if (or (> duration 0) (and ts-hour-start effort))
              (progn
                ;; Effort has priority
                (unless effort
                  (when ts-hour-end
                    (setq effort (format "%d:%02d" (/ duration 60) (% duration 60)))))

                (org-schedule nil (concat
                                   (format "%s" ts-year-start)
                                   "-"
                                   (if (< ts-month-start 10)
                                       (concat "0" (format "%s" ts-month-start))
                                     (format "%s" ts-month-start))
                                   "-"
                                   (if (< ts-day-start 10)
                                       (concat "0" (format "%s" ts-day-start))
                                     (format "%s" ts-day-start))
                                   " "
                                   (if (< ts-hour-start 10)
                                       (concat "0" (format "%s" ts-hour-start))
                                     (format "%s" ts-hour-start))
                                   ":"
                                   (if (< ts-minute-start 10)
                                       (concat "0" (format "%s" ts-minute-start))
                                     (format "%s" ts-minute-start))
                                   (when effort
                                     (concat "+"effort)))))

            (when (not no-schedule)
              (org-schedule nil)
              (setq element         (org-element-at-point)
                    scheduled       (org-element-property :scheduled element)
                    ts-year-start   (org-element-property :year-start scheduled)
                    ts-month-start  (org-element-property :month-start scheduled)
                    ts-day-start    (org-element-property :day-start scheduled)
                    ts-hour-start   (org-element-property :hour-start scheduled)
                    ts-minute-start (org-element-property :minute-start scheduled)
                    ts-hour-end     (org-element-property :hour-end scheduled)
                    ts-minute-end   (org-element-property :minute-end scheduled))
              (setq duration        (if ts-hour-end (- (+ (* ts-hour-end 60) ts-minute-end)
                                                       (+ (* ts-hour-start 60) ts-minute-start))
                                        0))
              (when (and (> duration 0) (not effort))
                (message "%S" ts-hour-start)
                (setq effort (format "%d:%02d" (/ duration 60) (% duration 60))))))

          ;; Force a reset to the effort
          (when effort
            (org-set-effort nil effort)))))

    (defun org-set-effort-to-schedule ()
      "Update the timestamp based on the effort"
      (interactive)
      (org-set-effort)
      (org-schedule-effort t))

    ;; Enforce done marking to propagate
    (defun org-summary-todo (n-done n-not-done)
      "Switch entry to DONE when all subentries are done, to TODO otherwise."
      (let (org-log-done org-log-states)   ; turn off logging
        (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

    (defun html2org-clipboard ()
      "Convert clipboard contents from HTML to Org and then paste (yank)."
      (interactive)
      (kill-new
       (shell-command-to-string "xclip -o -t text/html | pandoc -f html -t json | pandoc -f json -t org | sed 's/ / /g'"))
      (yank))

    (defun generate-org-heading-ids ()
      "Generate unique IDs for all headings in the current Org Mode file."
      (interactive)
      (org-map-entries
       (lambda ()
         (org-id-get-create))
       nil 'file)
      (message "Generated IDs for all headings"))

    (defun org-checkbox-toggle-insertion-deletion ()
      "Toggle the insertion/deletion of a checkbox for an org-mode list item."
      (interactive)
      (save-excursion
        (beginning-of-line)
        (if (re-search-forward "^\\(\\s-*\\)- \\[\\([ X]\\)\\] \\(.*\\)" (line-end-position) t)
            (replace-match "\\1- \\3")
          (re-search-forward "^\\(\\s-*\\)- \\(.*\\)" (line-end-position) t)
          (replace-match "\\1- [ ] \\2"))))

    (defun org-agenda-generate-id ()
      "Helper to be used in a hook to generate org ids only if the buffer is part of the org-agenda files"
      (when (member (buffer-file-name) org-agenda-files)
        (generate-org-heading-ids)))
    )

  ;; Elpaca should wait org to be loaded
  (elpaca-wait)

  (use-package org-contrib)

  ;; Elpaca should wait org-contrib to be loaded
  (elpaca-wait)
#+end_src

** DONE Source [100%]
:PROPERTIES:
:ID:       211a6e02-f36f-4ddf-ae26-c8298d6c1aa7
:END:
The source visualisation of org files can be pretty raw.
This section provides configurations to help the navigation and the visualisation of such files.

*** DONE Pretty bullets and better navigation
CLOSED: [2021-01-03 Sun 12:55]
:PROPERTIES:
:ID:       bd6e2938-c534-48ea-9c43-95b89180394f
:END:
The key problem in my opinion is how are visualize the headings.
=org-superstar= provides a clearer indentation and visualisation of such headings.
This is fundamental to have an easy navigation in such files which can be really large (see the current one!).
=org-bulletproof= provides a more convenient way to switch between ordered and unordered list.
Combined with =org-superstar=, this leads to the ultimate org-mode list management

#+begin_src emacs-lisp
  (use-package org-superstar
    :tags '("ORG" "VISUAL")
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-headline-bullets-list '("â" "â" "â·" "â¸")
          org-superstar-item-bullet-alist '((?+ . ?â¢) (?* . ?â¤) (?- . ?â))))

  (use-package org-bulletproof
    :tags '("ORG" "HELPER")
    :config
    (global-org-bulletproof-mode +1))
#+end_src

*** DONE Helper for long table
CLOSED: [2025-01-18 Sat 12:09]

#+BEGIN_SRC emacs-lisp
  (use-package lte
    :tags '("ORG" "VISUAL")
    :hook ((org-mode markdown-mode) . lte-truncate-table-mode))
#+END_SRC

*** DONE Babel
CLOSED: [2021-01-03 Sun 13:10]
:PROPERTIES:
:ID:       67c64a61-b0e0-4010-8db0-ec0343189aca
:END:
Babel is the key feature for litterate programming in =org-mode=.
This section provides the configuration for babel by first configuring jupyter.

#+begin_src emacs-lisp
  (use-builtin ob ;; org-contrib
    :after (org-contrib)
    :tags '("ORG")
    :config

    ;; Define specific modes for specific tools
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    (add-to-list 'org-src-lang-modes '("dot"      . graphviz-dot))

    ;; Define the list of languages to load
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((emacs-lisp . t)
                                   (dot        . t)
                                   (ditaa      . t)
                                   (R          . t)
                                   (ruby       . t)
                                   (gnuplot    . t)
                                   (clojure    . t)
                                   (shell      . t)
                                   (ledger     . t)
                                   (org        . t)
                                   (plantuml   . t)
                                   (latex      . t)
                                   (python     . t)))          ; must be last

    ;; Predefine header considering
    (setq org-babel-default-header-args:sh      '((:results . "output replace"))
          org-babel-default-header-args:bash    '((:results . "output replace"))
          org-babel-default-header-args:shell   '((:results . "output replace"))
          org-babel-default-header-args:python  '((:async . "yes")
                                                  (:session . "py")))

    ;; Define pathes for some tools
    (setq org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar"
          org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar"))
#+end_src

*** DONE ID Generation
CLOSED: [2021-01-03 Sun 13:30]
:PROPERTIES:
:ID:       61bc32cc-124f-455f-b76d-ed3302875f96
:END:
I don't like how identifier are hashed in org-mode.
To fix this, =org-unique-id= aims to provide an equivalent to the "auctex/reftex" label generation module but for org-mode.

#+begin_src emacs-lisp
  (use-package org-unique-id
    :after org
    :ensure (org-unique-id :type git
                             :host github
                             :repo "Phundrak/org-unique-id")
    :init (add-hook 'before-save-hook #'org-unique-id-maybe))
#+end_src

*** DONE Checklist
CLOSED: [2021-01-03 Sun 13:55]
:PROPERTIES:
:ID:       3e1c6700-7b15-4a2d-a3db-47f7db183870
:END:
I am using checklist regularly.
Consequently, adding its support in org-mode is a big advantage.
To do so, I am relying the package =org-checklist= which is provided by =org-contrib=.

#+BEGIN_SRC emacs-lisp
    (use-builtin org-checklist ;; org-contrib
      :tags '("ORG")
      )
#+END_SRC

*** DONE Tranclusion
CLOSED: [2023-10-27 Fri 09:40]
:PROPERTIES:
:ID:       4e59c7e7-3fba-42d0-a5d9-78e38738972b
:END:
=org-transclusion= provide a fancy interface to include portion of other files into an org file.

#+transclude: [[file:keytable_summary.org::org-transclusion-keybindings]]

#+begin_src emacs-lisp
  (use-package org-transclusion
    :tags '("ORG")
    :after org
    :bind (
      <<keybindings-gen(table=org-transclusion-keybindings)>>
    ))
#+end_src

*** DONE Helpers
CLOSED: [2021-02-27 Sat 08:38]
:PROPERTIES:
:ID:       b626be6f-0b70-4f2b-b921-2f4368f60e13
:END:
I am using =org-menu= to provide a helper menu to edit org files.
For whatever reason, it is required to *explicitly* configure =transient=.

#+transclude: [[file:keytable_summary.org::org-menu-keybindings]]

#+BEGIN_SRC emacs-lisp
  (use-package org-menu
    :ensure (org-menu :type git :host github :repo "sheijk/org-menu")
    :tags '("ORG")
    :bind (:map org-mode-map (
      <<keybindings-gen(table=org-menu-keybindings)>>
    )))
#+END_SRC

** DONE Export [100%]
:PROPERTIES:
:ID:       f3eefeb0-0384-4ab3-91f9-bcdc66e347b1
:END:
This section focuses on configuring the export of org files to some document format.

*** DONE Global
CLOSED: [2021-07-19 Mon 09:24]
:PROPERTIES:
:ID:       41aa63c5-77df-4789-b638-63d42025b9aa
:END:
This part contains some extra configurations which allows to write clean org documents while still having an efficient rendering.

#+begin_src emacs-lisp
  (use-builtin ox-extra ;; org-contrib
    :after (org-contrib)
    :tags '("ORG")
    :after ox
    :config
    (ox-extras-activate '(ignore-headlines latex-header-blocks)))
#+end_src

*** DONE HTML
CLOSED: [2021-01-03 Sun 13:44]
:PROPERTIES:
:ID:       fd467ce8-4163-4a55-b9e9-30d7fe4f9d6b
:END:
In this section, we configure the export for HTML main files and for presentation using =reveal.js=.
Both configurations relies on =htmlize= to deal with the coloring part.
We also defines additional link to support audios and videos.

#+begin_src emacs-lisp
  (use-package htmlize
    :tags '("ORG")
    )

  (use-builtin ox-html ;; org-contrib
    :after ox
    :requires (htmlize)
    :tags '("ORG")
    :init
    (defun endless/export-audio-link (path desc format)
      "Export org audio links to hmtl."
      (cl-case format
        (html (format "<audio src=\"%s\" controls>%s</audio>" path (or desc "")))))

    (defun endless/export-video-link (path desc format)
      "Export org video links to hmtl."
      (cl-case format
        (html (format "<video controls src=\"%s\">%s</video>" path (or desc "")))))

    :config
    (setq org-html-xml-declaration '(("html" . "")
                                     ("was-html" . "<?xml version=\"1.0\" encoding=\"%s\"?>")
                                     ("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>"))
          org-export-html-inline-images t
          org-export-with-sub-superscripts nil
          org-export-html-style-extra "<link rel=\"stylesheet\" href=\"org.css\" type=\"text/css\" />"
          org-export-html-style-include-default nil
          org-export-htmlize-output-type 'css ; Do not generate internal css formatting for HTML exports
          )

    (org-link-set-parameters "video" :export #'endless/export-video-link)
    (org-link-set-parameters "audio" :export #'endless/export-audio-link)

    (add-to-list 'org-file-apps '("\\.x?html?\\'" . "/usr/bin/firefox %s")))

  (use-package org-re-reveal
    :tags '("ORG")
    )

  (use-package org-re-reveal-citeproc
    :tags '("ORG")
    :init
    (add-to-list 'org-export-filter-paragraph-functions
                 #'org-re-reveal-citeproc-filter-cite))
#+end_src

*** DONE Latex
CLOSED: [2021-01-03 Sun 13:46]
:PROPERTIES:
:ID:       af47aae7-9602-4d80-81fa-15677006f1ec
:END:
In this section, the export for latex and beamer are configured.
The key part is that we are using minted to deal with the source.
Therefore, we have to modify the call to the =latexmk= command (which is therefore required).

#+begin_src emacs-lisp
  (use-builtin ox-latex ;; org-contrib
    :after (org-contrib)
    :tags '("ORG")
    :after ox
    :config
    (setq org-latex-listings t
          org-export-with-LaTeX-fragments t
          org-cite-export-processors '((latex biblatex) (t csl))
          org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))

    (add-to-list 'org-latex-classes
                 '("myarticle"
                   "\\documentclass{myarticle}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))

  (use-builtin ox-beamer ;; org-contrib
    :after (org-contrib)
    :tags '("ORG")
    :after ox
    :config
    (defun my-beamer-bold (contents backend info)
      (when (eq backend 'beamer)
        (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\textbf" contents)))
    (add-to-list 'org-export-filter-bold-functions 'my-beamer-bold))

  (use-builtin ox-bibtex ;; org-contrib
    :after (org-contrib)
    :tags '("ORG")
    :after ox
    :defer t)
#+end_src

*** DONE Markdown
CLOSED: [2021-01-03 Sun 13:47]
:PROPERTIES:
:ID:       f4dc1f12-4d7a-46bb-a62c-4f0d8f62a983
:END:
I am using mainly the Github markdown format.
Therefore, I use the package =ox-gfm=

#+begin_src emacs-lisp
  (use-package ox-gfm
    :ensure (:version (lambda (_) "1.0"))
    :tags '("ORG")
    :after ox)
#+end_src

*** DONE SSH
CLOSED: [2024-02-19 Mon 13:55]
:PROPERTIES:
:ID:       c2bcd9e3-d65a-498a-b289-08dd4873a724
:END:
There is also a nice way to have the SSH config file using org-mode and then export it.

#+begin_src emacs-lisp
  (use-package ox-ssh
      :tags '("ORG" "SSH")
      :after ox)
#+end_src

** DONE Accessing
CLOSED: [2021-01-03 Sun 15:24]
:PROPERTIES:
:ID:       270ed4e5-9e6e-435e-a761-681c372a2283
:END:
This section configures packages to access information from the org files.
=org-ql= is providing commands to query the org files in a SQL manner.
=org-protocol= is a package of =org-contrib= which provides helper to use emacsclient to access to org files.
This package is mainly use to bookmark webpages from the web browser.

#+begin_src emacs-lisp
  (use-package org-ql
    :tags '("ORG")
    :commands (org-ql-search org-ql-view org-ql-view-recent-items))

  (use-builtin org-protocol ;; org-contrib
    :after (org-contrib)
    :tags '("ORG")
    )
#+end_src

** DONE Capturing [100%]
CLOSED: [2021-01-04 Mon 08:33]
:PROPERTIES:
:ID:       9935aa4d-a3b8-4694-878d-0b392ce815ac
:END:
I use the capturing mechanism provded by org mode to add information for further investigations.
=doct= package is used to have a more human-friendly way a describing the templates.
I also use capturing mechanism to save recipes and some interesting websites.

#+begin_src emacs-lisp
  (use-package doct
    :tags '("ORG" "CAPTURE" "DESKTOP")
    :commands (doct))

  (use-builtin org-capture ;; org-contrib
    :after (org-contrib)
    :tags '("ORG" "CAPTURE" "DESKTOP")
    :if (file-directory-p cloud-org-root-dir)
    :commands (org-capture)
    :config
    (setq org-capture-templates
          (doct `(
                  ("Calendar"
                   :keys "c"
                   :type entry
                   :file ,(format "%s/calendars/work.org" user-emacs-directory)
                   :template-file ,(format "%s/third_parties/org-capture-templates/calendar.org" user-emacs-directory))

                  ("TODO"
                   :keys "t"
                   :type entry
                   :file ,(concat cloud-org-root-dir "todo/todo.org")
                   :headline "To sort"
                   :template-file ,(format "%s/third_parties/org-capture-templates/default.org" user-emacs-directory)
                   :empty-lines-before 1)

                  ("Mail"
                   :keys "m"
                   :type entry
                   :file ,(concat cloud-org-root-dir "todo/todo.org")
                   :headline "Mailing"
                   :template-file ,(format "%s/third_parties/org-capture-templates/mail.org" user-emacs-directory))

                  ("RSS"
                   :keys "r"
                   :type entry
                   :file ,(concat cloud-org-root-dir "todo/todo.org")
                   :headline "To sort"
                   :template-file ,(format "%s/third_parties/org-capture-templates/rss.org" user-emacs-directory))

                  ("Chat (Slack, Telega)"
                   :keys "C"
                   :type entry
                   :file ,(concat cloud-org-root-dir "todo/todo.org")
                   :headline "To Sort"
                   :template-file ,(format "%s/third_parties/org-capture-templates/chat.org" user-emacs-directory)))))
    )
#+end_src

*** DONE Cooking
CLOSED: [2021-01-04 Mon 08:33]
:PROPERTIES:
:ID:       c48eea1e-144a-409b-bb48-dac9a1251997
:END:
=org-chef= provides an easy way to save recipes.
It supports multiple website so its configuration consists only of providing the template.

#+begin_src emacs-lisp
  (use-package org-chef
    :tags '("ORG" "CAPTURE" "DESKTOP" "CONNECTED")
    :if (file-directory-p cloud-org-root-dir)
    :after (org-capture)
    :config
    (setq org-chef-prefer-json-ld t)

    (setq org-capture-templates
          (doct-add-to org-capture-templates
                       `(("Cookbook"
                          :keys "o"
                          :type entry
                          :file ,(concat cloud-org-root-dir "perso/recipes.org")
                          :template ("* %^{Description}"
                                     "%(org-chef-get-recipe-from-url)")
                          :empty-lines 1))
                       'append)))
#+end_src

*** DONE ORG/Web tools
CLOSED: [2021-01-04 Mon 08:33]
:PROPERTIES:
:ID:       f1eb31b9-45a3-4d6c-ac75-3c74d7c94e9c
:END:
=org-web-tools= is a nice package which allows to sniff a webpage and convert it into org-mode
format. This is really useful to homogeneise documentation.

#+begin_src emacs-lisp
  (use-package org-web-tools
    :after (org)
    :tags '("ORG" "CAPTURE" "DESKTOP" "CONNECTED")
    )
#+end_src

** DONE Visual
CLOSED: [2021-12-10 Fri 14:17]
:PROPERTIES:
:ID:       9414da87-3f15-4007-bfd0-ef1a9edad36d
:END:
The visual configuration for =org-mode= is based on =org-modern=.
The main tweaks are that some specific colors are defined for some specific keywords and icons are associated to some categories.
I also introduced =org-tree-slide= to enjoy quick presentation
=org-appear= is used to be able to edit more easily the org-mode markups

#+transclude: [[file:keytable_summary.org::org-tree-slide-keybindings]]

#+begin_src emacs-lisp
  (use-package org-modern
    :tags '("VISUAL" "ORG")

    :custom
    (org-modern-table nil)
    (org-modern-tag nil)

    :init

    ;; Org styling, hide markup etc.
    (setq org-hide-emphasis-markers t
          org-pretty-entities t
          org-ellipsis "â¦")

    ;; Agenda styling
    (setq org-agenda-block-separator ?â
          org-agenda-time-grid '((daily today require-timed)
                                 (800 1000 1200 1400 1600 1800 2000)
                                 " âââââ " "âââââââââââââââ")
          org-agenda-current-time-string
          "â­  now âââââââââââââââââââââââââââââââââââââââââââââââââ")

    ;; Faces
    (setq org-modern-todo-faces
          '(("TODO"          :background "red1"          :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("CURRENT"       :background "lightgray"     :foreground "black" :weight bold :box (:line-width 2 :style released-button))

            ;; I can't really do anything here!
            ("BLOCKED"       :background "orange"        :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("HOLD"          :background "orange"        :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("RUNNING"       :background "light green"   :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("DELEGATED"     :background "gold"          :foreground "black" :weight bold :box (:line-width 2 :style released-button))

            ;; Done but not complete
            ("CANCELLED"     :background "lime green"    :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("REMINDER"      :background "light green"   :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("ORDERED"       :background "light green"   :foreground "black" :weight bold :box (:line-width 2 :style released-button))

            ;; Done and complete
            ("DONE"          :background "forest green"  :foreground "lightgray" :weight bold :box (:line-width 2 :style released-button))
            ))

    (with-eval-after-load 'org (global-org-modern-mode)))

  (use-package org-appear
    :tags '("VISUAL" "ORG")
    :custom
    (org-appear-autolinks t)
    (org-appear-autosubmarkers t)
    (org-appear-autoentities t)
    (org-appear-autokeywords t)
    :hook (org-mode . org-appear-mode))

  (use-package org-rainbow-tags
    :tags '("VISUAL" "ORG")
    :ensure (:host github :repo "KaratasFurkan/org-rainbow-tags")
    :custom
    (org-rainbow-tags-hash-start-index 10)
    (org-rainbow-tags-extra-face-attributes
     ;; Default is '(:weight 'bold)
     '(:inverse-video t :box t :weight 'bold))
    :hook
    (org-mode . org-rainbow-tags-mode)
    (org-agenda-finalize . org-rainbow-tags-mode))


  (use-package org-tree-slide
    :tags '("VISUAL" "ORG" "PRESENTATION")
    :bind ((:map org-tree-slide-mode-map
      <<keybindings-gen(table=org-tree-slide-keybindings)>>
    )))
#+end_src

** DONE Agenda [100%]
:PROPERTIES:
:ID:       616ac52b-6a64-4042-bb85-2a4acecd4a7f
:END:
In this section, I configure the agenda part of org-mode.
It is my main source of visualizing the todo tasks.
I rely on the baseline =org-agenda= package and on =org-super-agenda= for a better visualisation.

*** DONE Baseline configuration
CLOSED: [2021-01-03 Sun 14:21]
:PROPERTIES:
:ID:       f51eb9f5-db6e-4631-b117-b19e8ffb3f8b
:END:
The baseline configuration is fairly standard.
The only important bits are:
  - the todo file is set to =~/pCloudDrive/org/todo/todo.org=
  - some icons are associated to some categories

#+transclude: [[file:keytable_summary.org::org-agenda-hydra-entry-keybindings]]
#+transclude: [[file:keytable_summary.org::org-agenda-mode-hydra-keybindings]]

#+begin_src emacs-lisp
  (use-builtin org-agenda ;; org-contrib
    :tags '("ORG" "USER" "CONNECTED")
    :if (file-directory-p cloud-org-root-dir)
    :commands (org-agenda)
    :init
    (defun color-org-header (tag backcolor)
      "Highlight the line in org-agenda in the given BACKCOLOR if TAG is present on the line."
      (interactive)
      (goto-char (point-min))
      (while (re-search-forward tag nil t)
        (add-text-properties (line-beginning-position) (+ (line-end-position) 1)
                             `(face (:background, backcolor)))))

    :mode-hydra
    (org-agenda-mode
     (:color blue)
     ("Time window" (
       <<hydra-keybindings-gen(table=org-agenda-mode-hydra-keybindings)>>
     )))

    :config

    ;; Baseline configuration
    (setq org-deadline-warning-days 7
          org-agenda-include-diary t
          org-agenda-start-with-log-mode t
          org-timeline-show-empty-dates t
          org-agenda-span 'day
          org-agenda-prefix-format '((agenda    . "â¢ %?-2 i %-12.12:t ")
                                     (timeline  . "  %s")
                                     (todo      . "%?-2 i %-12:c  ")
                                     (tags      . "%?-2 i %-30:c  ")
                                     (search    . "%?-2 i %-12.12:c  "))
          org-agenda-overriding-columns-format "%TODO %7EFFORT %10CLOCKSUM %PRIORITY     %100ITEM 100%TAGS"
          org-agenda-custom-commands '(("c" . "My Custom Agendas")
                                       ("cu" "Unscheduled TODO"
                                        ((todo ""
                                               ((org-agenda-overriding-header "\nUnscheduled TODO")
                                                (org-agenda-skip-function
                                                 '(org-agenda-skip-entry-if
                                                   'scheduled
                                                   'regexp ".*\[[0-9]*%\]\\([ ]*[:].*[:]\\)\?$")))))
                                        nil
                                        nil)
                                       ("j" "Planning Table"
                                        agenda ""
                                        ((org-agenda-overriding-header "")
                                         (org-agenda-span 1)
                                         (org-agenda-use-time-grid nil)
                                         (org-agenda-view-columns-initially t)
                                         (org-columns-default-format-for-agenda
                                          "%11AGENDA_TIME(When) %4TODO(Type) %40ITEM(What) %5AGENDA_DURATION(Takes){:}")
                                         ;; do not show wardings, overdue and overscheduled
                                         (org-scheduled-past-days 0)
                                         (org-deadline-past-days 0)
                                         (org-deadline-warning-days 0)

                                         ;; skip finished entries
                                         (org-agenda-skip-deadline-if-done t)
                                         (org-agenda-skip-scheduled-if-done t))))

          ;; Define the diary comment syntax as elisp
          diary-comment-start ";;"
          diary-comment-end ""))

  (use-package suomalainen-kalenteri
    :tags '("DIARY" "USER" "CONNECTED")
    :config
    (setq calendar-holidays suomalainen-kalenteri)) ;; FIXME: should be more flexible than this
#+end_src

*** DONE Super agenda
CLOSED: [2021-01-03 Sun 14:22]
:PROPERTIES:
:ID:       1fb922cd-0349-4495-9d15-615628f9eb6b
:END:
In this section, I confugre =org-super-agenda=.
As I have my own way of being organized, I redefined completely the groups.

#+begin_src emacs-lisp
  (use-package org-super-agenda
    :tags '("ORG")
    :config
    ;;
    (org-super-agenda-mode t)

    ;; Create groups
    (setq org-super-agenda-groups
          '(
            (:name "Today"  ; Optionally specify section name
                   :time-grid t)  ; Items that appear on the time grid

            ;; Important thing
            (:name "Important"
                   :priority "A")

            ;; Important thing
            (:name "Important but unscheduled"
                   :priority "A"
                   :scheduled nil)

            ;; CD part
            (:discard (:and (:category "RELEASE" :tag "noexport")))
            (:discard (:and (:category "RELEASE" :todo "CANCELLED")))
            (:name "Today's releases"
                   :and (:todo "RELEASE" :date today)
                   :order 8)

            (:name "Past releases"
                   :and (:category "RELEASE" :todo "TODO")
                   :order 8)

            (:name "Ordered Releases"
                   :and (:category "RELEASE" :todo "ORDERED" :scheduled t)
                   :order 9)

            ;; Some standby thingy
            (:name "In process"
                   :todo ("RUNNING" "DELEGATED")
                   :order 7)

            ;; Deadlines
            (:name "Overdue"
                   :deadline past
                   :order 3)
            (:name "Due Today"
                   :deadline today
                   :order 3)
            (:name "Due Soon"
                   :deadline future
                   :order 4)

            ;; Schedule
            (:name "Scheduled Today"
                   :and (:scheduled today :todo "TODO")
                   :order 1)
            (:name "Scheduled, past but opened"
                   :and (:scheduled past  :todo "TODO")
                   :order 5)
            (:name "Scheduled in the next couple of days"
                   :and (:scheduled future :todo "TODO")
                   :order 6)

            ;; Ignore anything which doesn't have a todo "keyword"
            (:discard (:todo nil))
            )))
#+end_src

*** DONE Sidebar
CLOSED: [2022-02-04 Fri 09:10]
:PROPERTIES:
:ID:       2ba51cac-ffce-4821-ba46-6a9dac6343eb
:END:
With =org-sidebar= I have easily access to the todos of the *current* org file.

#+begin_src emacs-lisp
  (use-package org-sidebar
    :tags '("ORG" "VISUAL")
    )
#+end_src

** DONE Encryption
CLOSED: [2023-06-08 Thu 19:02]
:PROPERTIES:
:ID:       6d05e261-604b-4c31-a74a-4723a864e04d
:END:
=org-crypt= provides a nice to encrypt part of an org file.
This is convenient as it provides a way to understand what the content should be about without showing its actual value.

#+begin_src emacs-lisp
  (use-builtin org-crypt
    :tags '("CORE" "ENCRYPTION")
    :after org
    :config
    (org-crypt-use-before-save-magic))
#+end_src

* DONE Project Management / Organization [100%]
:PROPERTIES:
:ID:       a6aa596d-7dc5-4e9d-b8e2-a7c9d458f904
:END:
** DONE GTD [100%]
:PROPERTIES:
:ID:       1fdd72ce-d63d-4e48-98e2-651f38781c5c
:END:
Getting Things Done (GTD) is my main way of dealing with tasks.
My main source of inspiration is proposed in http://doc.norang.ca/org-mode.html but I deviate from it on multiple aspects.

*** DONE Clock management
CLOSED: [2021-01-03 Sun 14:42]
:PROPERTIES:
:FROM:     https://sachachua.com/blog/2007/12/clocking-time-with-emacs-org/
:ID:       a216293e-bd3f-49b4-b9a1-d8b450f8fecc
:END:
Based on Sacha Chua blog post, I use the following configuration to clock-in/clock-out.
It deviates from Sacha's blog solely on the states; as I am using my own org states.

#+transclude: [[file:keytable_summary.org::org-mru-clock-keybindings]]

#+begin_src emacs-lisp
  (use-package org-mru-clock
    :tags '("ORG")
    :bind* (
       <<keybindings-gen(table=org-mru-clock-keybindings)>>
    )
    :init
    (setq org-mru-clock-how-many 100
          org-mru-clock-keep-formatting t
          org-clock-persist t)

    (defun org-clock-in-advice ()
      "Set this task's status to 'CURRENT'."
      (org-todo "CURRENT"))
    (advice-add 'org-clock-in :after #'org-clock-in-advice)

    (defun sacha/org-clock-in-if-starting ()
      "Clock in when the task is marked CURRENT."
      (when (member (buffer-file-name)
                    (mapcar 'file-truename org-agenda-files))
        (when (and (string= org-state "CURRENT")
                   (not (string= org-last-state org-state)))
          (org-clock-in))))

    (defun sacha/org-clock-out-if-waiting-or-pausing ()
      "Clock in when the task is marked STARTED."
      (when (member (buffer-file-name)
                    (mapcar 'file-truename org-agenda-files))
        (when (and (or (string= org-state "TODO")
                       (string= org-state "HOLD")
                       (string= org-state "BLOCKED")
                       (string= org-state "RUNNING"))
                   (not (string= org-last-state org-state))
                   (org-clock-is-active))
          (org-clock-out))))

    :hook
    (org-after-todo-state-change . sacha/org-clock-out-if-waiting-or-pausing)
    (org-after-todo-state-change . sacha/org-clock-in-if-starting)

    :config
    (org-clock-persistence-insinuate))

  (use-package org-clock-convenience
    :tags '("ORG")
    :bind (:map org-agenda-mode-map
                ("<S-up>" . org-clock-convenience-timestamp-up)
                ("<S-down>" . org-clock-convenience-timestamp-down)))
#+end_src

*** DONE Archiving
CLOSED: [2021-01-03 Sun 14:44]
:PROPERTIES:
:FROM:     https://github.com/daviderestivo/galactic-emacs/blob/master/lisp/org-archive-subtree.el
:ID:       4084f06f-9f6e-4845-83b4-6a6db25871f9
:END:
I prefer to keep the tree structure.
This is why I use this configuration.

#+begin_src emacs-lisp
  (use-builtin org-archive
    :after (org-contrib)
    :tags '("ORG")
    :config
    (setq org-archive-default-command 'org-archive-subtree)

    (defun org-archive-fix-hierarchy-subtree ()
      ""
      (let* ((fix-archive-p (and (not current-prefix-arg)
                                 (not (use-region-p))))
             (afile  (car (org-archive--compute-location
                           (or (org-entry-get nil "ARCHIVE" 'inherit) org-archive-location))))
             (buffer (or (find-buffer-visiting afile) (find-file-noselect afile))))
        ad-do-it
        (when fix-archive-p
          (with-current-buffer buffer
            (goto-char (point-max))
            (while (org-up-heading-safe))
            (let* ((olpath (org-entry-get (point) "ARCHIVE_OLPATH"))
                   (path (and olpath (split-string olpath "/")))
                   (level 1)
                   tree-text)
              (when olpath
                (org-mark-subtree)
                (setq tree-text (buffer-substring (region-beginning) (region-end)))
                (let (this-command) (org-cut-subtree))
                (goto-char (point-min))
                (save-restriction
                  (widen)
                  (-each path
                    (lambda (heading)
                      (if (re-search-forward
                           (rx-to-string
                            `(: bol (repeat ,level "*") (1+ " ") ,heading)) nil t)
                          (org-narrow-to-subtree)
                        (goto-char (point-max))
                        (unless (looking-at "^")
                          (insert "\n"))
                        (insert (make-string level ?*)
                                " "
                                heading
                                "\n"))
                      (cl-incf level)))
                  (widen)
                  (org-end-of-subtree t t)
                  (org-paste-subtree level tree-text))))))))
    (advice-add 'org-archive-subtree :around #'org-archive-fix-hierarchy-subtree))
#+end_src

**** Cleaning helper
:PROPERTIES:
:FROM:     https://www.emacswiki.org/emacs/org-extension.el and https://stackoverflow.com/questions/6997387/how-to-archive-all-the-done-tasks-using-a-single-command
:ID:       1308761d-9fac-4c56-9bb0-df8144e633bc
:END:

#+begin_src emacs-lisp
  (defun org-archive-done-tasks-subtree ()
    "Archive done tasks for the current subtree."
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
     "/+DONE" 'tree))

  (defun org-archive-all-done-item ()
    "Archive all item that have with prefix DONE."
    (interactive)
    (save-excursion
      (outline-show-all)
      (goto-char (point-min))
      (if (search-forward-regexp "^[\\*]+ \\(DONE\\|CANCELLED\\)" nil t)
          (progn
            (goto-char (point-min))
            (while (search-forward-regexp "^[\\*]+ \\(DONE\\|CANCELLED\\)" nil t)
              (org-advertized-archive-subtree))
            (message "Archive finished"))
        (message "No need to archive"))))

  (defun org-clean-done-item ()
    "Delete all item that have with prefix DONE."
    (interactive)
    (save-excursion
      (outline-show-all)
      (goto-char (point-min))
      (if (search-forward-regexp "^[\\*]+ \\(DONE\\|CANCELLED\\)" nil t)
          (progn
            (goto-char (point-min))
            (while (search-forward-regexp "^[\\*]+ \\(DONE\\|CANCELLED\\)" nil t)
              (org-cut-subtree))
            (message "Cleaning DONE tasks finished"))
        (message "No need to clean"))))
#+end_src

*** DONE Improving dependencies
CLOSED: [2022-10-09 Sun 10:35]
:PROPERTIES:
:FROM:     https://qua.name/mrb/an-org-babel-based-emacs-configuration
:ID:       41ff0ed5-b684-4c97-95c6-8239b04b7c35
:END:
=org-edna= provides a more flexible way of imposing dependencies between tasks.
Configuration remains minimal for now

#+begin_src emacs-lisp
  (use-package org-edna
    :tags '("ORG")
    :diminish
    :after org
    :config
    (org-edna-mode))
#+end_src

* DONE Document [100%]
:PROPERTIES:
:ID:       844f15d2-2912-492f-9cd5-23479d97b9cf
:END:
** DONE Formatting for better reading
CLOSED: [2023-07-22 Sat 23:18]
:PROPERTIES:
:ID:       6425b85d-cb2a-4114-8610-3839a59afb31
:END:
=olivetti= provides a nice way to read document without distraction.

#+begin_src emacs-lisp
  (use-package olivetti
    :preface
    ;; Body width
    (setq fk/olivetti-body-width-default 120)
    (setq fk/olivetti-body-width-large 180)
    (setq olivetti-body-width fk/olivetti-body-width-default)
    ;; Borders
    (setq olivetti-enable-borders t)

    :custom
    (olivetti-enable-visual-line-mode nil)
    (olivetti-window-local t)

    :bind
    ("C-1" . fk/smart-C-x-1)

    :hook
    (Info-mode . olivetti-mode)
    (ewww . olivetti-mode)

    :config
    (defun fk/smart-C-x-1 ()
      (interactive)
      (if (= (count-windows) 1)
          (if (and global-olivetti-mode
                   (= olivetti-body-width fk/olivetti-body-width-default))
              (progn
                (setq olivetti-body-width fk/olivetti-body-width-large)
                (olivetti-mode))
            (call-interactively 'global-olivetti-mode)
            (setq olivetti-body-width fk/olivetti-body-width-default))
        (delete-other-windows))))
#+end_src

** DONE PDF
CLOSED: [2023-05-16 Tue 21:57]
:PROPERTIES:
:ID:       fa134aa5-cc9b-4902-93ea-1e248708520f
:END:
Visualizing PDF files in Emacs is quite useful.
I am using =pdf-tools= which provides a lot of functionalities.
The configuration consists mainly of providing proper keyboard based controls using =hydra=.
I am also using =pdf-view-restore= to keep track of where I was before closing emacs.

#+transclude: [[file:keytable_summary.org::PDF]] :only-contents

#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure (pdf-tools :type git :host github :repo "vedang/pdf-tools")
    :tags '("DOCUMENT" "DESKTOP")
    :functions
    (pdf-history-backward
     pdf-history-forward
     pdf-links-action-perfom
     pdf-links-isearch-link
     pdf-view-enlarge
     pdf-view-shrink
     pdf-view-scale-reset
     pdf-view-fit-height-to-window
     pdf-view-fit-width-to-window
     pdf-view-fit-page-to-window
     pdf-view-next-page-command
     pdf-view-previous-page-command
     pdf-view-dark-minor-mode)

    :hook
    (pdf-view-mode . (lambda ()
                       (pdf-misc-size-indication-minor-mode)
                       (pdf-links-minor-mode)
                       (pdf-isearch-minor-mode)
                       (cua-mode 0)))

    :bind (:map pdf-view-mode-map
      <<keybindings-gen(table=pdf-tools-keybindings)>>
    )

    :pretty-hydra
    ((:color blue :hint nil)
     ("Move" (
        <<hydra-keybindings-gen-with-opt(table=pdf-tools-hydra-move-keybindings)>>
      )

      "History" (
        <<hydra-keybindings-gen-with-opt(table=pdf-tools-hydra-history-keybindings)>>
      )

      "Scale/Fit" (
        <<hydra-keybindings-gen-with-opt(table=pdf-tools-hydra-scale-keybindings)>>
      )

      "Annotations" (
        <<hydra-keybindings-gen(table=pdf-tools-hydra-annotations-keybindings)>>
      )

      "Search/Link" (
        <<hydra-keybindings-gen(table=pdf-tools-hydra-search-keybindings)>>
      )

      "Other" (
        <<hydra-keybindings-gen(table=pdf-tools-hydra-diverse-keybindings)>>
      )))

    :magic ("%PDF" . pdf-view-mode)
    :custom
    (pdf-annot-default-annotation-properties `((t           (label . ,user-full-name))
                                               (text        (icon  . "Note")
                                                            (color . "#ff0000"))
                                               (highlight   (color . "green1"))
                                               (squiggly    (color . "orange"))
                                               (strike-out  (color . "red"))
                                               (underline   (color . "blue"))))
    :config
    ;; Install what need to be installed !
    (pdf-tools-install t t t)

    ;; open pdfs scaled to fit page
    (setq-default pdf-view-display-size 'fit-page)

    ;; automatically annotate highlights
    (setq pdf-annot-activate-created-annotations t)

    ;; more fine-grained zooming
    (setq pdf-view-resize-factor 1.1))

  (use-package pdf-view-restore
    :after pdf-tools
    :tags '("DOCUMENT" "DESKTOP")
    :hook
    (pdf-view-mode-hook . pdf-view-restore-mode))

  (when (executable-find "diffpdf")
    (use-package diffpdf
      :tags '("DOCUMENT" "DESKTOP")
      ))
#+end_src

*** DONE Grepping
CLOSED: [2021-03-01 Mon 09:45]
:PROPERTIES:
:ID:       cd1fcfdb-5c20-4f9d-ae59-f99b20b70891
:END:
I use =pdfgrep= to be able to search inside the pdf document.

#+begin_src emacs-lisp
  (when (executable-find "pdfgrep")
    (use-package pdfgrep
      :tags '("DOCUMENT" "DESKTOP")
      :config
      (pdfgrep-mode)))
#+end_src

*** DONE Connection with org-mode
CLOSED: [2021-03-01 Mon 09:47]
:PROPERTIES:
:ID:       cdf2e6c3-cda2-4e4f-a7bf-3b2845bc573c
:END:
PDF files and org-mode are strongly related.
I use =org-pdftools= to add an org link type for =pdftools=.

#+BEGIN_SRC emacs-lisp
  (use-package org-pdftools
    :tags '("DOCUMENT" "DESKTOP" "ORG")
    :hook (org-mode . org-pdftools-setup-link))
#+END_SRC

** DONE Epub
CLOSED: [2021-02-09 Tue 16:15]
:PROPERTIES:
:ID:       e199a7b0-2f71-4b36-b2aa-b9c5ebb8ffc6
:END:
I am using =nov= to read epub files.

#+BEGIN_SRC emacs-lisp
  (use-package nov
    :ensure (nov :depth nil)
    :tags '("DESKTOP" "DOCUMENT")
    :commands (nov-mode)
    :custom
    (nov-text-width t)
    :mode ((rx ".epub" eos) . nov-mode)
    :config
    (add-hook 'nov-mode-hook 'olivetti-mode))
#+END_SRC

* DONE Notes taking & academic organizing [100%]
:PROPERTIES:
:ID:       17c49933-86c7-477e-a7a2-ded9e09c313c
:END:
My note taking life is split in 2 categories: global note taking and bibliography/reference management.
The workflow is based on =org-roam= and uses additional packages to enhance the experience.

** DONE Spelling
CLOSED: [2024-06-04 Tue 15:56]
:PROPERTIES:
:ID:       edd07a3e-6602-480d-9748-2aeedd485feb
:END:
I am using ~jinx~ as it supports nicely English and Finnish.

#+begin_src emacs-lisp
  (use-package jinx
    :tags '("CORE" "WRITING" "HELPERS")
    :hook (emacs-startup . global-jinx-mode)
    :bind (("M-$"   . jinx-correct)
           ("C-M-$" . jinx-languages)))
#+end_src

** DONE Fundamentals
CLOSED: [2022-02-10 Thu 07:08]
:PROPERTIES:
:ID:       26023bd0-4a96-4240-abbe-819ff08b312e
:END:
In this section, the global note taking part is configured.
It relies on three packages:
=org-roam= which is the core of the workflow,
=org-roam-protocol= to enhance the navigation,
and =org-roam-ui= for a better navigation.
=vulpea= is used to bridge =org-roam= and =org-agenda=.

*** DONE org-roam part
CLOSED: [2022-02-10 Thu 07:04]
:PROPERTIES:
:ID:       6aaa332d-dc7d-4abf-a4fb-0e2ff5f322f1
:END:
#+transclude: [[file:keytable_summary.org::Org-Roam]] :only-contents

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure (:host github :repo "org-roam/org-roam")
    :tags '("ORG" "USER" "CONNECTED")
    :if (file-directory-p cloud-org-root-dir)
    :commands (org-roam-setup)
    :custom
    (org-roam-directory cloud-org-root-dir)
    (org-roam-file-exclude-regexp '(".stversions/" ".stfolder/"))
    (org-roam-database-connector 'sqlite-builtin)

    :init
    (add-hook 'after-init-hook 'org-roam-setup)
    (setq org-roam-v2-ack t
          browse-url-galeon-program nil
          browse-url-netscape-program nil)

    :pretty-hydra
    ((:title "ORG Roam" :color teal :hint nil)
     ("Navigation" (
        <<hydra-keybindings-gen(table=org-roam-navigation-bindings)>>
     )

      "Creation" (
        <<hydra-keybindings-gen(table=org-roam-creation-bindings)>>
      )

      "Bibliography" (
        <<hydra-keybindings-gen(table=org-roam-bibliography-bindings)>>
      )

      "Helpers" (
        <<hydra-keybindings-gen(table=org-roam-helpers-bindings)>>
      )))

    :config
    (org-roam-db-autosync-mode)

    (cl-defun org-roam-raw-id-insert (&optional filter-fn)
      "Find an Org-roam node and insert (where the point is) the raw id.
  FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
  and when nil is returned the node will be filtered out."
      (interactive)
      (unwind-protect
          ;; Group functions together to avoid inconsistent state on quit
          (atomic-change-group
            (let* (region-text
                   beg end
                   (_ (when (region-active-p)
                        (setq beg (set-marker (make-marker) (region-beginning)))
                        (setq end (set-marker (make-marker) (region-end)))
                        (setq region-text (org-link-display-format (buffer-substring-no-properties beg end)))))
                   (node (org-roam-node-read region-text filter-fn))
                   (description (or region-text
                                    (org-roam-node-formatted node))))
              (if (org-roam-node-id node)
                  (progn
                    (when region-text
                      (delete-region beg end)
                      (set-marker beg nil)
                      (set-marker end nil))
                    (let ((id (org-roam-node-id node)))
                      (insert id))))))
        (deactivate-mark)))

    (defun generate-org-roam-ids ()
      "Generate unique IDs for all headings in the Org-Roam database."
      (interactive)
      (let ((files (org-roam-list-files)))
        (dolist (file files)
          (with-current-buffer (find-file-noselect file)
            (org-mode)
            (org-map-entries
             (lambda ()
               (org-id-get-create))
             nil
             'file)
            (save-buffer))))
      (message "Unique IDs generated for all Org-Roam files."))

  (cl-defmethod org-roam-node-directories ((node org-roam-node))
    (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory))))
        (format "(%s)" (car (split-string dirs "/")))
      ""))

  (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
    (let ((level (org-roam-node-level node)))
      (concat
       (when (> level 0) (concat (org-roam-node-file-title node) " > "))
       (when (> level 1) (concat (string-join (org-roam-node-olp node) " > ") " > "))
       (org-roam-node-title node))))

  (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
    (let* ((count (caar (org-roam-db-query
                         [:select (funcall count source)
                                  :from links
                                  :where (= dest $s1)
                                  :and (= type "id")]
                         (org-roam-node-id node)))))
      (format "[%d]" count)))

  (setq org-roam-node-display-template
        (concat
         (propertize "${directories} / " 'face 'org-tag)
         "${hierarchy:*}"
         (propertize "${backlinkscount:6}" 'face 'org-tag))))

  (use-package org-roam-protocol
    :ensure (:host github :repo "org-roam/org-roam" :files ("extensions/org-roam-protocol.el"))
    :tags '("ORG" "USER")
    :after org-roam)

  (use-package org-roam-ui
    :ensure (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :tags '("ORG" "USER" "DESKTOP")
    :after (org-roam eaf-browser)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

  (use-package citar-org-roam
    :ensure (:type git :host github :repo "emacs-citar/citar-org-roam")
    :after citar org-roam
    :tags '("BIBLIOGRAPHY" "USER" "ORG")
    :no-require
    :config (citar-org-roam-mode))

  (use-package consult-org-roam
    :after org-roam
    :tags '("ORG" "USER" "COMPLETION")
    :commands (consult-org-roam-mode)
    ;; :init
    ;; (consult-org-roam-mode 1)
    :custom
    (consult-org-roam-grep-func #'consult-ripgrep)
    (consult-org-roam-buffer-narrow-key ?r)
    (consult-org-roam-buffer-after-buffers t)

    :config
    (consult-customize consult-org-roam-forward-links
                       :preview-key "M-.")
    )

  (use-package org-roam-project-dashboard
    :ensure (:protocol ssh :type git :host github :repo "seblemaguer/org-roam-project-dashboard")
    :tags '("ORG" "PROJECT_MANAGEMENT")
    :commands (org-roam-project-dashboard-show)
    :custom
    (org-roam-project-dashboard-list-tags '("research" "tools" "duties" "application" "perso" "teaching" "training"))
    (org-roam-project-dashboard-threshold-tasks 5)

    :custom-face
    (org-roam-project-dashboard-todo     ((t :background "red1"
                                             :foreground "black"
                                             :weight bold
                                             :box (:line-width 2 :style released-button))))
    (org-roam-project-dashboard-priority ((t :foreground "#3498db"
                                             :weight semibold
                                             :box (:color "#ecf0f1" :line-width (-1 . -2))
                                             :inverse-video t)))
    (org-roam-project-dashboard-header   ((t :inherit outline-1 :weight ultra-bold :height 150)))
    (org-roam-project-dashboard-project  ((t :inherit outline-2 :weight bold)))
    (org-roam-project-dashboard-task     ((t :inherit outline-4))))
#+end_src

*** DONE vulpea
CLOSED: [2022-02-10 Thu 07:06]
:PROPERTIES:
:ID:       f3942b1a-a4c8-41e2-9f15-d8c37b8a41bf
:END:
For now, I don't really know the power of =vulpea= but I use it to bridge =org-roam= and =org-agenda=.

#+begin_src emacs-lisp
  (use-package vulpea
    :if (file-directory-p cloud-org-root-dir)
    :tags '("ORG" "USER" "CONNECTED")
    :after org-roam
    :hook
    (before-save . vulpea-project-update-tag)
    :init
    (advice-add 'org-agenda :before #'vulpea-agenda-files-update)
    (advice-add 'org-todo-list :before #'vulpea-agenda-files-update)
    :commands (vulpea-agenda-files-update)

    :config

    (add-to-list 'org-tags-exclude-from-inheritance "project")

    (defun vulpea-project-p ()
      "Return non-nil if current buffer has any todo entry.

    TODO entries marked as done are ignored, meaning the this
    function returns nil if current buffer contains only completed
    tasks."
      (org-element-map                          ; (2)
          (org-element-parse-buffer 'headline) ; (1)
          'headline
        (lambda (h)
          (eq (org-element-property :todo-type h)
              'todo))
        nil 'first-match))                     ; (3)

    (defun vulpea-project-update-tag ()
      "Update PROJECT tag in the current buffer."
      (when (and (not (active-minibuffer-window))
                 (vulpea-buffer-p))
        (save-excursion
          (goto-char (point-min))
          (let* ((tags (vulpea-buffer-tags-get))
                 (original-tags tags))
            (if (vulpea-project-p)
                (setq tags (cons "project" tags))
              (setq tags (remove "project" tags)))

            ;; cleanup duplicates
            (setq tags (seq-uniq tags))

            ;; update tags if changed
            (when (or (seq-difference tags original-tags)
                      (seq-difference original-tags tags))
              (apply #'vulpea-buffer-tags-set tags))))))

    (defun vulpea-buffer-p ()
      "Return non-nil if the currently visited buffer is a note."
      (and buffer-file-name
           (string-prefix-p
            (expand-file-name (file-name-as-directory org-roam-directory))
            (file-name-directory buffer-file-name))))

    (defun vulpea-project-files ()
      "Return a list of note files containing 'project' tag." ;
      (seq-uniq
       (seq-map
        #'car
        (org-roam-db-query
         [:select [nodes:file]
                  :from tags
                  :left-join nodes
                  :on (= tags:node-id nodes:id)
                  :where (like tag (quote "%\"project\"%"))]))))

    (defun vulpea-agenda-files-update (&rest _)
      "Update the value of `org-agenda-files'."
      (setq org-agenda-files (vulpea-project-files))
      (setq org-agenda-files (append org-agenda-files
                                     org-agenda-default-files))))
#+end_src

** DONE Bibliography management
CLOSED: [2022-02-10 Thu 07:12]
:PROPERTIES:
:ID:       9db4cad1-7ae9-4889-a426-049d7c818599
:END:
In this section, the configuration is focused on the bibliography handling.
It relies on the following packages:
=ebib= to navigate the global bibliography,
=org-ref= to bridge =org-mode= and the bibtex,
=citar= to enhance the experience orf =org-cite=,
and =org-roam-bibtex= to connect this managemente with =org-roam=.

=org-noter= is used to connect =org-mode= with =pdf-tools=, and =org-media-noter= to connect org-mode with mpv videos
These last packages are key to enable the browsing of the document in parallel to the navigation of the notes.

#+begin_src emacs-lisp
  (defvar slm~bib-files (list (expand-file-name (concat cloud-org-root-dir "bibliography/index.bib")))
    "My bibliography files.")

  (defvar slm~pdf-root-dir (list (expand-file-name (concat cloud-org-root-dir "bibliography/pdfs/")))
    "The root directory containing the PDF files.")
#+end_src

*** DONE ebib
CLOSED: [2022-02-10 Thu 07:09]
:PROPERTIES:
:ID:       791f5c94-af7b-47d1-a2e6-636d34c8439f
:END:
#+begin_src emacs-lisp
  (use-package ebib
    :tags '("BIBLIOGRAPHY" "USER")
    :if (file-directory-p cloud-org-root-dir)
    :custom
    (ebib-preload-bib-files slm~bib-files))
#+end_src

*** DONE org-ref
CLOSED: [2022-02-10 Thu 07:09]
:PROPERTIES:
:ID:       874da363-0865-40ef-93c3-5384ef2f4a8a
:END:
#+begin_src emacs-lisp
  (use-package org-ref
    :tags '("BIBLIOGRAPHY" "ORG" "USER")
    :if (file-directory-p cloud-org-root-dir)
    :config
    (setq bibtex-completion-bibliography slm~bib-files
          bibtex-completion-library-path slm~pdf-root-dir
          ;; bibtex-completion-notes-path "~/Dropbox/emacs/bibliography/notes/"
          bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

          bibtex-completion-additional-search-fields '(keywords)
          bibtex-completion-display-formats
          '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
            (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
            (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
          bibtex-completion-pdf-open-function (lambda (fpath)
                                                (call-process "open" nil 0 nil fpath))))
#+end_src

*** DONE citar
CLOSED: [2022-02-10 Thu 07:10]
:PROPERTIES:
:ID:       8681e0fa-5e55-4bf2-be9f-7ff9ce2e82f4
:END:

#+transclude: [[file:keytable_summary.org::Citar]] :only-contents

#+begin_src emacs-lisp
  (use-package citar
    :if (file-directory-p cloud-org-root-dir)
    :tags '("BIBLIOGRAPHY" "USER" "ORG")
    :commands (citar-insert-citation citar-select-ref)
    :bind (
      <<keybindings-gen(table=citar-citation-keybindings)>>

       :map org-mode-map (
         <<keybindings-gen(table=citar-citation-keybindings)>>
       )

       :map minibuffer-local-map (
         <<keybindings-gen(table=citar-minibuffer-keybindings)>>
       )
    )

    ;; :after (embark)
    :config
    ;; Make the 'citar' bindings available from `embark-act'.
    ;; (add-to-list 'embark-keymap-alist '(bibtex . citar-map))

    :custom
    (citar-bibliography slm~bib-files))
#+end_src

*** DONE org-roam-bibtex
CLOSED: [2022-02-10 Thu 07:10]
:PROPERTIES:
:ID:       c6deecfe-f8a0-41f7-8cff-ed53885d455c
:END:
We also define the function =generate-bibliography-entry= which generate an org-mode formatted entry to be ready so that we can read the reference.
This function makes extensive use of =org-element=.

#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :tags '("BIBLIOGRAPHY" "USER" "ORG")
    :hook (org-roam-mode . org-roam-bibtex-mode)
    :commands (org-roam-bibtex-mode)
    :init
    (defun generate-bibliography-entry ()
      "Generate an org mode bibliography entry."
      (interactive)
      (let* ((key (citar-select-ref))
             (title (replace-regexp-in-string
                     "[{}]"
                     ""
                     (cdr (assoc "title" (citar-get-entry key)))))

             (existing-file (car (directory-files-recursively
                                  (concat cloud-org-root-dir "bibliography/attachments/pdfs/articles/")
                                  (format ".*%s.*" title))))

             (pdf (file-relative-name
                   (if existing-file
                       existing-file
                     (read-file-name "Find file: "
                                     (concat cloud-org-root-dir "bibliography/attachments/pdfs/articles/")))
                   (file-name-directory
                    (buffer-file-name
                     (window-buffer (minibuffer-selected-window))))
                   ))
             (current-level (car (org-heading-components))))

        (save-excursion
          (insert (org-element-interpret-data
                   `((headline (:title ,title :todo-keyword "TODO" :level ,current-level)

                               (property-drawer nil ((node-property (:key "ID" :value ,(org-id-new)))
                                                     (node-property (:key "ROAM_REFS" :value ,(format "cite:%s" key)))))
                               "\n"
                               (headline (:title "Overall notes" :level ,(+ current-level 1)))

                               "\n"

                               (headline (:title "Detailed notes" :level ,(+ current-level 1))
                                         (property-drawer nil ((node-property (:key "INTERLEAVE_PDF" :value ,pdf)))))

                               "\n"
                               )))))))

    (setq orb-preformat-keywords '("citekey" "title" "url" "author-or-editor" "keywords" "file")
          orb-process-file-keyword t
          orb-file-field-extensions '("pdf")))
#+end_src

*** DONE org-noter
CLOSED: [2024-06-04 Tue 15:46]
:PROPERTIES:
:ID:       5a709457-8017-477d-9bc9-8dc18765d069
:END:
=org-noter= is key package for my research life as it allows to annotate PDF using org-modes.
As I tend to read using a remarkable, I also added a helper to transfer the article directly to the remarkable.

:PROPERTIES:
:ID:       329ec75f-9974-402f-823c-af10db1e7002
:END:
#+begin_src emacs-lisp
  (use-package org-noter
    :tags '("BIBLIOGRAPHY" "USER" "ORG" "DESKTOP")
    :after (:any org pdf-view)
    :custom
    (org-noter-doc-split-fraction '(0.7 . 0.3))
    (org-noter-property-doc-file "INTERLEAVE_PDF")
    (org-noter-property-note-location "INTERLEAVE_PAGE_NOTE")

    (defun org-noter-transfer-to-rm ()
      "Import the PDF associated with the current Org mode node to remarkable."
      (interactive)
      (let ((pdf-file (org-entry-get (point) "INTERLEAVE_PDF")))
        (if (and pdf-file (file-exists-p pdf-file))
            (shell-command (format "conda run -n remarkable rm_import -t / \"%s\"" pdf-file))
          (message "No associated PDF found or PDF file doesn't exist")))))
#+end_src

*** DONE org-media-noter
CLOSED: [2024-03-02 Sat 07:48]
:PROPERTIES:
:ID:       91fbbd98-e7f9-4990-8600-de5d66c59a76
:END:
=org-media-noter= provides a neat way to annotate videos in org-mode.
I added a package which builds on top of =org-media-note= (named =org-media-noter=) to maintain consistency with the way I annotate PDFs.

#+transclude: [[file:keytable_summary.org::org-media-noter-keybindings]]

#+begin_src emacs-lisp
  (use-package org-media-note
    :tags '("BIBLIOGRAPHY" "USER" "ORG" "DESKTOP")
    :ensure (org-media-note :type git :host github :repo "yuchen-lea/org-media-note"))

  (use-package org-media-noter
    :ensure (:protocol ssh :type git :host github :repo "seblemaguer/org-media-noter")
    :tags '("BIBLIOGRAPHY" "USER" "ORG" "DESKTOP")
    :commands (org-media-noter)
    :bind (
      <<keybindings-gen(table=org-media-noter-keybindings)>>
    ))
#+end_src

* DONE Environment [100%]
:PROPERTIES:
:ID:       8d072ea6-0173-49c8-b1ea-315e70b2981d
:END:
In order to have a better editing environment, I configured several fundamental features: undoing, folding, completing and templating.

** DONE Undoing
CLOSED: [2021-01-04 Mon 08:57]
:PROPERTIES:
:ID:       b5c751ab-67e8-4b15-b019-4dbe2832f6e2
:END:
For undoing an operation, I am using =vundo=.
The only configuration here is to activate it globally.

#+transclude: [[file:keytable_summary.org::Undoing]] :only-contents

#+begin_src emacs-lisp
  (use-package vundo
    ;; :ensure (:type git :host github :repo "casouri/vundo")
    :tags '("UNDOING")
    :bind (
      <<keybindings-gen(table=vundo-entry-keybindings)>>
    )

    :config
    (setq vundo-glyph-alist vundo-unicode-symbols)
    (set-face-attribute 'vundo-default nil :family "Symbola"))
#+end_src

** DONE Folding
CLOSED: [2021-01-04 Mon 09:00]
:PROPERTIES:
:ID:       304d29b4-67dd-4a87-8e14-140380ce4398
:END:
For the folding, I am relying on =outline-indent=.

#+begin_src emacs-lisp
  (use-package outline-indent
    :tags '("FOLDING")
    :commands (outline-indent-minor-mode
               outline-indent-insert-heading)
    :hook ((yaml-mode . outline-indent-minor-mode)
           (yaml-ts-mode . outline-indent-minor-mode)
           (python-mode . outline-indent-minor-mode)
           (python-ts-mode . outline-indent-minor-mode))

    :custom
    (outline-indent-ellipsis " â¼ "))

  (use-package savefold
    :ensure (:type git :host github :repo "jcfk/savefold.el")
    :disabled t
    :tags '("FOLDING")
    :init
    (setq savefold-backends '(outline org)
          savefold-directory (locate-user-emacs-file "savefold"))  ;; default

    :config
    (savefold-mode 1))
#+end_src

** DONE Completing [100%]
:PROPERTIES:
:ID:       2049b675-5be8-4db0-ad64-542ddb67f3a1
:END:
Completion is one of the biggest time-saver feature a text editor can have.
I rely on three key completion systems for different purposes:
  - =CORFU= is used for inline completion (mainly to access programming helpers and snippets)
  - =vertico= is used as the standard mini-buffer based completion
  - =helm= is provided for some specific completion tools which are interesting but are not supported by =completing-read=

*** DONE CORFU
CLOSED: [2021-01-03 Sun 17:42]
:PROPERTIES:
:ID:       f1d3c4c5-4319-47b7-a688-0db0f93afe40
:END:

#+begin_src emacs-lisp
  (use-package corfu
    :tags '("COMPLETION")
    :ensure (:host github :repo "minad/corfu" :files ("corfu.el"))
    :custom
    (corfu-cycle t) ;; Enable cycling for `corfu-next/previous'
    (corfu-auto nil) ;; Enable auto completion
    ;; (corfu-commit-predicate nil)   ;; Do not commit selected candidates on next input
    (corfu-quit-at-boundary 'separator) ;; Automatically quit at word boundary
    (corfu-quit-no-match 'separator) ;; Automatically quit if there is no match
    (corfu-scroll-margin 5) ;; Use scroll margin
    ;; (corfu-preview-current nil)    ;; Do not preview current candidate
    (corfu-on-exact-match 'quit)

    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    :hook (before-save . corfu-quit)
    :init
    (global-corfu-mode)
    )

  (use-package corfu-history
    :tags '("COMPLETION")
    :ensure (:host github :repo "minad/corfu" :files ("extensions/corfu-history.el"))
    :config
    (add-to-list 'savehist-additional-variables 'corfu-history)
    (corfu-history-mode 1)
    (savehist-mode 1)
    :custom
    (corfu-history-length 200)
    :demand
    :after corfu)

  (use-package corfu-doc
    :tags '("COMPLETION")
    :ensure (:host github :repo "minad/corfu" :files ("extensions/corfu-doc.el"))
    :disabled t
    :bind
    (:map corfu-map
     ("M-p" . corfu-doc-scroll-down)
     ("M-n" . corfu-doc-scroll-up)
     ("M-d" . corfu-doc-toggle))
    :after corfu)


  ;; A few more useful configurations...
  (use-builtin emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))

  (use-package corfu-candidate-overlay
    :tags '("COMPLETION")
    :ensure (:type git
                   :repo "https://code.bsdgeek.org/adam/corfu-candidate-overlay"
                   :files (:defaults "*.el"))
    :after corfu
    :bind (
        ("C-<tab>" . completion-at-point)
    )
    :config
    ;; enable corfu-candidate-overlay mode globally
    ;; this relies on having corfu-auto set to nil
    (corfu-candidate-overlay-mode +1))



  ;; Add extensions
  (use-package cape
    :tags '("COMPLETION")
    :bind ("C-c p" . cape-prefix-map) ;; Alternative key: M-<tab>, M-p, M-+
    :init
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    (add-to-list 'completion-at-point-functions #'cape-tex))
#+end_src

*** DONE Vertico
CLOSED: [2022-02-26 Sat 20:51]
:PROPERTIES:
:ID:       973163be-3960-457d-b5cc-66ac9b993b73
:END:
This section provides the configuration of =Vertico=.
Nothing fancy happens here, just its activation and a couple of setups related to emacs specificities.

#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :tags '("COMPLETION")
    :init
    (vertico-mode)
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; Alternatively try `consult-completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src

*** DONE Helm
CLOSED: [2021-01-03 Sun 17:43]
:PROPERTIES:
:ID:       7881fad0-6eba-4169-901d-afde30308256
:END:
I use Helm for some specific cases which requires an important visibility space completion.
Once again, nothing fancy here, the configuration to have a better UX.

#+transclude: [[file:keytable_summary.org::Helm]] :only-contents

#+begin_src emacs-lisp
  (use-package helm
    :tags '("COMPLETION")
    :functions helm-show-completion-default-display-function
    :bind (
      <<keybindings-gen(table=helm-info-entry-keybindings)>>
    )

    :config
    (setq helm-scroll-amount 4 ; scroll 4 lines other window using M-<next>/M-<prior>
          helm-quick-update t ; do not display invisible candidates
          helm-idle-delay 0.01 ; be idle for this many seconds, before updating in delayed sources.
          helm-input-idle-delay 0.01 ; be idle for this many seconds, before updating candidate buffer
          helm-show-completion-display-function #'helm-show-completion-default-display-function
          helm-split-window-default-side 'below ;; open helm buffer in another window
          helm-split-window-inside-p t ;; open helm buffer inside current window, not occupy whole other window
          helm-candidate-number-limit 200 ; limit the number of displayed canidates
          helm-move-to-line-cycle-in-source nil ; move to end or beginning of source when reaching top or bottom of source.
          )
    )
#+end_src

*** DONE Extension [100%]
CLOSED: [2021-01-03 Sun 17:52]
:PROPERTIES:
:ID:       e697b450-c2f1-433f-b5c3-d49756a0a843
:END:
While the previous completion system is enough to work on its own, it is possible to enhance the user experince by adding a couple of more tweaks.

**** DONE Orderless
CLOSED: [2021-05-27 Thu 18:31]
:PROPERTIES:
:ID:       1cc53501-820e-4b41-bcab-92eb89cb0ee9
:END:
=orderless= provides a more flexible way to filter a list of completion candidates.

#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :tags '("COMPLETION")
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

**** DONE Marginalia
CLOSED: [2021-01-03 Sun 17:49]
:PROPERTIES:
:ID:       7e99a4c8-c7dd-41f5-80e7-5b861f8706b4
:END:
Marginalia is completing =vertico= by providing annotations to the candidates.
For now, I am using the default configuration.

#+transclude: [[file:keytable_summary.org::Marginalia]] :only-contents

#+begin_src emacs-lisp
  (use-package marginalia
    :tags '("COMPLETION")
    :after vertico
    :bind (
      :map minibuffer-local-map (
        <<keybindings-gen(table=marginalia-entry-keybindings)>>
      )
    )

    ;; The :init configuration is always executed (Not lazy!)
    :init
    (marginalia-mode)
    (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+end_src

**** DONE Consult
CLOSED: [2021-01-03 Sun 17:52]
:PROPERTIES:
:ID:       55294935-ecba-45bb-ba7b-477b968ae186
:END:
Consult provides a set of commands which are particularly useful.
It is a nice extension to =Vertico= which brings to functionalities close to the ones proposed in =swiper= and =counsel=.

#+transclude: [[file:keytable_summary.org::Consult]] :only-contents


#+begin_src emacs-lisp
  (use-package consult
    :tags '("COMPLETION")
    :bind (
      <<keybindings-gen(table=consult-ctrl-c-keybindings)>>
      <<keybindings-gen(table=consult-ctrl-x-keybindings)>>
      <<keybindings-gen(table=consult-yank-keybindings)>>
      <<keybindings-gen(table=consult-goto-keybindings)>>
      <<keybindings-gen(table=consult-search-keybindings)>>
      <<keybindings-gen(table=consult-isearch-keybindings)>>


      :map isearch-mode-map
      <<keybindings-gen(table=consult-isearch-mode-keybindings)>>
     )

    ;; ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; ;; relevant when you use the default completion UI. You may want to also
    ;; ;; enable `consult-preview-at-point-mode` in Embark Collect buffers.
    ;; :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    (setq consult-preview-key "M-.")

    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize consult-theme
                       :preview-key '(:debounce 0.2 any)
                       consult-ripgrep consult-git-grep consult-grep
                       consult-bookmark consult-recent-file consult-xref
                       consult--source-bookmark consult--source-recent-file
                       consult--source-project-recent-file
                       :preview-key "M-.")

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")
    )

  ;; Optionally add the `consult-flycheck' command.
  (use-package consult-flycheck
    :tags '("COMPLETION")
    :after (:all consult flycheck)
    :bind (
      :map flycheck-command-map (
        <<keybindings-gen(table=consult-flycheck-entry-keybindings)>>
      )
    ))
#+end_src

** DONE Templating [100%]
CLOSED: [2021-01-03 Sun 17:58]
:PROPERTIES:
:ID:       68711b41-76cc-4e88-b5ab-98d0bd28e6aa
:END:
I use templates for two cases:
  - starting point as new script/code file
  - accessing to some snippets.

In both cases, I rely on =yasnippet=.

*** DONE Snippets
CLOSED: [2021-01-03 Sun 17:57]
:PROPERTIES:
:ID:       b507a2c6-6819-457c-abf6-89448e91381d
:END:
The default configuration of yasnippet consists of activating it and plugging it with company.
Obviously, the package =yasnippet-snippets= is also configured to provide default snippets.
I also use the package =consult-yasnipet= to list the snippets.
Finally, my own snippets are stored in the directory =~/.emacs.d/third_parties/snippets=.

#+begin_src emacs-lisp
  (use-package yasnippet
    :tags '("COMPLETION")
    :init
    (yas-global-mode 1))

  ;; Load snippets
  (use-package yasnippet-snippets
    :tags '("COMPLETION")
    :config

    ;; Add third parties snippets
    (defvar third-parties-snippet-dir (format "%s/third_parties/snippets" user-emacs-directory)
      "Directory containing my own snippets")

    (defun third-parties-snippets-initialize ()
      (add-to-list 'yas-snippet-dirs 'third-parties-snippet-dir t)
      (yas-load-directory third-parties-snippet-dir t))

    (eval-after-load 'yasnippet '(third-parties-snippets-initialize)))

  (use-package yasnippet-snippets
    :tags '("COMPLETION")
    :ensure (consult-yasnippet :host github :repo "mohkale/consult-yasnippet"))

  (use-package yasnippet-capf
    :tags '("COMPLETION")
    :after cape
    :config
    (add-to-list 'completion-at-point-functions #'yasnippet-capf))
#+end_src

*** DONE File templates
CLOSED: [2021-01-03 Sun 17:58]
:PROPERTIES:
:ID:       df0d376d-021f-4d87-9552-8726531e4723
:END:
This part is using yatemplate (an over-layer of yasnippet) coupled with auto-insert to have a set of
file type dedicated templates. The templates are available in =~/.emacs.d/third_parties/templates= directory.

#+begin_src emacs-lisp
  (use-package yatemplate
    :tags '("COMPLETION")
    :after yasnippet
    :config

    ;; Define template directory
    (setq yatemplate-dir (concat user-emacs-directory "/third_parties/templates"))

    ;; Coupling with auto-insert
    (setq auto-insert-alist nil)
    (yatemplate-fill-alist)

    ;; Force indentation to be fixed after insertion
    (defun yatemplate-expand-yas-buffer ()
      "Expand the whole buffer with `yas-expand-snippet'. This function has been redefined to disable the auto-indentation."
      (let ((yas-indent-line 'fixed))
        (yas-expand-snippet (buffer-string) (point-min) (point-max)))))
#+end_src

** DONE Action triggering
CLOSED: [2021-05-27 Thu 18:34]
:PROPERTIES:
:ID:       7f30c2c6-775e-4026-8055-bfd3484f7cdb
:END:
=embark= provides ways to execute an action to an ~emacs object~ (an URL, a region, ....).
It is a convenient package to have a more refined control of my workflow.
=embark= and =consult= also work nicely together, so I use them together.

#+transclude: [[file:keytable_summary.org::Embark]] :only-contents

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :tags '("HELPERS")
    :commands (which-key-mode)
    :hook (on-first-input . which-key-mode))

  (use-package embark
    :commands (embark-act embark-collect-snapshot)
    :tags '("HELPERS")
    :after (which-key)
    :bind (
      <<keybindings-gen(table=embark-keybindings)>>

      :map minibuffer-local-map
      <<keybindings-gen(table=embark-minibuffer-keybindings)>>
    )

     :config
     (setq embark-action-indicator
        (lambda (map &optional _target)
          (which-key--show-keymap "Embark" map nil nil 'no-paging)
          #'which-key--hide-popup-ignore-command)
        embark-become-indicator embark-action-indicator))


    (use-package embark-consult
      :tags '("HELPERS")
      :after (:all embark consult)
      :defer t
      :hook
      (embark-collect-mode . embark-consult-preview-minor-mode))
#+END_SRC

** DONE Buffer management
CLOSED: [2023-02-02 Thu 15:55]
:PROPERTIES:
:ID:       84a23a12-19d7-4705-b762-45912fea3694
:END:
=popper= is a package providing shortcuts for a quick access to some family of buffers.
I am using it mainly to show/hide my terminal faster.

The keybindings are defined as part of the terminal/shell sections.

#+begin_src emacs-lisp
  (use-package popper
    :tags '("HELPER")
    :pretty-hydra (start-term-hydra
     (:color teal :hint nil)
     ("Select type of terminal" (
         <<hydra-keybindings-gen(table=start-term-hydra-keybindings)>>
    )))

    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
            help-mode
            compilation-mode
            "^\\*vterm.*\\*$"  vterm-mode
            comint-mode
            prodigy-mode))
    (popper-mode +1)
    (popper-echo-mode +1))
#+end_src

** DONE Autoscratch
CLOSED: [2023-07-21 Fri 22:48]
:PROPERTIES:
:ID:       0448cee8-1a3b-4941-b21d-9635d119c737
:END:
=autoscratch= provides a neat way to adapt the scratch buffer to the needed mode pretty quickly.
It is really convenient for quick note taking.

#+begin_src emacs-lisp
  (use-package autoscratch
    :tags '("HELPERS")
    :config
    (setq initial-major-mode 'autoscratch-mode))
#+end_src

* DONE IDE [100%]
:PROPERTIES:
:ID:       64a070b9-dc83-46ce-aa97-11cb12a1a545
:END:
While the environment configuration is fundamental for editing,
it is necessary to add more features to simplify coding life.
This section focuses on three components: the compilation, the commenting and the formatting.

** DONE Imenu/Sidebar
CLOSED: [2023-10-27 Fri 09:19]
:PROPERTIES:
:ID:       a15b5d59-76f1-408d-bddd-108797d56a03
:END:

#+begin_src emacs-lisp
  (use-package imenu-list
    :config

    (defun my/imenu-list-jump-to-window ()
      "Jump to imenu-list window if visible, otherwise create it and jump."
      (interactive)
      (if (get-buffer-window imenu-list-buffer-name)
          (select-window (get-buffer-window imenu-list-buffer-name))
        (progn
          (imenu-list-minor-mode)
          (select-window (get-buffer-window imenu-list-buffer-name)))))

    (defun my/imenu-list-smart-toggle ()
      "If imenu-list window doesn't exist, create it and jump. If if does but
  it is not the current buffer, jump there. If it exists and it's the current
  buffer, close it."
      (interactive)
      (if (eq (current-buffer) (get-buffer imenu-list-buffer-name))
          (imenu-list-quit-window)
        (my/imenu-list-jump-to-window)))

    (setq imenu-list-size 40))
#+end_src

** DONE Compilation [100%]
:PROPERTIES:
:ID:       7360a56a-6cdc-49dd-ae18-de9eb94ec3fe
:END:
I configured the configuration around two main parts:
refining the default compilation support and add fly-checking support.

*** DONE Baseline compilation
CLOSED: [2022-07-25 Mon 07:38]
:PROPERTIES:
:ID:       f4958e4f-31d3-4f30-81a6-bb7b957f1c21
:END:
I just modify a little bit the default compilation to be a little more "user friendly".
I also rely on =fancy-compilation= to enhance the the output in the compilation buffer.

#+transclude: [[file:keytable_summary.org::Compilation]] :only-contents

#+begin_src emacs-lisp
  (use-builtin compile
    :tags '("IDE" "COMPILATION")

    :pretty-hydra
    ((:color teal :hint nil)

     ("Compilation Errors" (
       <<hydra-keybindings-gen(table=compilation-hydra-keybindings)>>
      )
     )
    )

    :init
    (setq compilation-scroll-output t)

    :config

    ;; Auto close if success
    (defun my-compile-autoclose (buffer string)
      "Auto close compile log if there are no errors"
      (when (and (not (string-match-p (buffer-name buffer) "*grep*"))
                 (string-match "finished" string))
        (delete-window (get-buffer-window buffer t))
        (bury-buffer-internal buffer)))
    (add-to-list 'compilation-finish-functions #'my-compile-autoclose)

    (setq compilation-always-kill t
          compilation-ask-about-save nil
          compilation-scroll-output 'first-error)

    ;; the next-error function weirdly stops at "In file included from...". Stop that:
    ;; http://stackoverflow.com/questions/15489319/how-can-i-skip-in-file-included-from-in-emacs-c-compilation-mode
    (setcar (nthcdr 5 (assoc 'gcc-include compilation-error-regexp-alist-alist)) 0))

  (use-package fancy-compilation
    :tags '("IDE" "COMPILATION")
    :commands (fancy-compilation-mode)
    :custom
    (fancy-compilation-override-colors nil)
    :init
    (with-eval-after-load 'compile
      (fancy-compilation-mode)))

  (use-package compile-multi
    :ensure (compile-multi :host github
                           :repo "mohkale/compile-multi")
    :tags '("IDE" "COMPILATION")
    )
#+end_src

*** DONE Flychecking
CLOSED: [2021-01-03 Sun 18:13]
:PROPERTIES:
:ID:       ddde4927-066d-416b-8193-87fd5403c35b
:END:
For the fly checking, I use flycheck instead of flymake.
The key part of this configuration is the fact that checking the documentation is disabled.
I also use =flycheck-posframe= to have a quick idea of what is going on at the pointed error/warning/...

#+transclude: [[file:keytable_summary.org::Flychecking]] :only-contents

#+begin_src emacs-lisp
  ;; Disable checking doc
  (use-package flycheck
    :tags '("CORE" "COMPILATION" "IDE")
    :commands (flycheck-error-list-set-filter flycheck-next-error flycheck-previous-error flycheck-first-error)
    :pretty-hydra
    ((:pre (progn (setq hydra-hint-display-type t) (flycheck-list-errors))
           :post (progn (setq hydra-hint-display-type nil) (quit-windows-on "*Flycheck errors*"))
           :color teal :hint nil)

     ("Errors" (
       <<hydra-keybindings-gen(table=flycheck-errors-bindings)>>
      )
    ))

    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

  (use-package flycheck-posframe
    :disabled t
    :tags '("CORE" "UI")
    :after flycheck
    :hook (flycheck-mode . flycheck-posframe-mode)
    :config
    (setq flycheck-posframe-warning-prefix "\u26a0 "))
#+end_src

** DONE Commenting
CLOSED: [2021-01-03 Sun 18:33]
:PROPERTIES:
:ID:       ed1a2996-4c87-481b-9868-0a2720a8cd9d
:END:
For the commenting, the common denominator is how to deal with FIXMEs.
To do so, I relie on two part: =hl-todo= for the highlighting and occur for the listing.
For language specific configurations, it is done in the language configuration part.

#+begin_src emacs-lisp
  (use-package hl-todo
    :ensure ( :package "hl-todo"
              :repo "tarsius/hl-todo"
              :fetcher github
              :files ("*.el" "*.el.in" "dir" "*.info"
                      "*.texi" "*.texinfo" "doc/dir"
                      "doc/*.info" "doc/*.texi"
                      "doc/*.texinfo" "lisp/*.el" (:exclude
                                                   ".dir-locals.el" "test.el" "tests.el"
                                                   "*-test.el" "*-tests.el" "LICENSE"
                                                   "README*" "*-pkg.el"))
              :version (lambda (_) "1.9.0"))
    :tags '("CORE" "IDE")

    :init
    (defun fic-view-listing ()
      "Use occur to list related FIXME keywords"
      (interactive)
      (occur "\\<\\(FIXME\\|TO[ ]?DO\\|BUG\\|NOTE\\):?"))
    (setq hl-todo-keyword-faces
          '(("TODO"   . "#FF0000")
            ("TO DO"  . "#FF0000")
            ("FIXME"  . "#FF0000")
            ("NOTE"   . "#A020F0")
            ("BUG"    . "#FF4500")))
    :config
    (global-hl-todo-mode))
#+end_src

** DONE Formatting
CLOSED: [2021-01-03 Sun 18:26]
:PROPERTIES:
:ID:       68f3ef44-c949-4239-86ef-58a4d4173cd5
:END:
In order to format the buffer, it is better to rely on external formatter/linter.
=format-all= proposes support of big bunch of them, so I am using it.

#+begin_src emacs-lisp
  (use-package format-all
    :tags '("IDE" "FORMAT")
    :commands (format-all-buffer format-all-mode))
#+end_src

** DONE Sanitizing
CLOSED: [2023-05-16 Tue 22:07]
:PROPERTIES:
:ID:       dccc01fd-b206-4776-a2bc-caa3ab2d0def
:END:
This part contains sanitizing helpers before saving the files.
For now it consists of simply removing any trailing whitespace.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

* DONE Documentation [100%]
:PROPERTIES:
:ID:       480a1264-7a85-4a37-9871-afee458d504d
:END:
Emacs is dense and provides a lot of features.
Too many to remember everything.
This part is there to help to navigate the documentation more easily.

** DONE Key bindinds
CLOSED: [2021-01-03 Sun 11:18]
:PROPERTIES:
:ID:       588c4f5c-c7c2-4da7-9018-fd1e61ac2015
:END:
=helm-descbinds= is a useful package which provides a way to list all the shortcuts available in the current buffer.

#+transclude: [[file:keytable_summary.org::Keybindings]] :only-contents

#+begin_src emacs-lisp
  (use-package helm-descbinds
    :tags '("CORE" "DOCUMENTATION")
    :commands (helm-descbinds)
    :bind (
      <<keybindings-gen(table=helm-descbinds-entry-keybindings)>>
    ))
#+end_src

** DONE Helpful
CLOSED: [2021-01-03 Sun 11:19]
:PROPERTIES:
:ID:       923d3cdd-b651-4949-8313-b1b775231ce4
:END:
=helpful= is a powerful package to access to the documentation of a key/symbol/...
It also supports references and back-references.
I am using it as the entry point of any documentation I want to access.

#+transclude: [[file:keytable_summary.org::Helpful]] :only-contents

#+begin_src emacs-lisp
  (use-package helpful
    :tags '("CORE" "DOCUMENTATION")
    :commands (helpful-key helpful-symbol helpful-at-point)
    :bind (
      <<keybindings-gen(table=help-keybindings)>>
     ))
#+end_src

** DONE Man
CLOSED: [2021-03-01 Mon 09:28]
:PROPERTIES:
:ID:       5d437469-0ab4-4e27-97c5-371a4872dea4
:END:
Man is critical for document on unix.
I simply configured emacs to add my own environment man directories.

#+begin_src emacs-lisp
  (use-builtin man
    :tags '("CORE" "DOCUMENTATION")
    :config
    (setq Man-notify-method 'pushy
	  woman-manpath `("/usr/share/man/" "/usr/local/man/" ;; System
			  ,(format "%s/local/man" user-emacs-directory) ;; Private environment
			  ,(format "~/environment/local/share/man")
			  )))
#+end_src

** DONE Dash/Docsets
CLOSED: [2022-07-26 Tue 09:48]
:PROPERTIES:
:ID:       a9330231-6a23-4ccf-8c81-508a7bbfee85
:END:
Dash (https://www.kapeli.com/dash) provides a set of full documentation to download.
=consult-dash= provides an easy way to query them.

#+transclude: [[file:keytable_summary.org::Dash/Docsets]] :only-contents

#+begin_src emacs-lisp
  (use-package devdocs-browser
    :tags '("CORE" "DOCUMENTATION" "COMPLETION")
    :bind (
      <<keybindings-gen(table=devdocs-entry-keybindings)>>
    )

    :custom
    (devdocs-browser-cache-directory "~/shared/docset")
  )
#+end_src

** DONE Recoll
CLOSED: [2022-10-13 Thu 18:11]
:PROPERTIES:
:ID:       e4d14bcb-846b-41a3-96a7-2affee00bc37
:END:
=consult-recoll= provides an interface to =recoll= which is handy to "grep" from a db of documents.

#+transclude: [[file:keytable_summary.org::Recoll]] :only-contents

#+begin_src emacs-lisp
  (when (executable-find "recoll")
    (use-package consult-recoll
      :tags '("CORE" "DOCUMENTATION" "COMPLETION")
      :bind (
        <<keybindings-gen(table=consult-recoll-entry-keybindings)>>
      )))
#+end_src

And the associated configuration is:

#+begin_src conf :tangle ~/.recoll/recoll.conf :mkdirp yes
  # The system-wide configuration files for recoll are located in:
  #   /usr/share/recoll/examples

  topdirs = ~
  skippedPaths = ~/.cache ~/environment ~/tmp/music /media ~/configuration/emacs.d
  skippedNames+ = .* melpa docset *.wav *.flac
  noContentSuffixes+ =
#+end_src

* DONE Programming [100%]
:PROPERTIES:
:ID:       b21236c9-7243-4995-9478-920a130ca89b
:END:
Now that the environment is set, it is time to configure the different part to use emacs as a proper developping environment.
To do so, I rely mainly on Language Server Protocol (LSP) and for the debugging I relay on the Debug Adapter Protocol (DAP).

** DONE Tree sitter general configuration
CLOSED: [2023-06-08 Thu 18:27]
:PROPERTIES:
:ID:       95c61b3e-a60e-437a-a182-737e566556ab
:END:

Tree-sitter is neat way of dealing with syntax highlighting.
It is fast and configurable.
I also added the support of =scopeline= which provides an indicator about the score of the current block.

#+begin_src emacs-lisp
  (use-package tree-sitter-langs
    :tags '("IDE" "PROGRAMMING" "TREE-SITTER"))

  (use-package scopeline
    :tags '("IDE" "PROGRAMMING" "TREE-SITTER")
    :after tree-sitter
    :config (add-hook 'tree-sitter-mode-hook #'scopeline-mode))
#+end_src

** DONE LSP general configuration
CLOSED: [2021-01-03 Sun 21:28]
:PROPERTIES:
:ID:       6b0745dd-6954-4b94-a93d-94a770ef5d25
:END:
#+begin_src emacs-lisp
  (use-builtin project
    :tags '("IDE" "PROGRAMMING")
    :defer t
    :init
    (defun project-remember-current-project ()
      "Index the current project."
      (interactive)
      (when (project-current)
        (project-remember-projects-under
         (project-root (project-current))
         nil)))
    )

  (use-package flymake :defer t)
  (use-package eglot
    :tags '("IDE" "PROGRAMMING")
    :ensure (:wait t)
    :defer t
    :hook
    ((c-mode-hook      . eglot-ensure)
     (c++-mode-hook    . eglot-ensure)
     (racket-mode-hook . eglot-ensure)
     (python-mode      . eglot-ensure))

    :init
    (defun my-eglot-organize-imports () (interactive)
           (eglot-code-actions nil nil "source.organizeImports" t))

    :config
    (add-to-list 'eglot-server-programs
                 '(((c-mode c++-mode) . ("clangd"))))

    (add-to-list 'eglot-server-programs
                 '((python-mode python-ts-mode) . ("basedpyright-langserver" "--stdio"))))

  (use-package eglot-booster
    :ensure (eglot-booster
             :type git
             :host github
             :repo "jdtsmith/eglot-booster"
             :pre-build (
               (when (file-exists-p (expand-file-name "~/environment/local/bin/emacs-lsp-booster"))
                 (delete-file (expand-file-name "~/environment/local/bin/emacs-lsp-booster")))
               ("wget" "https://github.com/blahgeek/emacs-lsp-booster/releases/download/v0.2.0/emacs-lsp-booster_v0.2.0_x86_64-unknown-linux-musl.zip")
               ("unzip" "emacs-lsp-booster_v0.2.0_x86_64-unknown-linux-musl.zip")
               (rename-file "emacs-lsp-booster" (expand-file-name "~/environment/local/bin/"))
               (delete-file "emacs-lsp-booster_v0.2.0_x86_64-unknown-linux-musl.zip")))
    :tags '("IDE" "PROGRAMMING")
    :after eglot
    :config (eglot-booster-mode))
#+end_src

** DONE Dape/debug
CLOSED: [2023-11-15 Wed 20:50]
:PROPERTIES:
:ID:       448c6b54-feb4-4887-bb09-ce1b25455651
:END:
=dape= provides a debugger interface relying on the protocol DAP.
This package is in its early stage so more configuration will be required for futher improvement.

#+BEGIN_SRC emacs-lisp
  (use-package jsonrpc ;; NOTE: required to ensure version consistency with eglot and dape
    :defer t)

  (use-package dape
    :ensure (dape :type git :host github :repo "svaante/dape")
    :defer t
    :hook
    (kill-emacs . dape-breakpoint-save)
    (after-init . dape-breakpoint-load)

    :bind (:map dape-global-map (
      ("T" . dape-transient)
    ))

    :config
    ;; Info buffers to the right
    (setq dape-buffer-window-arrangement 'right)

    ;; ;; Global bindings for setting breakpoints with mouse
    ;; (dape-breakpoint-global-mode)

    ;; ;; To not display info and/or buffers on startup
    ;; (remove-hook 'dape-on-start-hooks 'dape-info)
    ;; (remove-hook 'dape-on-start-hooks 'dape-repl)

    ;; ;; To display info and/or repl buffers on stopped
    ;; (add-hook 'dape-on-stopped-hooks 'dape-info)
    ;; (add-hook 'dape-on-stopped-hooks 'dape-repl)

    ;; Kill compile buffer on build success
    ;; (add-hook 'dape-compile-compile-hooks 'kill-buffer)

    ;; Save buffers on startup, useful for interpreted languages
    (add-hook 'dape-on-start-hooks (lambda () (save-some-buffers t t)))

    (transient-define-prefix dape-transient ()
         "Transient for dape."
          [["Stepping"
           ("n" "Next" dape-next :transient t)
           ("i" "Step in" dape-step-in :transient t)
           ("o" "Step out" dape-step-out :transient t)
           ("c" "Continue" dape-continue :transient t)
           ("r" "Restart" dape-restart :transient t)]
           ["Breakpoints"
           ("bb" "Toggle" dape-breakpoint-toggle :transient t)
           ("bd" "Delete" dape-breakpoint-remove-at-point :transient t)
           ("bD" "Delete all" dape-breakpoint-remove-all :transient t)
           ("bl" "Log" dape-breakpoint-log :transient t)]
           ["Info"
           ("si" "Info" dape-info :transient t)
           ("sm" "Memory" dape-read-memory :transient t)
           ("ss" "Select Stack" dape-select-stack :transient t)
           ("R" "Repl" dape-repl :transient t)]
           ["Quit"
           ("qq" "Quit" dape-quit :transient nil)
           ("qk" "Kill" dape-kill :transient nil)]]))
#+END_SRC

** DONE Data [100%]
CLOSED: [2021-01-03 Sun 21:49]
:PROPERTIES:
:ID:       bccb2c53-a553-4140-88cb-91d5a0642c29
:END:
This section is dedicated to the configuration of modes to deal with data formats.

*** DONE CSV
CLOSED: [2021-01-03 Sun 21:32]
:PROPERTIES:
:ID:       1aabb30d-2271-4286-87f5-fe7a664d419d
:END:
For CSV file, I rely on =csv-mode= but I add more separators.

 #+begin_src emacs-lisp
   (use-package csv-mode
     :tags '("PROGRAMMING" "DATA")
     :hook
     (csv-mode . csv-guess-set-separator)
     (csv-mode . csv-align-mode))

   (use-package rainbow-csv
     :ensure (rainbow-csv :type git :host github :repo "emacs-vs/rainbow-csv")
     :tags '("PROGRAMMING" "DATA")
     :hook
     (csv-mode . rainbow-csv-mode))
 #+end_src

*** DONE CUE
CLOSED: [2021-01-03 Sun 21:35]
:PROPERTIES:
:ID:       40890fa6-3615-4eb1-b1cd-b64345c1778d
:END:
I use CUE files to guide audio CD I encode.
I developed a dedicated mode for this, so I am using it

#+begin_src emacs-lisp
  (use-package cue-mode
    :ensure (:protocol ssh :repo "seblemaguer/cue-mode" :type git :host github)
    :tags '("PROGRAMMING" "DATA" "RELEASE")
    :mode ("\\.cue$"))
#+end_src

*** DONE JSON
CLOSED: [2021-01-03 Sun 21:47]
:PROPERTIES:
:ID:       1685f3e4-f055-48d5-a163-4cbd7b1eeb65
:END:
I am using JSON both for storing data and for configuration.
The configuration relies on =json-mode= for the main part and =json-reformat= for a better formatting.

#+begin_src emacs-lisp
  (use-package json-mode
    :tags '("PROGRAMMING" "DATA" "CONFIGURATION")
    :mode ("\\.json$"))

  (use-package json-reformat
    :tags '("PROGRAMMING" "DATA" "CONFIGURATION" "FORMATTING")
    )
#+end_src

*** DONE Praat
CLOSED: [2021-01-03 Sun 21:38]
:PROPERTIES:
:ID:       6fe25d07-5530-4689-b75f-1ea586517de5
:END:
I use praat, and more especially Textgrid, to annotate speech signals.
Praat-mode helps to have a proper visualization of Textgrids in Empacs.

#+begin_src emacs-lisp
  (use-builtin praat-mode
    :load-path default-plugin-dir
    :tags '("PROGRAMMING" "DATA")
    :mode ("\\.[tT][Gg]"))
#+end_src

*** DONE XML
CLOSED: [2021-01-03 Sun 21:49]
:PROPERTIES:
:ID:       ec2c8655-0c62-48e6-b87a-441fdbfbe8af
:END:
XML is, as JSON, used for data formatting and configuration.
However, I had to do extra-configurations to have outline support and a better formatting.

#+begin_src emacs-lisp
  (use-builtin nxml-mode
    :load-path default-plugin-dir
    :tags '("PROGRAMMING" "DATA" "CONFIGURATION")
    :mode ("\\.xml$" . nxml-mode)
    :commands (pretty-print-xml-region)
    :init
    ;; Mapping xml to nxml
    (fset 'xml-mode 'nxml-mode)

    :hook
    (nxml-mode . (lambda ()
                   (outline-minor-mode)
                   (setq outline-regexp "^[ \t]*\<[a-zA-Z]+")))
    :config

    ;; Global configuration
    (setq nxml-child-indent 2
          nxml-auto-insert-xml-declaration-flag t
          nxml-slash-auto-complete-flag t
          nxml-bind-meta-tab-to-complete-flag t)

    ;; Helper to format
    (defun pretty-print-xml-region (begin end)
      "Pretty format XML markup in region. You need to have nxml-mode
  http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
  this.  The function inserts linebreaks to separate tags that have
  nothing but whitespace between them.  It then indents the markup
  by using nxml's indentation rules."
      (interactive "r")
      (save-excursion
        (nxml-mode)
        (goto-char begin)
        (while (search-forward-regexp "\>[ \\t]*\<" nil t)
          (backward-char) (insert "\n"))
        (indent-region begin end))))
#+end_src

** DONE Configuration [100%]
CLOSED: [2021-01-04 Mon 07:03]
:PROPERTIES:
:ID:       13f00230-cca6-4994-b7c0-0f582ab9f322
:END:
*** DONE Default unix configuration
CLOSED: [2021-01-03 Sun 21:52]
:PROPERTIES:
:ID:       a1ef96fe-ce26-45d8-b0af-fedb966fdac4
:END:
=config-general-mode= is applied for all unix configuration files.
For now, I know/use only files with extension ~rc~ or ~conf~.

#+begin_src emacs-lisp
  (use-package config-general-mode
    :tags '("PROGRAMMING" "CONFIGURATION")
    :mode ("\\.conf$" "\\.*rc$"))
#+end_src

*** DONE Apache
CLOSED: [2021-01-04 Mon 06:41]
:PROPERTIES:
:ID:       e3df1f57-5789-4d65-acc6-42785f01f64a
:END:
Nothing fancy here, we just add the support for =apache-mode= for several files which are known to be configuration for Apache.
Because the configuration of Apache requires root permissions, I assign the category SUDO to this package.
#+begin_src emacs-lisp
  (use-package apache-mode
    :tags '("PROGRAMMING" "CONFIGURATION" "SUDO")
    :mode ("\\.htaccess\\'" "httpd\\.conf\\'" "srm\\.conf\\'"
           "access\\.conf\\'" "sites-\\(available\\|enabled\\)/"))
#+end_src

*** DONE SSH configuration
CLOSED: [2021-01-04 Mon 06:48]
:PROPERTIES:
:ID:       5e1d8874-56b2-4206-a2f0-a9d6bc0a11db
:END:
Nothing fancy here, we just add the support for =ssh-config-mode= for several files which are known to be configuration for SSH.

#+begin_src emacs-lisp
  (use-package ssh-config-mode
    :tags '("PROGRAMMING" "CONFIGURATION")
    :mode ("/\\.ssh/config\\'" "/system/ssh\\'" "/sshd?_config\\'" "/known_hosts\\'" "/authorized_keys2?\\'")
    :hook (ssh-config-mode . turn-on-font-lock)

    :config
    (autoload 'ssh-config-mode "ssh-config-mode" t))
#+end_src

*** DONE YAML
CLOSED: [2021-01-04 Mon 06:53]
:PROPERTIES:
:ID:       ca2c0c49-d9ec-4bef-a69c-b4a158c02556
:END:
YAML is my main configuration format file as it supports references and more importantly comments.
I mainly rely on =yaml-mode= to which I add outline support for a better navigation.
I also use =yaml-tomato= to get the path at the current point which helps the access to a specific subpart of the configuration.

#+transclude: [[file:keytable_summary.org::YAML]] :only-contents

#+begin_src emacs-lisp
  (use-package yaml-mode
    :tags '("PROGRAMMING" "CONFIGURATION")
    :mode (".yaml$")
    :hook
    (yaml-mode . yaml-mode-outline-hook)

    :init
    (defun yaml-outline-level ()
      "Return the outline level based on the indentation, hardcoded at 2 spaces."
      (s-count-matches "[ ]\\{2\\}" (match-string 0)))

    (defun yaml-mode-outline-hook ()
      "See https://github.com/yoshiki/yaml-mode/issues/25#issuecomment-792833669"
      (outline-minor-mode)
      (setq outline-regexp
            (rx
             (seq
              bol
              (group (zero-or-more "  ")
                     (or (group
                          (seq (or (seq "\"" (*? (not (in "\"" "\n"))) "\"")
                                   (seq "'" (*? (not (in "'" "\n"))) "'")
                                   (*? (not (in ":" "\n"))))
                               ":"
                               (?? (seq
                                    (*? " ")
                                    (or (seq "&" (one-or-more nonl))
                                        (seq ">-")
                                        (seq "|"))
                                    eol))))
                         (group (seq
                                 "- "
                                 (+ (not (in ":" "\n")))
                                 ":"
                                 (+ nonl)
                                 eol)))))))
      (setq outline-level 'yaml-outline-level)))

  (use-package yaml-tomato
    :tags '("PROGRAMMING CONFIGURATION")
    :commands (yaml-tomato-show-current-path yaml-tomato-copy))

  (use-package yaml-pro
    :tags '("PROGRAMMING CONFIGURATION")
    :hook (yaml-mode . yaml-pro-mode)
    :bind (
      <<keybindings-gen(table=yaml-pro-keybindings)>>
    ))
#+end_src

*** DONE VIM
CLOSED: [2021-01-04 Mon 06:55]
:PROPERTIES:
:ID:       a24a2927-2cc8-46bb-a563-3d68c00c0733
:END:
I am using VIM as an alternative editor for quick editions, so I need to be able to modify its configuration.
To do so, I actually use Emacs and rely on =vimrc-mode=.

#+begin_src emacs-lisp
  (use-package vimrc-mode
    :tags '("PROGRAMMING" "CONFIGURATION")
    :mode ("^\\.vimrc\\'" "/etc/vim/vimrc"))
#+end_src

*** DONE GIT
CLOSED: [2021-01-04 Mon 06:58]
:PROPERTIES:
:ID:       384f69cb-fc11-46a2-92bb-02b9b59a92e6
:END:
I am using GIT as my main VC.
GIT relies on, at least, three types of configuration files: the general ~config~ , the ~gitignore~ and the ~attributes~ files.
I use a dedicated mode for each type.

#+begin_src emacs-lisp
  (use-package git-modes
    :tags '("PROGRAMMING" "CONFIGURATION" "VC")
    :mode
    ("/\.gitconfig\'"    . gitconfig-mode)
    ("/vcs/gitconfig\'"  . gitconfig-mode)
    ("/\.dockerignore\'" . gitignore-mode))
#+end_src

*** DONE Dockerfile
CLOSED: [2021-01-04 Mon 07:01]
:PROPERTIES:
:ID:       8b8da781-6ef9-46fe-81de-660e6d6555eb
:END:
I am a constant user of Docker.
Consequently, I need a proper node to edit docker build files as I build my own images for my experiences.

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :tags '("PROGRAMMING" "CONFIGURATION" "SYSTEM")
    :hook
    (dockerfile-mode . eglot-ensure))
#+end_src

*** DONE CRON
CLOSED: [2021-01-04 Mon 07:03]
:PROPERTIES:
:ID:       fee75970-9d74-4731-8081-65f0740669b0
:END:
CRON is a useful tool to plan some executions.
However the default editor is too raw for me.
While I would generally use VIM for such editions, I prefer to use emacs configured using =crontab-mode= to avoid mistakes.

#+begin_src emacs-lisp
  (use-package crontab-mode
    :tags '("PROGRAMMING" "CONFIGURATION" "SYSTEM"))
#+end_src

** DONE Logging
CLOSED: [2021-01-04 Mon 07:07]
:PROPERTIES:
:ID:       c73c34a0-24d5-4267-b324-0391fe77aaff
:END:
In all of my scripts/software, I rely more on loggers than print.
Therefore, visualizing logs is key and =log-view= is a really flexible mode for this.
While it is configured to open files whose basenames contain ~syslog~ or the extension is composed by ~.log~.
In both cases, backup numbers are as well supported.

#+begin_src emacs-lisp
  (use-package logview
    :tags '("LANGUAGE")
    :commands logview-mode
    :mode
    ("\\.log\\(?:\\.[0-9]+\\)?\\'" . logview-mode)
    ("syslog\\(?:\\.[0-9]+\\)?\\'" . logview-mode))
#+end_src

** DONE Programming languages [100%]
:PROPERTIES:
:ID:       f66a54c9-3c9d-4f7a-adfa-a9653ebb0048
:END:
I am using emacs as IDE for multiple languages.
For my research, I am using mainly on python, shell, java and maths-based languages.
I, obviously, write some elisp code as well.
Consequently, this section configure all of these languages.

*** DONE Emacs Lisp
CLOSED: [2021-01-04 Mon 07:38]
:PROPERTIES:
:ID:       770ee7a1-1594-4061-9b82-0199a9b28517
:END:
The configuration of emacs, to edit (e)lisp files, consists mainly of adding a linter support (~package-lint~) and REPL environment (~elpl~).
I also added a hydra configuration to link properly everything.

#+transclude: [[file:keytable_summary.org::Elisp]] :only-contents

#+begin_src emacs-lisp
  (use-builtin emacs-lisp-mode
    :mode-hydra
    (emacs-lisp-mode
     ("Eval" (
       <<hydra-keybindings-gen(table=elisp-mode-hydra-eval-keybindings)>>
     )

     "REPL" (
       <<hydra-keybindings-gen(table=elisp-mode-hydra-repl-keybindings)>>
     )

     "Formatting/linting" (
       <<hydra-keybindings-gen(table=elisp-mode-hydra-formatting-keybindings)>>
     )

     "Test" (
       <<hydra-keybindings-gen(table=elisp-mode-hydra-test-keybindings)>>
     )

     "Doc" (
       <<hydra-keybindings-gen(table=elisp-mode-hydra-doc-keybindings)>>
     )
    )))

  (use-package package-lint
    :tags '("PROGRAMMING" "ELISP" "COMPILATION")
    :commands package-lint-current-buffer)

  (use-package elpl
    :tags '("PROGRAMMING" "ELISP" "REPL")
    :commands (elpl))
#+end_src

*** DONE C/C++/CMake
CLOSED: [2023-09-23 Sat 21:24]
:PROPERTIES:
:ID:       0854e67b-91d0-4171-a924-1193cf0a1d6e
:END:
**** Overall part
:PROPERTIES:
:ID:       480785b5-a2d2-4967-9591-98548725de6f
:END:
#+begin_src emacs-lisp
  (use-builtin c-mode
    :tags '("PROGRAMMING" "C" "CPP")
    :hook
    (c-mode . eglot-ensure))

  (use-builtin c++-mode
    :tags '("PROGRAMMING" "C" "CPP")
    :hook
    (c++-mode . eglot-ensure))
#+end_src

**** Use google programming style
:PROPERTIES:
:ID:       eb4568fa-e897-46ea-90c7-1853916406e2
:END:
#+BEGIN_SRC emacs-lisp
  (use-package google-c-style
    :tags '("PROGRAMMING" "C" "CPP")
    :hook
    (c-mode-common . google-set-c-style)
    (c-mode-common . google-make-newline-indent))
#+END_SRC

**** Treat =.h= as C++
:PROPERTIES:
:ID:       ced7fb3c-2036-4675-8898-01b137b7ef61
:END:
Identify =.h= files as C++ files instead of C. To enable =c++-mode= manually, type =M-x c\+\+-mode=.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC

**** Clang-format
:PROPERTIES:
:ID:       c48ea187-de78-430f-8acf-026df2a3e08d
:END:
***** Installation
:PROPERTIES:
:ID:       1b58d80b-7049-4c07-9551-86694522bb6b
:END:
#+transclude: [[file:keytable_summary.org::C/C++]] :only-contents

#+BEGIN_SRC emacs-lisp
  (use-package clang-format
    :tags '("PROGRAMMING" "C" "CPP")
    :bind (
      <<keybindings-gen(table=clang-format-entry-keybindings)>>
    ))
#+END_SRC

***** Set code style
:PROPERTIES:
:ID:       919c1cd5-f7bf-43b6-8800-61a51dc3ce16
:END:
Use Google's C++ style.
#+BEGIN_SRC emacs-lisp
  (custom-set-variables '(clang-format-style "file"))
#+END_SRC

**** Doxygen Highlighting
:PROPERTIES:
:ID:       19b42202-1857-461f-93c2-42a9c2862739
:END:
Add highlighting for doxygen blocks.
#+BEGIN_SRC emacs-lisp
  (use-package highlight-doxygen
    :tags '("PROGRAMMING" "C" "CPP")
    :hook
    (c-mode-common . highlight-doxygen-mode))
#+END_SRC

**** CMake
:PROPERTIES:
:ID:       c615d617-d8f6-44a2-8d81-feab5c7aa007
:END:
#+begin_src emacs-lisp
  (use-package cmake-mode
    :tags '("PROGRAMMING" "CMAKE")
    :mode "CMakeLists.txt")
#+end_src

Eldoc for CMake.
#+BEGIN_SRC emacs-lisp
  (use-package eldoc-cmake
    :tags '("PROGRAMMING" "CMAKE")
    :defer t
    :hook (cmake-mode . eldoc-cmake-enable))
#+END_SRC

Additional syntax highlighting for CMake. For some reason manual activation is still required.
#+BEGIN_SRC emacs-lisp
  (use-package cmake-font-lock
    :tags '("PROGRAMMING" "CMAKE")
    :init (autoload 'cmake-font-lock-activate "cmake-font-lock" nil t)
    :hook (cmake-mode . cmake-font-lock-activate))
#+END_SRC

*** DONE Java based languages
CLOSED: [2021-01-04 Mon 07:19]
:PROPERTIES:
:ID:       d14ba18f-155c-4a79-9a04-a984efcdf991
:END:
I use Java and two dialects based on Java: Groovy and Kotlin.
I strongly rely on LSP, so the configuration consists mainly on loading major mode and configuring the LSP servers.

#+begin_src emacs-lisp

  (use-package java-snippets
    :tags '("PROGRAMMING" "JAVA" "COMPLETION")
    )

  (use-package groovy-mode
    :tags '("PROGRAMMING" "JAVA" "GROOVY")
    :mode ("\.groovy$" "\.gradle$")
    :interpreter ("gradle" "groovy")
    :hook
    (groovy-mode .  (lambda () (inf-groovy-keys)))

    :config
    (autoload 'run-groovy "inf-groovy" "Run an inferior Groovy process")
    (autoload 'inf-groovy-keys "inf-groovy" "Set local key defs for inf-groovy in groovy-mode"))

  ;; Subpackages
  (use-package groovy-imports
    :tags '("PROGRAMMING" "JAVA" "GROOVY")
    )

  (use-package kotlin-mode
    :tags '("PROGRAMMING" "JAVA" "KOTLIN")
    :mode "\\.kts?\\'"

    :config
    (setq kotlin-tab-width 4))
#+end_src

*** DONE Mathematics based languages
CLOSED: [2021-01-04 Mon 07:16]
:PROPERTIES:
:ID:       76566986-107a-4ca3-afe2-4b401ce4b55b
:END:
I am using two main (exclusive?!) mathematic dedicated languages: Matlab and R.
For matlab, I rely on =matlab-mode= for which I tweaked the command to avoid matlab desktop loading.
For R, I rely on =ess= which provides excellent support with a reasonable default configuration.

#+begin_src emacs-lisp
  (use-package matlab-load
    :ensure matlab-mode
    :tags '("PROGRAMMING" "MATH" "MATLAB")
    :defines (matlab-shell-command-switches mlint-programs)
    :no-require t
    :mode ("\\.m$" . matlab-mode)
    :commands (matlab-shell)

    :config
    ;; (eval-after-load 'flycheck
    ;;   '(require 'flycheck-matlab-mlint)))

    ;; Command defines
    (setq matlab-shell-command-switches '("-nodesktop -nosplash")
          mlint-programs '("mlint" "glnxa64/mlint")))


  ;; ESS for R programming
  (use-package ess
    :tags '("PROGRAMMING" "MATH" "R")
    :config
    (setq ess-default-style 'RRR+))
#+end_src

*** DONE Python
CLOSED: [2021-01-04 Mon 07:42]
:PROPERTIES:
:ID:       4d7e5c12-a474-49f9-a309-657a287bb005
:END:
Python is my main programming language, so the one I configured the most intensively.
I prefer to use ~ipython~ as the interpreter as it is more powerful.
I use =python-mls= to enhance the REPL environment.
I also use =jinja2= as a template format
Finally, I use =numpydoc= to deal with the documentation.


#+transclude: [[file:keytable_summary.org::python-entry-keybindings]]

#+begin_src emacs-lisp
  (use-builtin python
    :tags '("PROGRAMMING" "PYTHON")
    :bind (:map python-mode-map (
      <<keybindings-gen(table=python-entry-keybindings)>>
    ))

    :hook
    (python-ts-mode . eglot-ensure)

    :init
    (setq-default indent-tabs-mode nil)
    (setq-default python-indent-offset 4)
    (add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode)))

  (use-package jinja2-mode
    :tags '("PROGRAMMING" "PYTHON" "TEMPLATE")
    :mode ("\\.tpl\\'"))

  (use-package python-mls
    :ensure (python-mls :host github :repo "jdtsmith/python-mls")
    :tags '("PROGRAMMING" "PYTHON")
    :custom
    (python-mls-multiline-history-modifier '(meta shift))
    :hook
    (inferior-python-mode . python-mls-mode))

  (use-package numpydoc
    :tags '("PROGRAMMING" "PYTHON" "DOCUMENTATION")
    :after python
    :commands (numpydoc-generate))
#+end_src

*** DONE Shell
CLOSED: [2021-01-04 Mon 07:25]
:PROPERTIES:
:ID:       60767d3f-ca28-4c7b-a62a-992cc9ac96f1
:END:
Editing bash/zsh files is relatively straightforward using Emacs' default configuration.
Nonetheless, a proper completion support is lacking and some helpers are always welcomed.

#+begin_src emacs-lisp
  (use-builtin sh-script
    :tags '("PROGRAMMING" "SHELL")
    :hook
    (sh-mode . eglot-ensure))
#+end_src

*** DONE Plotting/Graphing
CLOSED: [2021-03-01 Mon 09:39]
:PROPERTIES:
:ID:       89456f85-915d-4759-bd7b-5adb60581b03
:END:
I tend to use some specific languages to do some plotting.
For now, I am using only ~graphivz/DOT~, =d2= and ~tikz/pgf~.
This last one is configured on the latex part.
Therefore, in this section, I add the support of =graphviz-dot-mode= and =d2-mode=.

#+begin_src emacs-lisp
  (use-package graphviz-dot-mode
    :tags '("PROGRAMMING" "PLOTTING")
    :init
    (defvar default-tab-width nil)

    :mode ("\\.dot\\'"))

  (use-package d2-mode
    :tags '("PROGRAMMING" "PLOTTING")
    :mode ("\\.d2\\'"))

  (use-package ob-d2
    :tags '("PROGRAMMING" "ORG" "PLOTTING")
    :init
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((d2 . t))))
#+end_src

*** DONE Web
CLOSED: [2022-01-12 Wed 12:27]
:PROPERTIES:
:ID:       57d9bf0f-90db-4d2a-b5ad-ffe5b60e5489
:END:
I use =web-mode= to edit any kind of web-programming (html, css, and templates).

#+begin_src emacs-lisp
  (use-package web-mode
    :tags '("PROGRAMMING" "WEB")
    :mode (".twig$" ".html?$")

    :config
    (setq web-mode-markup-indent-offset 4
          web-mode-css-indent-offset 4
          web-mode-code-indent-offset 4
          web-mode-style-padding 4
          web-mode-script-padding 4
          web-mode-enable-auto-closing t
          web-mode-enable-auto-opening t
          web-mode-enable-auto-pairing t
          web-mode-enable-auto-indentation t)

    ;; Let smartparens handle auto closing brackets, e.g. {{ }} or {% %}
    ;; https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/web/%2Bhtml.el#L56
    (dolist (alist web-mode-engines-auto-pairs)
      (setcdr alist
              (cl-loop for pair in (cdr alist)
                       unless (string-match-p "^[a-z-]" (cdr pair))
                       collect (cons (car pair)
                                     (string-trim-right (cdr pair)
                                                        "\\(?:>\\|]\\|}\\)+\\'"))))))
#+end_src

*** DONE Sound and Music
CLOSED: [2023-03-15 Wed 12:54]
:PROPERTIES:
:ID:       aa8c24f6-0b3c-4c0d-b3b1-3d568da0d5a2
:END:
=csound= is a neat tool to synthesize sound and music.
The configuration is pretty minimal - just associate the mode to the proper extensions.
#+begin_src emacs-lisp
  (when (executable-find "csound")
    (use-package csound-mode
      :tags '("PROGRAMMING" "SOUND" "MULTIMEDIA")
      :mode (("\\.csd\\'" . csound-mode)
             ("\\.orc\\'" . csound-mode)
             ("\\.sco\\'" . csound-mode)
             ("\\.udo\\'" . csound-mode))))
#+end_src

*** DONE UI
CLOSED: [2025-03-02 Sun 21:15]
#+BEGIN_SRC emacs-lisp
  (use-package qml-ts-mode
    :tags '("PROGRAMMING" "UI")
    :ensure (qml-ts-mode :type git :host github :repo "xhcoding/qml-ts-mode"))
#+END_SRC

* DONE Writing / Reading [100%]
:PROPERTIES:
:ID:       804c1719-e469-4283-8dcf-59673df0f12a
:END:
I decided to dissociate programming and writing for more clarity.
Nonetheless, both sections rely on the same principles.
Concerning the writing part, I use mainly org-mode and LaTeX (article and shared documents).
I also use markdown for README and collaborative projects.
Finally, concerning the reading part, I consider only PDF Files.
I use libreoffice/office 365 for official documents which can't be handled in PDF.

** DONE LaTeX [100%]
:PROPERTIES:
:ID:       63fbdfe6-b1be-48f9-a9d2-c1b3aa8d3bbd
:END:
LaTeX is the core languages I am using to write scientific documents and presentations.
My configuration relies mainly on auctex but I had to tweak several part to match my way of dealing with such files.
These tweaks concerns mainly of using =outline= to deal with folding,
using the ~enquote~ command to do some quotation in latex and prepare a proper pdf compilation/synchronization.

#+begin_src emacs-lisp
  (use-package auctex
    :ensure (:repo "https://git.savannah.gnu.org/git/auctex.git"
                   :local-repo "auctex" :files ("*" :exclude ".git")
                   :protocol https :inherit t :depth 1
                   :pre-build (
                     ("chmod" "775" "autogen.sh")
                     ("./autogen.sh")
                     ("./configure"
                      "--without-texmf-dir"
                      "--with-packagelispdir=$PWD/"
                      "--with-packagedatadir=$PWD/"
                      "--with-lispdir=$PWD/tex-site.el")
                     ("make"))
                   :version (lambda (_) (require 'auctex) AUCTeX-version)
                   ))

  (use-builtin tex
    :tags '("WRITING" "LATEX")
    :after auctex
    :hook
    (LaTeX-mode . turn-off-auto-fill)
    (LaTeX-mode . (lambda () (TeX-fold-mode t)))
    (LaTeX-mode . LaTeX-math-mode)
    (LaTeX-mode . outline-minor-mode)
    (LaTeX-mode . TeX-source-correlate-mode)
    (TeX-after-compilation-finished-functions . TeX-revert-document-buffer)

    :config
    (require 'latex)
    ;; PDF activated by default
    (TeX-global-PDF-mode 1)

    ;; Diverse
    (setq-default TeX-master nil)
    (setq TeX-parse-self t
          TeX-auto-save t)

    ;; Minor helpers for comment and quotes
    (add-to-list 'LaTeX-verbatim-environments "comment")
    (setq TeX-open-quote "\\enquote{"
          TeX-close-quote "}")

    ;; Indentation
    (setq LaTeX-indent-level 4
          LaTeX-item-indent 0
          TeX-brace-indent-level 4
          TeX-newline-function 'newline-and-indent)

    ;; PDF/Tex correlation
    (setq TeX-source-correlate-method 'synctex
          TeX-view-program-selection '((output-pdf "PDF Tools")))

    ;; Keys
    (define-key LaTeX-mode-map (kbd "C-c C-=") 'align-current))

  (use-package latex-table-wizard
    :tags '("WRITING" "LATEX")
    :after tex)

  (use-package sentex
    :ensure (sentex :type git
                    :repo "https://codeberg.org/martianh/sentex"
                    :files ("*.el" "*.eld"))
    :tags '("WRITING" "LATEX"))
#+end_src

*** DONE Reftex
CLOSED: [2021-01-04 Mon 11:55]
:PROPERTIES:
:ID:       752489ce-7615-4975-9031-e9714c098e0a
:END:
I am using =reftex= to deal with references.
The configuration consists mainly of pluging it into auctex and expand the citation keywords and commands.

#+begin_src emacs-lisp
  (use-builtin reftex
    :tags '("WRITING" "LATEX")
    :hook
    (LaTeX-mode . turn-on-reftex)

    :config
    (setq reftex-save-parse-info t
	  reftex-enable-partial-scans t
	  reftex-use-multiple-selection-buffers t
	  reftex-plug-into-AUCTeX t
	  reftex-vref-is-default t
	  reftex-cite-format
	  '((?c    . "\\cite[]{%l}")
	    (?t    . "\\textcite{%l}")
	    (?a    . "\\autocite[]{%l}")
	    (?p    . "\\parencite{%l}")
	    (?f    . "\\footcite[][]{%l}")
	    (?F    . "\\fullcite[]{%l}")
	    (?x    . "[]{%l}")
	    (?X    . "{%l}"))

	  font-latex-match-reference-keywords
	  '(("cite"             "[{")
	    ("cites"            "[{}]")
	    ("footcite"         "[{")
	    ("footcites"        "[{")
	    ("parencite"        "[{")
	    ("textcite"         "[{")
	    ("fullcite"         "[{")
	    ("citetitle"        "[{")
	    ("citetitles"       "[{")
	    ("headlessfullcite" "[{"))

	  reftex-cite-prompt-optional-args nil
	  reftex-cite-cleanup-optional-args t))
#+end_src

*** DONE Completion
CLOSED: [2021-05-18 Tue 16:53]
:PROPERTIES:
:ID:       b90948dc-c8df-4377-b755-7ac2d992d379
:END:

#+begin_src emacs-lisp
  (setq TeX-auto-global (format "%s/auctex/style" user-emacs-directory))
#+end_src

*** DONE Compilation
CLOSED: [2021-01-04 Mon 12:03]
:PROPERTIES:
:ID:       9eafa282-d40d-4955-bfe1-a027c554be4c
:END:
For the compilation, I prefer to use =latexmk=.
It processes everything automatically which removes the burden of having to define the sequence of commands.
I could have used the auctex default sequence, but I prefer to have an homogeneous process with what I do in the shell!

#+begin_src emacs-lisp
  (when (executable-find "latexmk")
    (use-package auctex-latexmk
      :ensure (:type git :host github :repo "wang1zhen/auctex-latexmk")
      :tags '("WRITING" "LATEX" "COMPILATION")
      :after tex
      :config

      ;; Redine TeX-output-mode to get the color !
      (define-derived-mode TeX-output-mode TeX-special-mode "LaTeX Output"
        "Major mode for viewing TeX output.
    \\{TeX-output-mode-map} "
        :syntax-table nil
        (set (make-local-variable 'revert-buffer-function)
             #'TeX-output-revert-buffer)

        (set (make-local-variable 'font-lock-defaults)
             '((("^!.*" . font-lock-warning-face) ; LaTeX error
                ("^-+$" . font-lock-builtin-face) ; latexmk divider
                ("^\\(?:Overfull\\|Underfull\\|Tight\\|Loose\\).*" . font-lock-builtin-face)
                ;; .....
                )))

        ;; special-mode makes it read-only which prevents input from TeX.
        (setq buffer-read-only nil))

      ;; Setup everything
      (setq auctex-latexmk-inherit-TeX-PDF-mode t
            TeX-show-compilation nil)
      (auctex-latexmk-setup)))
#+end_src

*** DONE Preview
CLOSED: [2021-01-04 Mon 12:05]
:PROPERTIES:
:ID:       32a237cb-76e6-4d48-b8e8-2aa3ac6d13db
:END:
Complicated equations can be difficult to parse properly at first sight.
I use =xenops= to generate a preview of the equations.
=xenops= is also compatible with org-mode but I use it more with latex.
Therefore, it is activated by default for latex but not for org files.

#+begin_src emacs-lisp
  (use-package xenops
    :tags '("WRITING" "LATEX" "ORG" "DESKTOP")
    :after tex
    :commands (xenops-mode xenops-doctor)
    :hook
    (latex-mode . xenops-mode))
#+end_src

*** DONE Overleaf
CLOSED: [2022-03-08 Tue 16:11]
:PROPERTIES:
:ID:       95bb6b9f-c354-47a8-96a8-f8459ee93bce
:END:
As an academic, I spend a lot of my time in Overleaf, but I prefer to edit in emacs, so =emacs-overleaf= is key!
#+begin_src emacs-lisp
  (use-package emacs-overleaf
    :ensure (:protocol ssh :type git :host github :repo "seblemaguer/emacs-overleaf")
    :tags '("WRITING" "LATEX" "CONNECTED")
    :commands (overleaf-setup overleaf-manual-save overleaf-mode)
    :custom (overleaf-auto-sync "never"))
#+end_src

** DONE Bibtex
CLOSED: [2021-01-04 Mon 12:15]
:PROPERTIES:
:ID:       56665ecc-51a9-4ebc-b635-c35310c247dd
:END:
To store bibliography entries, BibTex is the way to go.
The global configuration consists mainly on providing a way to generate proper keys.
Finally, I use bibclean-format to have a clean final bibtex file.

#+transclude: [[file:keytable_summary.org::Bibtex]] :only-contents

#+begin_src emacs-lisp
  (use-builtin bibtex
    :tags '("WRITING" "BIBTEX")
    :bind (
      :map bibtex-mode-map (
        <<keybindings-gen(table=bibtex-tidy-entry-keybindings)>>
      )
    )

    :config
    (defun bibtex-generate-autokey ()
      (let* ((bibtex-autokey-names nil)
             (bibtex-autokey-year-length 4)
             (bibtex-autokey-name-separator "\0")
             (names (split-string (bibtex-autokey-get-names) "\0"))
             (year (bibtex-autokey-get-year))
             (name-char (cond ((= (length names) 1) 4)
                              ((= (length names) 2) 2)
                              (t 1)))
             (existing-keys (bibtex-parse-keys))
             key)
        (setq names (s-upper-camel-case (car names)))
        (setq key (format "%s:%s" year names))

        (let ((ret key))
          (cl-loop for c from ?a to ?z
                while (assoc ret existing-keys)
                do (setq ret (format "%s:%c" key c)))
          ret)))

    (setq bibtex-align-at-equal-sign t
          bibtex-autokey-name-year-separator ""
          bibtex-autokey-year-title-separator ""
          bibtex-autokey-titleword-first-ignore '("the" "a" "if" "and" "an")
          bibtex-autokey-titleword-length 100
          bibtex-autokey-titlewords 1)

    (defun bibtex-tidy-buffer ()
      "Apply bibtex-tidy to clean the current bibtex buffer and `bibtex-sort-buffer' ."
      (interactive)
      (let ((cmd (format "bibtex-tidy %s %s %s -m %s"
                         "--curly --numeric --space=4 --align=13 --no-escape"
                         "--duplicates=key,doi --trailing-commas --no-remove-dupe-fields"
                         "--sort-fields=title,shorttitle,author,year,month,day,journal,booktitle,location,on,publisher,address,series,volume,number,pages,doi,isbn,issn,url,urldate,copyright,category,note,metadata"
                         (shell-quote-argument (buffer-file-name)))))
        ;; (message cmd)
        (shell-command cmd)
        (revert-buffer t t t)
        (bibtex-sort-buffer))))

  (use-package bibtex-utils
    :tags '("WRITING" "BIBTEX")
    :config
    (setq bibtex-utils-remove-duplicates-prompt 'ask))
#+end_src

** DONE TikZ/PGF
CLOSED: [2021-01-04 Mon 12:18]
:PROPERTIES:
:ID:       bb4b5074-7afa-48ff-b5a8-3337081f394d
:END:
To generate figures, I use sometimes inkscape but main TikZ/PGF.
While ktikz provides a nice tools, the way it deals with the header is problematic for me.
Furthermore, it is not integrated in emacs :D
Therefore, I developed a mode.
However, it relies on a side script ~compilePGF~ being in the PATH!

#+begin_src emacs-lisp
  (use-package tikz-mode
    :ensure (:protocol ssh :type git :host github :repo "seblemaguer/tikz-mode")
    :tags '("WRITING" "BIBTEX" "DESKTOP")
    :after tex)
#+end_src

** DONE Markdown
CLOSED: [2021-01-04 Mon 12:22]
:PROPERTIES:
:ID:       57c67fef-ca10-4f2b-ba4f-58325786825d
:END:
Markdown is the main language used to write READMEs in collaborative projects.
While I prefer it org-mode, I still have to use it for collaborative purposes.
Consequently, I have to get a proper configuration.
Luckily, =markdown-mode= provide more than enough.
I just added =grip-mode= to have a proper preview of the file.

#+transclude: [[file:keytable_summary.org::Markdown]] :only-contents

#+begin_src emacs-lisp
  (use-package markdown-mode
    :tags '("WRITING" "MARKDOWN")
    :mode ("\\.md$"))

  (use-package grip-mode
    :tags '("WRITING" "MARKDOWN" "DESKTOP")
    :commands (grip-mode)
    :bind (
      :map markdown-mode-command-map (
        <<keybindings-gen(table=grip-mode-entry-keybindings)>>
      )
    ))
#+end_src

** DONE Writing helpers
CLOSED: [2021-01-04 Mon 13:05]
:PROPERTIES:
:ID:       1517bfe5-f5c2-4823-8d7d-fca3f4d9ec8f
:END:
As I am prone to constantly using the same writing ways, I need some helpers to get out the loop.
I am using =academic-phrases= to provided starting points and =mw-thesaurus= to find synonyms and/or related words.

#+begin_src emacs-lisp
  (use-package academic-phrases
    :tags '("WRITING" "HELPERS" "CONNECTED")
    :commands (academic-phrases))

  (use-package mw-thesaurus
    :ensure (mw-thesaurus :type git :fetcher github :repo "agzam/mw-thesaurus.el")
    :tags '("WRITING" "HELPERS" "CONNECTED")
    :commands (mw-thesaurus-lookup-at-point))
#+end_src

** DONE Grammar checking
CLOSED: [2021-01-04 Mon 13:06]
:PROPERTIES:
:ID:       034ce652-a6ba-4b42-8621-9fc4d2b8e075
:END:
To help to deal with my poor English, I am using grammarly to check my text.
The package =grammarly= bring its functionality into emacs which is a saver for me.

#+begin_src emacs-lisp
  (use-package eglot-grammarly
    :ensure (:host github :repo "emacs-grammarly/eglot-grammarly")
    :tags '("WRITING" "HELPERS" "CONNECTED")
    :defer t)
#+end_src

** DONE Translation
CLOSED: [2022-12-31 Sat 20:10]
:PROPERTIES:
:ID:       1658e59f-9c64-42e9-af37-bab265edddfe
:END:
As I have the luck to deal with multiple languages (french, english and bulgarian), I need to have a quick access to some translations.
WordReference is my first choice as I find it quite complete and accurate.
As a fallback, I am using google-translate via the package =go-translate=.

#+transclude: [[file:keytable_summary.org::Translation]] :only-contents

#+begin_src emacs-lisp
  (use-package wordreference
    :ensure (:type git :host github :repo "emacsmirror/wordreference")
    :tags '("WRITING" "HELPERS" "TRANSLATION" "CONNECTED")
    :commands (wordreference-search))

  (use-package go-translate
    :tags '("WRITING" "HELPERS" "TRANSLATION" "CONNECTED")
    :bind (
      <<keybindings-gen(table=gt-translate-entry-keybindings)>>
    )

    :config
    (setq gt-preset-translators `((fi2en . ,(gt-translator
                                              :taker   (gt-taker :langs '(fi en) :text 'word)
                                              :engines (gt-google-engine)
                                              :render  (gt-overlay-render)))
                                  (en2fi . ,(gt-translator
                                              :taker   (gt-taker :langs '(en fi) :text 'word)
                                              :engines (gt-google-engine)
                                              :render  (gt-overlay-render)))

                                  (bg2en . ,(gt-translator
                                              :taker   (gt-taker :langs '(bg en) :text 'word)
                                              :engines (gt-google-engine)
                                              :render  (gt-overlay-render)))
                                  (en2bg . ,(gt-translator
                                              :taker   (gt-taker :langs '(en bg) :text 'word)
                                              :engines (gt-google-engine)
                                              :render  (gt-overlay-render)))

                                  (fr2en . ,(gt-translator
                                              :taker   (gt-taker :langs '(fr en) :text 'word)
                                              :engines (gt-google-engine)
                                              :render  (gt-overlay-render)))
                                  (en2fr . ,(gt-translator
                                              :taker   (gt-taker :langs '(en fr) :text 'word)
                                              :engines (gt-google-engine)
                                              :render  (gt-overlay-render)))
                                  )))
#+end_src

* DONE Version Control / Project Management [100%]
:PROPERTIES:
:ID:       47008c15-aa23-44fb-bdd4-7e3b0cf10a7a
:END:
My code project management is articulated around three key points: GIT, github/gist and =projectile=.
GIT is used as the version control manager;
github for the non-sensitive repositories;
gist for snippets and helpers;
=projectile= to provide project helpers.

** DONE Git
CLOSED: [2021-01-04 Mon 15:40]
:PROPERTIES:
:ID:       8774af9b-8475-42d3-8df3-77c733101dd7
:END:
My configuration for GIT relies mainly on =magit=.
Aside the standard key/hydra configuration,
I copied the external opening from https://gist.github.com/dotemacs/9a0433341e75e01461c9
and the pretty configuration is adapted from https://ekaschalk.github.io/post/pretty-magit/

My whole process relies on the commits following this pattern:
#+begin_example
[package] operation: short message

optional further description
#+end_example

where:
 - package :: corresponds to subpart of the repository (so mainly packages, modules, or meta and git related informations).
 - operation :: is ~add~, ~update~, ~fix~, ~clean~ or ~doc~
 - short message :: is a short description
 - optional further description :: is used to complete the short description. It is optional and I don't use it so often; only for complicated tweaks

Finally, I am using ~git-commit-ts-mode~ for a better handling of the commit message buffer.
It will require in case of first installation to run the following command: ~(treesit-install-language-grammar 'gitcommit)~.

#+transclude: [[file:keytable_summary.org::Git]] :only-contents

#+begin_src emacs-lisp
  (use-package magit
    :ensure (:branch "main")
    :tags '("VC" "GIT")
    :commands (magit magit-hydra/body magit-get-current-branch)
    :pretty-hydra
    ((:color blue)
     ("Status/Info" (  ;; NOTE: works only if git-timemachine installed
       <<hydra-keybindings-gen(table=magit-status-hydra-keybindings)>>
      )

      "Remote" (
        <<hydra-keybindings-gen(table=magit-remote-hydra-keybindings)>>
      )

      "Operations" (
        <<hydra-keybindings-gen(table=magit-operations-hydra-keybindings)>>
      )))

    :bind (
      :map magit-mode-map (
        <<keybindings-gen(table=magit-browse-keybindings)>>
      )
    )

    :config

    ;; Ignore recent commit
    (setq magit-status-sections-hook
          '(magit-insert-status-headers
            magit-insert-merge-log
            magit-insert-rebase-sequence
            magit-insert-am-sequence
            magit-insert-sequencer-sequence
            magit-insert-bisect-output
            magit-insert-bisect-rest
            magit-insert-bisect-log
            magit-insert-untracked-files
            magit-insert-unstaged-changes
            magit-insert-staged-changes
            magit-insert-stashes
            magit-insert-unpulled-from-upstream
            magit-insert-unpulled-from-pushremote
            magit-insert-unpushed-to-upstream
            magit-insert-unpushed-to-pushremote))

    ;; Update visualization
    (setq pretty-magit-alist nil
          pretty-magit-prompt nil)

    (defmacro pretty-magit (WORD ICON PROPS &optional NO-PROMPT?)
      "Replace sanitized WORD with ICON, PROPS and by default add to prompts."
      `(prog1
           (add-to-list 'pretty-magit-alist
                        (list (rx bow (group ,WORD (eval (if ,NO-PROMPT? "" ":"))))
                              ,ICON ',PROPS))
         (unless ,NO-PROMPT?
           (add-to-list 'pretty-magit-prompt (concat ,WORD ":")))))

    ;; Operations
    (pretty-magit "add:"      ?ï¶  (:foreground "#375E97" :height 1.2) t)
    (pretty-magit "update:"   ?â   (:foreground "#375E97" :height 1.2) t)
    (pretty-magit "fix:"      ?ï  (:foreground "#FB6542" :height 1.2) t)
    (pretty-magit "clean:"    ?ï  (:foreground "#FFBB00" :height 1.2) t)
    (pretty-magit "doc:"      ?ï  (:foreground "#3F681C" :height 1.2) t)

    ;; Meta information
    (pretty-magit "master"    ?î¤  (:box nil :height 1.2)             t)
    (pretty-magit "origin"    ?ï  (:box nil :height 1.2)             t)
    (pretty-magit "upstream"  ?ïµ  (:box nil :height 1.2)             t)

    (defun add-magit-faces ()
      "Add face properties and compose symbols for buffer from pretty-magit."
      (interactive)
      (with-silent-modifications
        (--each pretty-magit-alist
          (-let (((rgx icon props) it))
            (save-excursion
              (goto-char (point-min))
              (while (search-forward-regexp rgx nil t)
                (compose-region
                 (match-beginning 1) (match-end 1) icon)
                (when props
                  (add-face-text-property
                   (match-beginning 1) (match-end 1) props))))))))

    (advice-add 'magit-status :after 'add-magit-faces)
    (advice-add 'magit-refresh-buffer :after 'add-magit-faces)

    ;; Opening repo externally
    (defun parse-url (url)
      "convert a git remote location as a HTTP URL"
      (if (string-match "^http" url)
          url
        (replace-regexp-in-string "\\(.*\\)@\\(.*\\):\\(.*\\)\\(\\.git?\\)"
                                  "https://\\2/\\3"
                                  url)))
    (defun magit-open-repo ()
      "open remote repo URL"
      (interactive)
      (let ((url (magit-get "remote" "origin" "url")))
        (progn
          (browse-url (parse-url url))
          (message "opening repo %s" url)))))

  (use-package magit-tbdiff
    :tags '("VC" "GIT")
    :after magit)

  (use-package magit-todos
    :tags '("VC" "GIT" "TODOS")
    :commands (magit-todos-mode)
    :hook (magit-mode . magit-todos-mode)
    :custom
    (magit-todos-exclude-globs '(".git/" "*.map"))
    (magit-todos-recursive t)
    (magit-todos-depth 10))

  (use-package why-this
    :tags '("VC" "GIT"))

  (use-package git-commit-ts-mode
    :ensure (:host github :repo "danilshvalov/git-commit-ts-mode")
    :tags '("VC" "GIT")
    :custom
    (git-commit-major-mode #'git-commit-ts-mode)
    :init
    (add-to-list 'treesit-language-source-alist
                 '(gitcommit . ("https://github.com/gbprod/tree-sitter-gitcommit"))))

  (when (executable-find "gh")
    (use-package consult-gh
      :tags '("VC" "GIT" "GITHUB")
      :after consult

      :config
      ;;add your main GitHub account (replace "armindarvish" with your user or org)
      (add-to-list 'consult-gh-favorite-orgs-list "seblemaguer")

      ;;use "gh org list" to get a list of all your organizations and adds them to default list
      (setq consult-gh-favorite-orgs-list (append consult-gh-favorite-orgs-list (remove "" (split-string (or (consult-gh--command-to-string "org" "list") "") "\n"))))

      ;; set the default folder for cloning repositories, By default Consult-GH will confirm this before cloning
      (setq consult-gh-default-clone-directory "~/tmp/to_sort_repos")))
#+end_src

*** DONE Git helpers
CLOSED: [2021-01-04 Mon 15:39]
:PROPERTIES:
:ID:       91580624-afa6-466d-9bf7-9ba8f488132a
:END:
In order to be more efficient with git, I also need some helpers.
I use =gitignore-snippets= to provide starting gitignore content;
=git-timemachine= to navigate changes of a dedicated file,
 and =git-patch= to send a patch via email (if necessary obviously.)
#+begin_src emacs-lisp
  (use-package gitignore-snippets
    :tags '("VC" "GIT")
    )

  (use-package git-timemachine
    :tags '("VC" "GIT")
    :commands (git-timemachine-toggle)
    )

  (use-package gitpatch
    :tags '("VC" "GIT" "CONNECTED")
    :config
    (setq gitpatch-mail-attach-patch-key "C-c i"))
#+end_src

** DONE Github
CLOSED: [2021-01-04 Mon 15:45]
:PROPERTIES:
:ID:       f0123818-c863-4dd2-a157-f743203acab0
:END:
GIT is the tool I am using for VC.
I am mainly using github to store non-sensitive repositories.
To interact with github in emacs, I rely on three packages:
=forge= as an entry point and which is integrating nicely with magit;
=github-explorer= to browse a repository in emacs;
=github-review= to deal with code reviewing (which integrates well with =forge=).

#+transclude: [[file:keytable_summary.org::Github]] :only-contents

#+begin_src emacs-lisp
  (use-package ghub
    :ensure (:branch "main")
   ;; NOTE: dirty hack to ensure the version is properly set - this impacts gh-notify
    :tags '("VC" "GIT" "GITHUB" "CONNECTED"))

  (use-package forge
    :ensure (:branch "main")
    :tags '("VC" "GIT" "GITHUB" "CONNECTED")
    :defer t
    :after magit
    :custom-face
    (forge-topic-closed ((t (:strike-through t :inherit magit-dimmed)))))

  (use-package gh-notify
    :ensure (:type git :host github :repo "anticomputer/gh-notify")
    :tags '("VC" "GIT" "GITHUB" "CONNECTED"))

  ;; Extracted from https://github.com/anticomputer/gh-notify
  (use-package github-review
    :tags '("VC" "GIT" "GITHUB" "CONNECTED")
    :after forge
    :bind (
      <<keybindings-gen(table=github-review-entry-keybindings)>>

      :map diff-mode-map (
        <<keybindings-gen(table=github-review-diff-keybindings)>>
      )
    )

    :config
    (defun my/github-review-kill-suggestion ()
      ;; kill a region of diff+ as a review suggestion template
      (interactive)
      (setq deactivate-mark t)
      (let ((s-region
             (buffer-substring-no-properties
              (region-beginning)
              (region-end))))
        (kill-new
         (format "# ```suggestion\n%s\n# ```\n"
                 (replace-regexp-in-string "^\\+" "# " s-region))))))
#+end_src

** DONE Gist
CLOSED: [2021-01-04 Mon 15:47]
:PROPERTIES:
:ID:       140c3924-812a-44dc-8f47-b44e7865531a
:END:
For scripts/helpers/snippets/... which do not deserve to be saved in a dedicated repository,
I am storing them in a dedicated gist.
The package =gist= provides a nice way of dealing with gists.

#+transclude: [[file:keytable_summary.org::Gist]] :only-contents

#+begin_src emacs-lisp
  (use-package gist
    :tags '("VC" "GIT" "GITHUB" "CONNECTED")
    :mode-hydra
    (gist-list-mode
     (:color red)
     ("Basic" (
       <<hydra-keybindings-gen(table=gist-mode-hydra-basic-keybindings)>>
      )

      "Information" (
       <<hydra-keybindings-gen(table=gist-mode-hydra-information-keybindings)>>
      )

      "Starring" (
       <<hydra-keybindings-gen(table=gist-mode-hydra-starring-keybindings)>>
      )

      "Remote" (
       <<hydra-keybindings-gen(table=gist-mode-hydra-remote-keybindings)>>
      )
     )))
#+end_src

** DONE Project management
CLOSED: [2023-10-27 Fri 09:32]
:PROPERTIES:
:ID:       432507f1-450f-451e-92c7-ae0a15b3c44b
:END:

#+begin_src emacs-lisp
  (use-package project-x
    :ensure (:type git :host github :repo "karthink/project-x")
    :after project
    :config
    (add-hook 'project-find-functions 'project-x-try-local 90)
    (add-hook 'kill-emacs-hook 'project-x--window-state-write)
    (setq project-switch-commands #'project-x-windows
          project-x-local-identifier '("package.json" "pyproject.toml" ".project"))

    :bind (("C-x p w" . project-x-window-state-save)
           ("C-x p j" . project-x-window-state-load)))


  (use-package projection
    :tags '("PROJECT")
    ;; Enable the `projection-hook' feature.
    :hook (elpaca-after-init . global-projection-hook-mode)
    ;; Require projections immediately after project.el.
    :config
    (with-eval-after-load 'project
      (require 'projection))

    ;; Access pre-configured projection commands from a keybinding of your choice.
    ;; Run `M-x describe-keymap projection-map` for a list of available commands.
    :bind-keymap
    ("C-x P" . projection-map))

  (use-package projection-multi
    :tags '("PROJECT"))

  (use-package projection-multi-embark
    :disabled t
    :tags '("PROJECT")
    :after embark
    :after projection-multi
    :defer t
    ;; Add the projection set-command bindings to `compile-multi-embark-command-map'.
    :config (projection-multi-embark-setup-command-map))
#+end_src

* DONE Shell [100%]
CLOSED: [2025-05-15 Thu 19:42]
:PROPERTIES:
:ID:       075657a9-12e8-4cce-838f-956499275dad
:END:
Sometimes I need to start a terminal inside Emacs (not only for geekery-purposes).
To do so, I rely now on =vterm= coupled with zsh.
I have a specific PowerLevel10K theme for emacs vterm which is more compact (see my zshrc configuration).

#+transclude: [[file:keytable_summary.org::Shell]] :only-contents

#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :tags '("TERM")
    :ensure (vterm :post-build
                   (progn
                     (setq vterm-always-compile-module t)
                     (require 'vterm)
                     ;;print compilation info for elpaca
                     (with-current-buffer (get-buffer-create vterm-install-buffer-name)
                       (goto-char (point-min))
                       (while (not (eobp))
                         (message "%S"
                                  (buffer-substring (line-beginning-position)
                                                    (line-end-position)))
                         (forward-line)))
                     (when-let ((so (expand-file-name "./vterm-module.so"))
                                ((file-exists-p so)))
                       (make-symbolic-link
                        so (expand-file-name (file-name-nondirectory so)
                                             "../../builds/vterm")
                        'ok-if-already-exists))))
    :custom (vterm-always-compile-module t)

    :config
    ;; Cleaning
    (setq vterm-kill-buffer-on-exit t)

    ;; Function keys are not used in therm
    (mapcar (lambda (key)
              (define-key vterm-mode-map (kbd key) nil))
            '("<f1>" "<f2>" "<f3>" "<f4>" "<f5>" "<f6>"
              "<f7>" "<f8>" "<f9>" "<f10>" "<f11>" "<f12>"
              "<prior>" "<next>"))

    ;; Better directory tracking
    (push (list "update-pwd" (lambda (path) (setq default-directory path)))
          vterm-eval-cmds)

    ;; Opening file in emacs directly
    (push (list "find-file-below"
                (lambda (path)
                  (if-let* ((buf (find-file-noselect path))
                            (window (display-buffer-below-selected buf nil)))
                      (select-window window)
                    (message "Failed to open file: %s" path))))
          vterm-eval-cmds))

  (use-package mistty
    :tags '("TERM")
    :bind (
      :map mistty-prompt-map (
        <<keybindings-gen(table=mistty-prompt-keybindings)>>
      )
    )
    :commands (mistty-mode)
    :init
    (defun mistty-bash ()
      "Spawn a MisTTY buffer with a bash shell in it."
      (interactive)
      (with-current-buffer (generate-new-buffer "*terminal*")
        (mistty-mode)
        (pop-to-buffer (current-buffer))
        (mistty-exec '("bash")))
      )
    (defun mistty-zsh ()
      "Spawn a MisTTY buffer with a zsh shell in it."
      (interactive)
      (with-current-buffer (generate-new-buffer "*terminal*")
        (mistty-mode)
        (pop-to-buffer (current-buffer))
        (mistty-exec '("zsh")))
      )
    (defun mistty-ipython ()
      "Spawn a MisTTY buffer with a ipython shell in it."
      (interactive)
      (with-current-buffer (generate-new-buffer "*ipython*")
        (mistty-mode)
        (pop-to-buffer (current-buffer))
        (mistty-exec '("ipython")))
      )
    )

  (use-package comint-mime
    :tags '("TERM")
    :when (display-graphic-p)
    :hook
    ((shell-mode-hook . comint-mime-setup)
     (inferior-python-mode-hook . comint-mime-setup)))

  (use-package comint-histories
    :tags '("TERM")
    :config
    (comint-histories-mode 1)

    (setq comint-histories-global-filters '((lambda (x) (<= (length x) 3))))

    (comint-histories-add-history gdb
      :predicates '((lambda () (string-match-p "^(gdb)" (comint-histories-get-prompt))))
      :length 2000)

    (comint-histories-add-history python
      :predicates '((lambda () (or (derived-mode-p 'inferior-python-mode)
                                   (string-match-p "^>>>" (comint-histories-get-prompt)))))
      :length 2000)

    (comint-histories-add-history ielm
      :predicates '((lambda () (derived-mode-p 'inferior-emacs-lisp-mode)))
      :length 2000)

    (comint-histories-add-history shell
      :predicates '((lambda () (derived-mode-p 'shell-mode)))
      :filters '("^ls" "^cd")
      :length 2000)

    (define-key comint-mode-map (kbd "C-r") #'(lambda () (interactive)
                                                (let ((ivy-sort-functions-alist nil)
                                                      (ivy-prescient-enable-sorting nil)
                                                      (vertico-sort-function nil)
                                                      (vertico-sort-override-function nil)
                                                      (vertico-prescient-enable-sorting nil)
                                                      (selectrum-should-sort nil)
                                                      (selectrum-prescient-enable-sorting nil))
                                                  (call-interactively #'comint-histories-search-history)))))
#+END_SRC

* DONE File manager [100%]
:PROPERTIES:
:ID:       b22d3be8-b0d8-4216-9dca-ea8728259147
:END:
I am using emacs as my main file manager.
To do so, I rely on =dired= which is builtin package which I tweaked massively and I added multiple subpackages to improve UX.
I also added support for basic image processing and some additional operations (trashing, visualising diffs, ...).

** DONE Dired/Dirvish [100%]
CLOSED: [2021-01-04 Mon 18:55]
:PROPERTIES:
:ID:       e265f0f4-7f45-4155-8181-384d25f1fa94
:END:
The configuration of =dired= focuses mainly on defining keys, tuning the files to omit, and tweaking the LS command used to get the informations.
The hydra mapping is adapted from https://github.com/abo-abo/hydra/wiki/Dired.
I also replace a base deletion by moving the files/directories to the trash.

#+transclude: [[file:keytable_summary.org::Dired/Dirvish]] :only-contents

#+begin_src emacs-lisp
  (use-package dirvish
    :tags '("FILE_MANAGEMENT" "DIRED")
    :init
    ;; Let Dirvish take over Dired globally
    (dirvish-override-dired-mode)

    (setq-default dired-omit-files "^\\.\\([a-zA-Z0-9].*\\)?$"
                  dired-omit-mode t)

    :hook (dired-mode . dired-omit-mode)

    :bind (
      <<keybindings-gen(table=dired-global-keybindings)>>

      :map dired-mode-map
      <<keybindings-gen(table=dired-mode-keybindings)>>

      ;; Remap some keys
      ([remap dired-sort-toggle-or-edit] . dirvish-quicksort)
      ([remap dired-do-redisplay]        . dirvish-ls-switches-menu)
      ([remap dired-summary]             . dirvish-dispatch)
      ([remap dired-do-copy]             . dirvish-yank-menu)
    )

    :custom
    (dired-listing-switches "-l --almost-all --human-readable --time-style=long-iso --group-directories-first --no-group")
    (dirvish-attributes (append '(vc-state subtree-state all-the-icons collapse) ;; Order doesn't matter for these ones
                                '(git-msg file-modes file-time file-size))) ;; Order = FIFO

    (dirvish-yank-keys '(("y" "Yank (paste) here"           dirvish-yank)
                         ("m" "Move here"                   dirvish-move)
                         ("s" "Make symlinks here"          dirvish-symlink)
                         ("r" "Make relative symlinks here" dirvish-relative-symlink)
                         ("h" "Make hardlinks here"         dirvish-hardlink)
                         ("d" "Duplicate here"              dired-do-copy)))

    (dirvish-bookmarks-alist '(("h" "~/" "Home")
                               ("d" "~/Downloads/" "Downloads")
                               ("t" "~/.local/share/Trash/files/" "TrashCan")))

    :config

    ;; When deleting, send actually to the trash!
    (setq dired-recursive-deletes 'always
          delete-by-moving-to-trash t
          dirvish-use-mode-line nil)

    ;; Enable mouse drag-and-drop files to other applications
    (setq dired-mouse-drag-files t                    ; added in Emacs 29
          mouse-drag-and-drop-region-cross-program t) ; added in Emacs 29

    (defun dired-do-transfer-to-remarkable ()
      "Transfer the marked PDF files to the remarkable. Any other filetype will be ignored."
      (interactive)
      (mapc (lambda (x)
              (when (s-ends-with-p ".pdf" x t)
                (message "Transfering \"%S\" to the reMarkable" x)
                (call-process "pdf2remarkable" nil nil nil x)))
            (dired-get-marked-files nil nil nil nil t)))

    (defun restart-remarkable-ui ()
      "Restarting the ReMarkable UI to acknowledge the presence of the new PDF files."
      (interactive)
      (call-process "/bin/ssh" nil "*remarkable*" nil "remarkable" "systemctl" "restart" "xochitl"))
    )

  (use-package dired-launch
    :tags '("FILE_MANAGEMENT" "DIRED")
    :bind (:map dired-mode-map (
                 <<keybindings-gen(table=dired-launch-entry-keybindings)>>
          ))

    :config
    (setq dired-launch-default-launcher '("xdg-open"))
    (setq dired-launch-extensions-map nil))

  (use-package media-progress
    :ensure (media-progress :type git :host github :repo "jumper047/media-progress" :files ("media-progress.el")
                            :tags '("FILE_MANAGEMENT" "DIRED" "DESKTOP"))
    :custom
    (media-progress-extensions (append dirvish-video-exts dirvish-audio-exts))
    (media-progress-mpv-cfg-dir "~/.local/state/mpv"))

  (use-package media-progress-dirvish
    :ensure (media-progress-dirvish :type git :host github :repo "jumper047/media-progress" :files ("media-progress-dirvish.el"))
    :tags '("FILE_MANAGEMENT" "DIRED" "DESKTOP")
    :after dirvish
    :config
    (media-progress-dirvish-setup))
#+end_src

** DONE Diff
CLOSED: [2021-01-04 Mon 19:10]
:PROPERTIES:
:ID:       ea63a2dc-e072-4738-9e4e-786a799fa946
:END:
Visualizing diff is important especially when I have a file, outside of project files, which is present on multiple machines.
Diff visualization relies mainly on =ediff= but to which I added two primitives to focus on some regions (=diff-region= followed by =diff-region-now=).
Also, I am using the configuration of =smerge-mode= from https://github.com/alphapapa/unpackaged.el#hydra.

#+begin_src emacs-lisp
  (use-builtin ediff
    :tags '("FILE_MANAGEMENT" "DIFF")
    :config
    (autoload 'diff-mode "diff-mode" "Diff major mode" t)
    (setq diff-switches "-u"
          ediff-auto-refine-limit (* 2 14000)
          ediff-window-setup-function 'ediff-setup-windows-plain
          ediff-split-window-function
          (lambda (&optional arg)
            (if (> (frame-width) 160)
        	(split-window-horizontally arg)
              (split-window-vertically arg)))))

  (defun diff-region ()
    "Select a region to compare"
    (interactive)
    (when (use-region-p) ; there is a region
      (let (buf)
        (setq buf (get-buffer-create "*Diff-regionA*"))
        (save-current-buffer
          (set-buffer buf)
          (erase-buffer))
        (append-to-buffer buf (region-beginning) (region-end))))
    (message "Now select other region to compare and run `diff-region-now`"))

  (defun diff-region-now ()
    "Compare current region with region already selected by `diff-region`"
    (interactive)
    (when (use-region-p)
      (let (bufa bufb)
        (setq bufa (get-buffer-create "*Diff-regionA*"))
        (setq bufb (get-buffer-create "*Diff-regionB*"))
        (save-current-buffer
          (set-buffer bufb)
          (erase-buffer))
        (append-to-buffer bufb (region-beginning) (region-end))
        (ediff-buffers bufa bufb))))

    (use-builtin smerge-mode
      :tags '("DIFF")
      :hook
      (prog-mode . smerge-mode)
      (magit-diff-visit-file . (lambda ()
                                 (when smerge-mode
                                   (unpackaged/smerge-hydra/body))))
      :config
      (defhydra unpackaged/smerge-hydra
        (:color pink :hint nil :post (smerge-auto-leave))
        "
    ^Move^       ^Keep^               ^Diff^                 ^Other^
    ^^-----------^^-------------------^^---------------------^^-------
    _n_ext       _b_ase               _<_: upper/base        _C_ombine
    _p_rev       _u_pper              _=_: upper/lower       _r_esolve
    ^^           _l_ower              _>_: base/lower        _k_ill current
    ^^           _a_ll                _R_efine
    ^^           _RET_: current       _E_diff
    "
        ("n" smerge-next)
        ("p" smerge-prev)
        ("b" smerge-keep-base)
        ("u" smerge-keep-upper)
        ("l" smerge-keep-lower)
        ("a" smerge-keep-all)
        ("RET" smerge-keep-current)
        ("\C-m" smerge-keep-current)
        ("<" smerge-diff-base-upper)
        ("=" smerge-diff-upper-lower)
        (">" smerge-diff-base-lower)
        ("R" smerge-refine)
        ("E" smerge-ediff)
        ("C" smerge-combine-with-next)
        ("r" smerge-resolve)
        ("k" smerge-kill-current)
        ("ZZ" (lambda ()
                (interactive)
                (save-buffer)
                (bury-buffer))
         "Save and bury buffer" :color blue)
        ("q" nil "cancel" :color blue)))
#+end_src

** DONE Trashed
CLOSED: [2022-05-07 Sat 08:53]
:PROPERTIES:
:ID:       c2807e13-cab6-4c73-9bec-68a4638bc537
:END:
=rm= is pretty dangerous, so I use =trash-cli= and then manage the trash regularly.
To manage the trash via emacs, =trashed= provides a really interface.

#+begin_src emacs-lisp
  (when (executable-find "trash")
    (use-package trashed
      :tags '("FILE_MANAGEMENT" "DIRED")
      :init
      (defun empty-trash()
        "Command to empty the trash (for now gnome/linux specific)"
        (interactive)
        (shell-command "rm -rf ~/.local/share/Trash/*"))

      (defun open-trash-dir()
        "Command to open the trash dir"
        (interactive)
        (find-file "~/.local/share/Trash/files"))))
#+end_src

** DONE Current File Information
CLOSED: [2023-02-02 Thu 15:56]
:PROPERTIES:
:ID:       4a892707-0e2b-4d71-b8ac-ecc726e5eb67
:END:
#+begin_src emacs-lisp
    (use-package file-info
      :ensure (:host github :repo "artawower/file-info.el")
      :tags '("FILE_MANAGEMENT")
      :bind (("C-c d" . 'file-info-show)))
#+end_src

** DONE Syncthing
CLOSED: [2023-10-27 Fri 09:07]
:PROPERTIES:
:ID:       1cbcd1a3-9c4d-409c-97ae-d82ee8f531e0
:END:
I am using syncthing as sharing system. Visualising the status on emacs is pretty convenient.

#+BEGIN_SRC emacs-lisp
  (use-package syncthing
    :tags '("DESKTOP" "FILE_MANAGEMENT")
    :custom
    (syncthing-default-server-token syncthing-api-key))
#+END_SRC

* DONE Online [100%]
:PROPERTIES:
:ID:       fdaf9174-9379-40f2-9d9c-8bd59c4c4beb
:END:
I am using emacs to deal with a lot of online stuffy.
The main services I consult using emacs are: RSS streams, emails, chats, "exchange services" and CD releases.

** DONE RSS [100%]
:PROPERTIES:
:ID:       a8333da3-6503-43a6-bf85-630cdaf50455
:END:
To retrieve and visualize my RSS feeds, I use =elfeed=.
The database is stored in the =~/.emacs.d/elfeed=.
I mapped the key =f9= to quickly access the list of entries.
I rely on =elfeed-org= to store the list of feeds and defines some tags as well as on =elfeed-score= to filter entries based on handmade rules.

#+begin_src emacs-lisp
  (use-package elfeed
    :ensure (elfeed :type git :host github :repo "skeeto/elfeed")
    :tags '("CONNECTED" "RSS")
    :commands (elfeed elfeed-update)
    :no-require t
    :config
    ;; Change the storage directory
    (setq elfeed-db-directory (format "%s/elfeed" user-emacs-directory)

          ;; Formatting dates
          elfeed-search-date-format '("%Y-%m-%d %H:%M" 17 :left))

    (when (fboundp 'elfeed-define-faces)
      (elfeed-define-faces)))

  (use-package elfeed-link
    :tags '("CONNECTED" "RSS" "ORG")
    :ensure nil
    :after elfeed)
#+end_src

*** DONE Org connection
CLOSED: [2021-01-04 Mon 19:41]
:PROPERTIES:
:ID:       08eee607-6a52-4856-8056-5b8c67a1ff5a
:END:
I prefer to store the configuration in an org-mode file as it is more readable.
This configuration is part of my "roaming" so I can have access to it easily.
However, to properly disconnect from work when I am at home, I distinguish 2 RSS configurations:
  - =rss.org= which contains my entertainment feeds,
  - =rss_pro.org= which contains my "work" dedicated feeds.
Because I need a break once and a while at work, I load both files on my work machine but only =rss.org= when I use my personal laptop.

#+begin_src emacs-lisp
  (use-package elfeed-org
    :tags '("CONNECTED" "RSS")
    :after (elfeed)
    :if (file-directory-p cloud-org-root-dir)
    :hook (elpaca-after-init . loading-elfeed)
    :commands (elfeed-org)
    :init
    (defvar rss-files (list (concat cloud-org-root-dir "perso/configuration/rss.org"))
      "RSS ORG filename defined based on the type of machine I am using (pro or other!)")

    ;; Working machine, add the pro list of feeds as well
    (when (string= (system-name) work-hostname)
      (add-to-list 'rss-files (concat cloud-org-root-dir "perso/configuration/rss_pro.org")))

    (defun loading-elfeed ()
      (when (file-exists-p (car rss-files))
        (progn
          (elfeed-org)
          (setq rmh-elfeed-org-files rss-files)
          (rmh-elfeed-org-process rmh-elfeed-org-files rmh-elfeed-org-tree-id)))))
#+end_src

*** DONE Youtube specificities
CLOSED: [2022-07-25 Mon 07:44]
:PROPERTIES:
:ID:       8cdb2cf8-cc40-425a-8e07-69a7e6b0bf08
:END:
Some of my feeds come from youtube so =elfeed-tube= provides a nice interface to play the video from the feed.

#+transclude: [[file:keytable_summary.org::Elfeed/Youtube]] :only-contents

#+begin_src emacs-lisp
  (use-package elfeed-tube
    :ensure (:type git :host github :repo "karthink/elfeed-tube" :files (:defaults (:exclude "elfeed-tube-mpv.el")))
    :after elfeed
    :tags '("CONNECTED" "RSS" "YOUTUBE")
    :defer t
    :config
    ;; (setq elfeed-tube-auto-save-p nil) ; default value
    ;; (setq elfeed-tube-auto-fetch-p t)  ; default value
    (elfeed-tube-setup)

    :bind (
      :map elfeed-show-mode-map (
        <<keybindings-gen(table=elfeed-tube-entry-keybindings)>>
      )

      :map elfeed-search-mode-map (
        <<keybindings-gen(table=elfeed-tube-entry-keybindings)>>
      )
    ))

  (use-package elfeed-tube-mpv
    :ensure (:type git :host github :repo "karthink/elfeed-tube" :files ("elfeed-tube-mpv.el"))
    :tags '("CONNECTED" "RSS" "YOUTUBE")
    :after (elfeed)
    :bind (
      :map elfeed-show-mode-map (
        <<keybindings-gen(table=elfeed-tube-mpv-keybindings)>>
      )
    ))
#+end_src

*** DONE Notification part
CLOSED: [2021-01-04 Mon 19:46]
:PROPERTIES:
:ID:       c871c621-e803-4eb1-ba97-59d9c92c4a98
:END:
For the notification, we simply have to connect sauron and elfeed.
I just need to define a default priority level for each feed.

#+begin_src emacs-lisp
  (use-builtin sauron-elfeed
    :tags '("CONNECTED" "RSS" "NOTIFICATION")
    :after (sauron elfeed)
    :commands (elfeed-update-background-start sauron-elfeed-start)
    :hook
    (elpaca-after-init . sauron-elfeed-start)
    (elpaca-after-init . elfeed-update-background-start)

    :config
    (cl-loop for feed in elfeed-feeds
	     do (when (member 'mustread (cdr feed))
		  (puthash (car feed) 3 sauron-elfeed-prio-hash))))
#+end_src

*** DONE Scoring support
CLOSED: [2022-02-04 Fri 19:34]
:PROPERTIES:
:ID:       9e919ef7-0254-4b4a-86c0-2bdccf45f5fc
:END:
Using =elfeed-score= helps me to organize my feeds to have a better view of what is going in the online world.

#+begin_src emacs-lisp
  (use-package elfeed-score
    :tags '("CONNECTED" "RSS")
    :after (elfeed)
    :config
    (elfeed-score-enable)
    (define-key elfeed-search-mode-map "=" elfeed-score-map)
    (setq elfeed-search-print-entry-function #'elfeed-score-print-entry
          elfeed-search-sort-function #'elfeed-score-sort))
#+end_src

**** DONE The score rules
CLOSED: [2022-02-04 Fri 19:33]
:PROPERTIES:
:ID:       515bcc3a-89a0-4ebd-8621-ee24fa8e3179
:END:
This part defines the rules to assign the scores for each RSS entries.
A lot are assigned for work related informations and are not actually used in computers which are not the work machine.
This part is also tangled in its dedicated file =~/.emacs.d/elfeed.score=.
Obviously this part is meant to evolve regularly!

#+begin_src emacs-lisp :results output replace :tangle ~/.emacs.d/elfeed.score
  (("title")

   ("content")
   ("title-or-content"
    ;; Emacs related

    ;; Podcasts
    (:text "gÃ©raldine mosna-savoye" :title-value 5 :content-value 10 :type r)
    (:text "guillaume meurice" :title-value 5 :content-value 5 :type s)
    (:text "constance" :title-value 5 :content-value 5 :type s)

    ;; Work
    (:text "\\(speech synthesis\\|TTS\\|text-to-speech\\|text to speech\\)" :title-value 10 :content-value 5 :type s)
    (:text "speech synthesis evaluation" :title-value 20 :content-value 10 :type s)
    (:text "evaluate \\(speech synthesis\\|synthetic speech\\)" :title-value 10 :content-value 10 :type s)
    (:text "evaluate \\(speech synthesis\\|synthetic speech\\)" :title-value 10 :content-value 10 :type s)


    ;; Bulk
    (:text "unicode" :title-value -1 :content-value -1 :type s)
    (:text "unicode" :title-value -10 :content-value -10 :type s))

   ("tag")

   ("authors")
   ("feed"
    (:text "Si tu Ã©coutes, j'annule tout" :value -1 :attr t :type s))

   ;; Mark every entries scored below -10 & adjust tags if necessary
   (mark -10)
   ("adjust-tags"))
#+end_src

*** DONE Searching
CLOSED: [2025-05-13 Tue 08:47]
=Cuckoo= provides additional helpers to search the *content* of the RSS feeds.

#+BEGIN_SRC emacs-lisp
    (use-package cuckoo-search
      :tags '("CONNECTED" "RSS")
      :after (elfeed)
      :config
      (cuckoo-search-global-mode t)  ;; necessary for smooth integration of cuckoo-search into Elfeed
      :bind
      (:map elfeed-search-mode-map
            ("C" . cuckoo-search)
            ("x" . cuckoo-search-saved-searches)))
#+END_SRC
** DONE Mail [100%]
CLOSED: [2021-01-05 Tue 09:08]
:PROPERTIES:
:ID:       e186b5e3-5ffd-447c-b4d2-def7041cddcf
:END:
Emacs is my only email client.
It is based around the ecosystem =mu/mu4e= which provides everything we need to deal with emails.
This configuration is articulated around three parts: the authentification part, the composing emails part and the mu4e part.

*** DONE Authentification
CLOSED: [2021-01-05 Tue 08:20]
:PROPERTIES:
:ID:       e1ea4fea-562c-4786-98af-7cc80e11c7d2
:END:
In previous emacs version (< 27), it was necessary to configure the package =starttls=.
This configuration is remaining here for backward compatibility purposes.

#+begin_src emacs-lisp
  (use-builtin starttls
    :tags '("CONNECTED")
    :if (< emacs-major-version 27)
    :config
    (setq starttls-use-gnutls t
          starttls-gnutls-program "gnutls-cli"
          starttls-extra-arguments '("--insecure")
          auth-sources '("~/.authinfo.gpg")))
#+end_src

*** DONE Composing emails
CLOSED: [2021-01-05 Tue 08:27]
:PROPERTIES:
:ID:       a25d3b9f-25bf-4a2b-b0c8-f5bbda3dfa9c
:END:
To compose emails, I rely on the combination of multiple packages.
Obviously, the entry point is the package =message= whose ~message-mode~ is the major mode used to edit new emails.
I configured the package to support some additional features like a proper signature and a proper formatting.
I also updated the citation line/format.

As I am using multiple account, I use the package =smtpmail-multi= to sort this out.
I also had to redefine the function ~smtpmail-try-auth-methods~ to support keepassxc and secret services.
To do so, the assumption is that every SMTP credential is labeled as =<host>:<port>:<user>=.
The default account is my work email as it is my most used account.

Because I sometimeswant to send rich emails, I use =org-msg= which relies on the HTML exporter provided by =org= to generate HTML emails.
I also use ~varuga~ to send calendar invite.
As I am quite absent-minded, I use a reminder to not forget the attachment: =message-attachment-reminder=.

#+transclude: [[file:keytable_summary.org::Org-msg]] :only-contents

#+begin_src emacs-lisp
  (use-builtin message
    :tags '("CONNECTED" "MAIL")
    :hook
    (message-mode . format-hook-message)

    :config
    (defun format-hook-message ()
      "Specify some formatting rules for email message writing."
      (auto-fill-mode -1)
      (visual-fill-column-mode -1)
      (diff-hl-mode -1)
      (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
      (visual-line-mode))

    (setq user-full-name "SÃ©bastien Le Maguer"
          smtpmail-servers-requiring-authorization ".*"
          message-auto-save-directory nil
          message-citation-line-function 'message-insert-formatted-citation-line
          message-citation-line-format  "\n\n-----------------------\nOn %a, %b %d %Y (%-H:%M %Z), %N wrote:\n"
          message-sendmail-f-is-evil nil
          message-kill-buffer-on-exit t
          message-signature-file nil
          message-fill-column 100))

  (use-package org-msg
    :ensure (org-msg :host github :repo "jeremy-compostella/org-msg")
    :bind (:map org-msg-edit-mode-map (
      <<keybindings-gen(table=org-msg-edit-keybindings)>>
    ))

    :hook
    (mu4e-compose-pre  . org-msg-mode)
    (org-msg-edit-mode . format-hook-message)

    :config
    (defun myorg/mu4e-compose-org-msg()
      (org-hide-block-all)
      (org-hide-drawer-all))

    ;; Org HTML Styling (from https://github.com/jeremy-compostella/org-msg/issues/143#issuecomment-1412904472)
    (defconst cpm-org-msg-style
      (let* ((font-family '(font-family . "font-family: \"Helvetica\", \"Arial\", sans-serif"))
             (font-size '(font-size . "12pt"))
             (font `(,font-family ,font-size))
             (line-height '(line-height . "1.5"))
             (bold '(font-weight . "bold"))
             (theme-color "#0071c5")
             (color `(color . ,theme-color))
             (table `(,@font (margin-top . "0px")))
             (ftl-number `(,@font ,color ,bold (text-align . "left")))
             (inline-modes '(asl c c++ conf cpp csv diff ditaa emacs-lisp
                                 fundamental ini json makefile man org plantuml
                                 python sh xml))
             (inline-src `((color . ,(face-foreground 'default))
                           (background-color . ,(face-background 'default))))
             (code-src
              (mapcar (lambda (mode)
                        `(code ,(intern (concat "src src-" (symbol-name mode)))
                               ,inline-src))
                      inline-modes))
             (base-quote '((padding-left . "5px") (margin-left . "10px")
                           (margin-top . "10px") (margin-bottom . "0")
                           (font-style . "italic") (background . "#f9f9f9")))
             (quote-palette '("#324e72" "#6a3a4c" "#7a4900" "#ff34ff"
                              "#ff4a46" "#008941" "#006fa6" "#a30059"
                              "#ffdbe5" "#000000" "#0000a6" "#63ffac"))
             (quotes
              (mapcar (lambda (x)
                        (let ((c (nth x quote-palette)))
                          `(blockquote ,(intern (format "quote%d" (1+ x)))
                                       (,@base-quote
                                        (color . ,c)
                                        (border-left . ,(concat "3px solid "
                                                                (org-msg-lighten c)))))))
                      (number-sequence 0 (1- (length quote-palette))))))
        `((del nil (,@font (color . "grey") (border-left . "none")
                           (text-decoration . "line-through") (margin-bottom . "0px")
                           (margin-top . "10px") (line-height . "11pt")))
          (a nil (,color))
          (a reply-header ((color . "black") (text-decoration . "none")))
          (div reply-header ((padding . "3.0pt 0in 0in 0in")
                             (border-top . "solid #e1e1e1 1.0pt")
                             (margin-bottom . "20px")))
          (span underline ((text-decoration . "underline")))
          (li nil (,@font ,line-height (margin-bottom . "0px")
                          (margin-top . "2px")))
          (nil org-ul ((list-style-type . "disc")))
          (nil org-ol (,@font ,line-height (margin-bottom . "0px")
                              (margin-top . "0px") (margin-left . "30px")
                              (padding-top . "0px") (padding-left . "5px")))
          (nil signature (,@font (margin-bottom . "20px") (white-space . "pre-line")))
          (blockquote quote0 ,(append base-quote '((border-left . "3px solid #ccc"))))
          ,@quotes
          (code nil (,font-size (font-family . "monospace") (background . "#f9f9f9")))
          ,@code-src
          (nil linenr ((padding-right . "1em")
                       (color . "black")
                       (background-color . "#aaaaaa")))
          (pre nil ((line-height . "12pt")
                    ,@inline-src
                    (margin . "0px")
                    (font-size . "9pt")
                    (font-family . "monospace")))
          (div org-src-container ((margin-top . "10px")))
          (nil figure-number ,ftl-number)
          (nil table-number)
          (caption nil ((text-align . "left")
                        (background . ,theme-color)
                        (color . "white")
                        ,bold))
          (nil t-above ((caption-side . "top")))
          (nil t-bottom ((caption-side . "bottom")))
          (nil listing-number ,ftl-number)
          (nil figure ,ftl-number)
          (nil org-src-name ,ftl-number)

          (table nil (,@table ,line-height (border-collapse . "collapse")))
          (th nil ((border . "1px solid white")
                   (background-color . ,theme-color)
                   (color . "white")
                   (padding-left . "10px") (padding-right . "10px")))
          (td nil (,@table (padding-left . "10px") (padding-right . "10px")
                           (background-color . "#f9f9f9") (border . "1px solid white")))
          (td org-left ((text-align . "left")))
          (td org-right ((text-align . "right")))
          (td org-center ((text-align . "center")))

          (div outline-text-4 ((margin-left . "15px")))
          (div outline-4 ((margin-left . "10px")))
          (h4 nil ((margin-bottom . "0px") (font-size . "12pt")
                   (text-decoration . "underline") ,font-family))
          (h3 nil ((margin-bottom . "0px") ,color (font-size . "12pt")
                   ,font-family))
          (h2 nil ((margin-top . "20px") (margin-bottom . "20px")
                   ,color (font-size . "13pt") ,font-family))
          (h1 nil ((margin-top . "20px")
                   (margin-bottom . "20px") ,color (font-size . "16pt")
                   ,font-family))
          (p nil ((text-decoration . "none") (margin-bottom . "0px")
                  (margin-top . "10px") (line-height . "1.25") (padding-bottom . "5px") ,font-size
                  ,font-family))
          (div nil (,@font (line-height . "1.25"))))))

    ;; Main part is coming from https://gitlab.com/jdm204/dotfiles/-/blob/master/config.org
    (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:nil"
          org-msg-greeting-name-limit 3
          org-msg-startup "hidestars indent inlineimages"
          org-msg-default-alternatives '((new	       . (text))
                                         (reply-to-html  . (text html))
                                         (reply-to-text  . (text)))
          org-msg-convert-citation t
          org-msg-enforce-css cpm-org-msg-style
          org-msg-signature (format
                             "\n\n#+begin_signature\n--\n%s\n#+end_signature"
                             (with-temp-buffer
                               (insert-file-contents
                                (format "%s/third_parties/mail/signature" user-emacs-directory))
                               (buffer-string))))

    (advice-add 'org-msg-post-setup :after 'myorg/mu4e-compose-org-msg))

  (use-package message-attachment-reminder
    :disabled t
    :tags '("CONNECTED" "MAIL"))

  (use-package varuga
    :tags '("CONNECTED" "MAIL")
    :commands (varuga-invite))
#+end_src

*** DONE Mu4e [100%]
CLOSED: [2021-01-05 Tue 08:53]
:PROPERTIES:
:ID:       ace0708c-f87c-489f-b259-243212dba409
:END:
As I previously indicated, =mu4e= is my entry point to deal with emails.
However, it can't be installed via melpa.
I have a bunch of scripts which are configuring my linux environment on ~~/environment/~.
These scripts are installing ~mu~ and =mu4e= so the first thing to do here is to point the current configuration ~load-path~.

The core of the configuration is separated in four main parts:
the hydra definition, the adaptation of the ~mu4e~ environment, the introduction of new primitives and, finally, the definition of contexts.
The last part is the most important as it provides the configuration for the mail accounts.
These configurations are set in the private configuration file and provided by the function =set-mu4e-contexts=.
I also redesigned the header buffer.

#+transclude: [[file:keytable_summary.org::Mu4e]] :only-contents

#+begin_src emacs-lisp
  (use-package mu4e
    :ensure (mu4e :host github
                  :repo "djcb/mu"
                  :tag "v1.12.8"
                  :files ("mu4e/*.el" "build/mu4e/mu4e-meta.el" "build/mu4e/mu4e-config.el"
                          "build/mu4e/mu4e.info")
                  :main "mu4e/mu4e.el"
                  :pre-build (("./autogen.sh") ("ninja" "-C" "build")
                              (make-symbolic-link (expand-file-name "./build/mu/mu")
                                                  (expand-file-name "~/environment/local/bin/mu") 'ok-if-exists))
                  :build (:not elpaca--compile-info))
    :tags '("CONNECTED" "MAIL")
    :commands (mu4e)

    ;; :hook
    ;; (elpaca-after-init . (lambda () (mu4e t)))

    :pretty-hydra
    ((:color blue :hint nil)
     ("General" (
        <<hydra-keybindings-gen(table=mu4e-hydra-general-keybindings)>>
      )

      "Search" (
        <<hydra-keybindings-gen(table=mu4e-hydra-search-keybindings)>>
      )

      "Mark" (
        <<hydra-keybindings-gen(table=mu4e-hydra-mark-keybindings)>>
      )

      "Miscellany" (
        <<hydra-keybindings-gen(table=mu4e-hydra-misc-keybindings)>>
      )

      "Switches" (
        <<hydra-keybindings-gen(table=mu4e-hydra-switches-keybindings)>>
      )))

    :bind (
      :map mu4e-headers-mode-map (
        <<keybindings-gen(table=mu4e-headers-mode-keybindings)>>
      )

      :map mu4e-main-mode-map (
        <<keybindings-gen(table=mu4e-main-mode-keybindings)>>
      )

      :map message-mode-map (
        <<keybindings-gen(table=message-mode-keybindings)>>
      )
    )

    :custom
    ;; File management
    (mu4e-maildir "~/mail")
    (mu4e-attachment-dir "~/Downloads/")
    (mu4e-change-filenames-when-moving t)

    ;; User interaction
    (mail-user-agent 'mu4e-user-agent)
    (mu4e-compose-forward-as-attachment nil)
    (mu4e-hide-index-messages t)
    (mu4e-compose-context-policy 'ask-if-none)
    (mu4e-confirm-quit nil)
    (mu4e-compose-dont-reply-to-self t)
    (mu4e-update-interval nil)

    ;; Gui
    (mu4e-view-show-addresses t)
    (mu4e-view-show-images t)
    (mu4e-view-use-gnus t)
    (mu4e-use-fancy-chars t)

    ;; headers
    (mu4e-headers-date-format "%a %d %b %Y")
    (mu4e-headers-time-format "%H:%M:%S")

    ;; update
    (mu4e-get-mail-command "mbsync -a")
    (mu4e-update-interval (* 15 60)) ;; Update every 15min

    :init
    (defun mu4e-message-mailto (&optional url)
      "Compose a new mail with metadata extracted from mailto: URL.
  Taken from https://etienne.pflieger.bzh/emacs.d/init.html."
      (let* ((mailto-data (message-parse-mailto-url
                           (or url (pop command-line-args-left))))
             (to (cadr (assoc "to" mailto-data)))
             (subject (cadr (assoc "subject" mailto-data))))
        (mu4e-compose-new to subject)))

    (advice-add 'message-mailto
                :override
                (lambda (&optional url)
                  (require 'mu4e)
                  (mu4e-message-mailto url)))

    :config

    ;; Initialize private configuration
    (when (fboundp 'load-mu4e-and-smtp)
      (load-mu4e-and-smtp))

    ;; Deal with contexts
    (require 'mu4e-context)

    (when (fboundp 'set-mu4e-contexts)
      (set-mu4e-contexts))

    (setq mu4e-context-policy 'pick-first
          mu4e-user-mail-address-list (delq nil
                                            (mapcar (lambda (context)
                                                      (when (mu4e-context-vars context)
                                                        (cdr (assq 'user-mail-address (mu4e-context-vars context)))))
                                                    mu4e-contexts)))

    ;; Deal with bookmarks
    (require 'mu4e-bookmarks)

    (when (fboundp 'set-mu4e-bookmarks)
      (set-mu4e-bookmarks))

    (add-to-list 'mu4e-bookmarks
                 '(:name  "Drafts"
                          :query "flag:draft"
                          :key ?d))

    ;; SMTP needs to be here (FIXME: don't really know why)
    (when (fboundp 'set-smtpmail-multi-accounts)
      (set-smtpmail-multi-accounts))

    ;; use imagemagick, if available
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))

    (defun mu4e~headers-line-apply-flag-face (msg line)
      line)

    (defun mu4e~headers-field-apply-basic-properties (msg field val width)
      (cl-case field
        (:subject
         (propertize
          (concat
           (mu4e~headers-thread-prefix (mu4e-message-field msg :thread))
           (truncate-string-to-width val 600))
          'face
          (let ((flags (mu4e-message-field msg :flags)))
            (cond
             ((memq 'trashed flags) 'mu4e-trashed-face)
             ((memq 'draft flags) 'mu4e-draft-face)
             ((or (memq 'unread flags) (memq 'new flags))
              'mu4e-unread-face)
             ((memq 'flagged flags) 'mu4e-flagged-face)
             ((memq 'replied flags) 'mu4e-replied-face)
             ((memq 'passed flags) 'mu4e-forwarded-face)
             (t 'mu4e-header-face)))))
        (:thread-subject
         (propertize
          (mu4e~headers-thread-subject msg)
          'face 'font-lock-doc-face))
        ((:maildir :path :message-id) val)
        ((:to :from :cc :bcc)
         (propertize
          (mu4e~headers-contact-str val)
          'face 'font-lock-function-name-face))
        (:from-or-to (mu4e~headers-from-or-to msg))
        (:date
         (propertize
          (format-time-string mu4e-headers-date-format val)
          'face 'font-lock-string-face))
        (:mailing-list (mu4e~headers-mailing-list val))
        (:human-date
         (propertize
          (mu4e~headers-human-date msg)
          'help-echo (format-time-string
                      mu4e-headers-long-date-format
                      (mu4e-msg-field msg :date))
          'face 'font-lock-string-face))
        (:flags
         (propertize (mu4e~headers-flags-str val)
                     'help-echo (format "%S" val)
                     'face 'font-lock-type-face))
        (:tags
         (propertize
          (mapconcat 'identity val ", ")
          'face 'font-lock-builtin-face))
        (:size (mu4e-display-size val))
        (t (mu4e~headers-custom-field msg field)))))

  (use-package mu4e-thread-folding
    :ensure (mu4e-thread-folding :type git :host github :repo "rougier/mu4e-thread-folding")
    :tags '("CONNECTED" "MAIL")
    :after (mu4e)
    :hook (mu4e-headers-mode . mu4e-thread-folding-mode)
    :custom-face
    (mu4e-thread-folding-root-unfolded-face
     ((t (:extend t :background "#dce6f9" :weight bold :overline nil :underline nil))))
    (mu4e-thread-folding-root-folded-face
     ((t (:extend t :background "#eef3fc" :overline nil :underline nil))))
    (mu4e-thread-folding-child-face
     ((t (:extend t :background "#eef3fc" :underline nil))))
    (mu4e-thread-folding-root-prefix-face
     ((t (:extend t :background "#dce6f9" :overline nil :underline nil))))

    :config

    (setq mu4e-headers-thread-child-prefix '("â>" . "â£â¶ ")
          mu4e-headers-thread-last-child-prefix '("â>" . "ââ¶ ")
          mu4e-headers-thread-connection-prefix '("â" . "â ")
          mu4e-headers-thread-blank-prefix '(" " . "  ")
          mu4e-headers-thread-orphan-prefix '("â¬>" . "â³â¶ ")
          mu4e-headers-thread-single-orphan-prefix '("â>" . "ââ¶ ")

          mu4e-headers-thread-duplicate-prefix '("=" . "â¡ "))

    (add-to-list 'mu4e-header-info-custom
                 '(:empty . (:name "Empty"
                                   :shortname ""
                                   :function (lambda (msg)
                                      (let ((maildir (replace-regexp-in-string
                                                      "\\`/?\\([^/]+\\)/.*\\'" "\\1"
                                                      (mu4e-message-field msg :maildir))))
                                               (propertize "\u2588" 'face
                                                           `(:foreground ,(cdr (assoc maildir mail-account-color-dict)))))))))

    (add-to-list 'mu4e-header-info-custom
                 '(:account .
                             (:name "Account"
                                    :shortname "Account"
                                    :help "which account/maildir this email belongs to"
                                    :function
                                    (lambda (msg)
                                      (let ((maildir (replace-regexp-in-string
                                                      "\\`/?\\([^/]+\\)/.*\\'" "\\1"
                                                      (mu4e-message-field msg :maildir))))
                                         (replace-regexp-in-string
                                          "^gmail"
                                          (propertize "g" 'face 'bold-italic)
                                          maildir))))))

    (setq mu4e-headers-fields  '((:empty         .    1)
                                 (:account       .   10)
                                 (:human-date    .   18)
                                 (:recipnum      .    2)
                                 (:size          .    6)
                                 (:flags         .    6)
                                 (:mailing-list  .   10)
                                 (:from          .   22)
                                 (:subject       .  nil))))
#+end_src

**** DONE Notification
CLOSED: [2021-01-05 Tue 08:52]
:PROPERTIES:
:ID:       5be79116-b2d0-4ecc-a273-f9e1e4ec0abe
:END:
I am using =sauron= and =alert= as my notification system.
For now, I am using =mu4e-alert= configured using the ~count~ notification type.
It is quite simple but robust enough to not being bother every 5 min.

#+begin_src emacs-lisp
  (use-package mu4e-alert
    :ensure (:protocol ssh :host github :repo "seblemaguer/mu4e-alert" :branch "mu-1.7")
    :after (sauron-mode-line)
    :tags '("CONNECTED" "MAIL" "NOTIFICATION")
    :config
    ;; Just notify the counting
    (setq mu4e-alert-email-notification-types '(count))

    ;; Set the style to sauron
    (mu4e-alert-set-default-style 'sauron-mode-line-style)

    ;; Enable everything!
    (mu4e-alert-enable-notifications))
#+end_src

**** DONE Improve visualisation
CLOSED: [2021-08-10 Tue 20:14]
:PROPERTIES:
:ID:       8a466dd0-bc37-4c41-9a44-3305f74981cc
:END:

#+begin_src emacs-lisp
  (use-package mu4e-column-faces
    :ensure (mu4e-column-faces :type git :host github :repo "Alexander-Miller/mu4e-column-faces")
    :tags '("CONNECTED" "MAIL" "VISUAL")
    :after mu4e
    :config (mu4e-column-faces-mode))
#+end_src

** DONE Calendar
CLOSED: [2023-07-31 Mon 08:55]
:PROPERTIES:
:ID:       2bca7d72-8731-4c97-8b3a-09baf20605db
:END:
For the calendar, I am using =org-caldav= coupled with =davmail= as backends.

#+BEGIN_SRC emacs-lisp
  (use-package org-caldav
    :tags '("ORG" "CONNECTED" "CALENDAR")
    :init
    (add-to-list 'org-agenda-default-files (format "%s/calendars/perso.org" user-emacs-directory))

    :config
    (setq org-icalendar-timezone "Europe/Helsinki"
          org-icalendar-alarm-time 15
          org-icalendar-include-todo 'all
          org-icalendar-use-deadline '(event-if-not-todo todo-due)
          org-icalendar-use-scheduled '(todo-start event-if-todo event-if-not-todo)
          org-icalendar-with-timestamps t
          org-caldav-show-sync-results nil)
    (load-calendars))

  (use-package org-timeblock
    :tags '("ORG" "CALENDAR")
    :ensure (org-timeblock :type git
                           :host github
                           :repo "ichernyshovvv/org-timeblock")
    :custom
    (org-timeblock-span 7)
    (org-timeblock-scale-options '(8 . 22))
    (org-timeblock-inbox-file (concat (file-truename user-emacs-directory) ".org-timeblock-inbox.org" ))

    :config
    (unless (file-exists-p org-timeblock-inbox-file)
      (write-region "" nil org-timeblock-inbox-file))
    (add-to-list 'org-agenda-files org-timeblock-inbox-file))
#+END_SRC

** DONE Chat [100%]
CLOSED: [2021-01-05 Tue 09:32]
:PROPERTIES:
:ID:       72bc4a5e-1e48-4129-a634-27cfd60ae21b
:END:
As for the email, I (try to) use emacs as my chatting entry point as well.
To do so, I rely on three key tools: the couple bitlbee/IRC for facebook messenger, skype, ...; slack and matrix.
I added a bunch of helpers to start/stop all the accounts in one shot.

*** DONE IRC
CLOSED: [2021-01-05 Tue 09:32]
:PROPERTIES:
:ID:       60dd7c83-4422-47a7-b609-5a96a56eb8b5
:END:
The IRC configuration is quite standard.
I added a couple of primitives to access more easily the passwords (~my-irc-password~) and to format properly the chat buffer (~erc-format-buffer~).
I slightly tweaked the formatting to be more tolerant and added a bunch of plugins to enhance the UX.
Finally, the account definition is done in the private configuration file (so it is not shown here!).

#+begin_src emacs-lisp
  (use-package circe
    :tags '("CONNECTED" "CHAT" "IRC")
    :commands (circe circe-server-buffers)
    :init
    (defun circe-network-connected-p (network)
      "Return non-nil if there's any Circe server-buffer whose
      `circe-netwok' is NETWORK."
      (catch 'return
        (dolist (buffer (circe-server-buffers))
          (with-current-buffer buffer
            (if (string= network circe-network)
                (throw 'return t))))))

    (defun circe-maybe-connect (network)
      "Connect to NETWORK, but ask user for confirmation if it's
      already been connected to."
      (interactive "sNetwork: ")
      (if (or (not (circe-network-connected-p network))
              (y-or-n-p (format "Already connected to %s, reconnect?" network)))
          (circe network)))

    (defun circe-start ()
      "Connect to IRC"
      (interactive)
      (circe-maybe-connect "libera"))

    :config

    ;; Completion
    (setq circe-use-cycle-completion t)

    ;; Spam information reduction
    (setq circe-reduce-lurker-spam t)

    ;; Tracking
    (setq lui-track-bar-behavior 'before-switch-to-buffer)
    (enable-lui-track-bar)

    ;; Formatting / Visual
    (enable-circe-color-nicks)
    (enable-circe-display-images))

  ;; Elpaca should wait circe to be ready!
  (elpaca-wait)

  (use-builtin lui-logging
    :tags '("CONNECTED" "CHAT" "IRC")
    :commands (enable-lui-logging))

  (use-builtin lui-autopaste ;; circe
    :tags '("CONNECTED" "CHAT" "IRC")
    :hook (circe-channel-mode . enable-lui-autopaste)
    :config
    (defvar lui-autopaste-service-gist-url nil
      "The URL for the last gist.")

    (defun lui-autopaste-service-gist (text)
      "Paste TEXT to github using gist.el."
      ;; It's so great gist works with callbacks! It's so much fun to
      ;; work around that!
      (setq lui-autopaste-service-gist-url 'waiting)
      (with-temp-buffer
        (insert text)
        (gist-region (point-min) (point-max) nil
                     (lambda (gist)
                       (when (eq lui-autopaste-service-gist-url
                                 'waiting)
                         (setq lui-autopaste-service-gist-url
                               (oref gist :html-url)))))) ;; FIXME: this provokes a Warning: Unknown slot â:html-urlâ
      (let ((wait 0))
        (while (and (< wait 10)
                    (eq lui-autopaste-service-gist-url
                        'waiting))
          (sit-for 0.1 )
          (setq wait (1+ wait))))
      (if (eq lui-autopaste-service-gist-url 'waiting)
          (progn
            (setq lui-autopaste-service-gist-url nil)
            (error "Couldn't create gist"))
        (prog1 lui-autopaste-service-gist-url
          (setq lui-autopaste-service-gist-url nil))))

    (setq lui-autopaste-function 'lui-autopaste-service-gist))


  (use-builtin lui ;; circe
    :tags '("CONNECTED" "CHAT" "IRC")
    :hook
    (lui-mode . my-lui-setup)

    :init
    (defun my-lui-setup ()
      (setq fringes-outside-margins t
            right-margin-width 21
            word-wrap t
            wrap-prefix "    "))

    :config
    (setq lui-time-stamp-position 'right-margin
          lui-time-stamp-format "[%Y-%m-%d %H:%M:%S]"
          lui-fill-type nil)

    ;; Disabled modeline (tracking-mode) when loading lui
    ;; This is incompatible with nano-emacs!
    (define-minor-mode tracking-mode
      "placehold to actually deactivate anything related to tracking-mode!"
      :group 'tracking
      :global t))

  (use-builtin lui-irc-colors ;; circe
    :tags '("CONNECTED" "CHAT" "IRC")
    :config
    (add-to-list 'lui-pre-output-hook 'lui-irc-colors))

  (use-package circe-notifications
    :tags '("CONNECTED" "CHAT" "IRC" "NOTIFICATION")
    :commands (enable-circe-notifications)
    :custom (circe-notifications-alert-style 'sauron-mode-line-style)
    :hook
    (circe-server-connected . enable-circe-notifications))
#+end_src

*** DONE Slack
CLOSED: [2021-01-05 Tue 09:29]
:PROPERTIES:
:ID:       b29dacca-dfb1-4f16-ba98-7668ceb0b7bb
:END:
The package =slack= (or ~emacs-slack~) provides everything I need to support Slack in emacs.
The change I do concerns mainly the formatting and the completion system.
Because, I prefer to have the completion system, =company=, configured locally for each buffer, I needed to modify its connection with =slack=.

#+transclude: [[file:keytable_summary.org::Slack]] :only-contents

#+begin_src emacs-lisp
  (use-package slack
    :tags '("CONNECTED" "CHAT" "SLACK")
    :commands (slack-start)
    :no-require t

    :custom-face
    (slack-message-output-reaction-pressed ((t (:background "Lightskyblue1"))))
    (slack-message-mention-face ((t (:background unspecified :foreground "Red3" :weight extra-bold))))
    (slack-message-mention-me-face ((t (:background unspecified :foreground "Red3" :weight extra-bold))))
    (slack-message-mention-keyword-face ((t (:background unspecified :foreground "Red3" :underline t))))
    (slack-mrkdwn-list-face ((t (:foreground "#cd0000" :weight bold))))

    :custom
    (slack-modeline-formatter           nil)
    (slack-buffer-create-on-notify      t)
    (slack-display-team-name            t)
    (slack-typing-visibility            'buffer) ;; 'never, 'buffer, 'frame
    (slack-thread-also-send-to-room     nil)
    (slack-profile-image-file-directory (format "%s/tmp/slack/profile_pictures" user-emacs-directory))
    (slack-image-file-directory         (format "%s/tmp/slack/images" user-emacs-directory))
    (slack-file-dir                     "~/Downloads/")

    :hook
    (slack-mode                  . slack-define-hooks)
    (slack-file-info-buffer-mode . view-mode)

    :bind (
      <<keybindings-gen(table=slack-general-keybindings)>>

      :map slack-mode-map (
        <<keybindings-gen(table=slack-mode-keybindings)>>
      )

      :map slack-message-buffer-mode-map (
        <<keybindings-gen(table=slack-message-keybindings)>>
      )

      :map slack-thread-message-buffer-mode-map (
        <<keybindings-gen(table=slack-mode-keybindings)>>
        <<keybindings-gen(table=slack-message-keybindings)>>
      )
    )

    :config
    (defun slack-define-hooks ()
      "Define some useful slack hooks."
      ;; TODO: CORFU

      ;; Disable puni
      (puni-disable-puni-mode))

    ;; Create directory in case of
    (make-directory slack-profile-image-file-directory t)
    (make-directory slack-image-file-directory t)

    ;; Register the teams (configuration defined in a private file)
    (when (fboundp 'slack-register-teams)
      (slack-register-teams))
      (defun sauron-slack-notifier (message room team)
      (if (slack-message-notify-p message room team)
          (let ((team-name (oref team name))
                (room-name (slack-room-name room team))
                (text (with-temp-buffer
                        (goto-char (point-min))
                        (insert (slack-message-to-alert message team))
                        (slack-buffer-buttonize-link)
                        (buffer-substring-no-properties (point-min)
                                                        (point-max))))
                (user-name (slack-message-sender-name message team)))
            (if (and (eq alert-default-style 'notifier)
                     (slack-im-p room)
                     (or (eq (aref text 0) ?\[)
                         (eq (aref text 0) ?\{)
                         (eq (aref text 0) ?\<)
                         (eq (aref text 0) ?\()))
                (setq text (concat "\\" text)))
            (sauron-add-event
             (intern room-name)
             3
             (if (slack-im-p room) text (format "%s: %s" user-name text))))))

    (setq slack-message-custom-notifier 'sauron-slack-notifier))

  (use-package ol-emacs-slack
    :ensure (:host github :repo "ag91/ol-emacs-slack")
    :tags '("CONNECTED" "CHAT" "SLACK"))

  (use-package helm-slack
    :ensure (helm-slack :type git :host github :repo "yuya373/helm-slack")
    :tags '("CONNECTED" "CHAT" "SLACK" "COMPLETION")
    :after (slack helm))
#+end_src

*** DONE Telega
CLOSED: [2021-05-20 Thu 17:33]
:PROPERTIES:
:ID:       adef5e39-0a9e-47f7-9339-fd113d62cfb2
:END:
=Telega= provides an all-in-one solution for Telegram.

#+BEGIN_SRC emacs-lisp
  (use-package telega
    :requires (tracking)
    :tags '("CONNECTED" "CHAT" "TELEGRAM")
    :commands (telega)

    :config
    (require 'telega-alert)
    (telega-alert-mode 1)

    ;; FIXME: telega-transient doesn't work for now
    ;; (require 'telega-transient)
    ;; (telega-transient-mode 1)
    (setq telega-chat-show-deleted-messages-for 'all
          telega-tdlib-min-version "1.7.0")

    (require 'telega-mnz)
    (add-hook 'telega-load-hook 'global-telega-mnz-mode)

    (require 'ol-telega)

    :custom
    (telega-use-tracking-for            'all)
    (telega-chat-prompt-show-avatar-for nil)
    (telega-server-libs-prefix          (format "%s/environment/local" (getenv "HOME")))
    (telega-temp-dir                    (format "%s/tmp/telega/images" user-emacs-directory))
    (telega-use-images                  (display-graphic-p))
    (telega-chat-fill-column            120)

    :hook
    (telega-chat-mode . telega-chat-hook)

    :init
    (defun telega-chat-hook ()
      "Telega chat helper hook"
      ;; TODO: CORFU
      (emojify-mode 1)
      (puni-disable-puni-mode)))
#+END_SRC

*** DONE Global helpers
CLOSED: [2021-01-05 Tue 09:31]
:PROPERTIES:
:ID:       fcb9d78d-f9b5-46c3-a0f8-ef3dceb5fb9a
:END:
This section provides three helper functions to connect/disconnect all my chatting accounts in one shot.

#+begin_src emacs-lisp
  (defun communication-start ()
    "Routine to start all chats."
    (interactive)
    (circe-start)
    (telega)
    (slack-start))

  (defun communication-shutdown ()
    "Routine to shutdown all chats"
    (interactive)

    (circe-command-GQUIT "time to go back to the real life")
    (telega-kill t)
    (slack-ws-close)

    ;; Clean buffers
    (dolist (buf (buffer-list))
      (cond ((string-prefix-p "*Slack " (buffer-name buf))
             (kill-buffer buf))
            ((string= (with-current-buffer buf major-mode) "circe-mode")
             (kill-buffer buf)))))

  (global-set-key (kbd "S-<f2>") 'communication-start)
  (global-set-key (kbd "C-<f2>") 'communication-shutdown)
#+end_src

** DONE Exchange services [100%]
CLOSED: [2021-01-05 Tue 09:41]
:PROPERTIES:
:ID:       574865ef-3030-4758-8971-11641f050aa9
:END:

*** DONE Stackexchange
CLOSED: [2021-01-05 Tue 09:41]
:PROPERTIES:
:ID:       f23b2dd9-4ca0-4077-bc08-4d35d3ca5bb8
:END:
To access stackexchange, I rely on the package =sx=.
Everything is nicely configured internally to this package, I just binded some keys for an easier support.

#+begin_src emacs-lisp
  (use-package sx
    :tags '("CONNECTED" "EXCHANGE" "STACKEXCHANGE")
    :functions (sx-open-link)
    :config
    (bind-keys :prefix "C-c s"
               :prefix-map my-sx-map
               :prefix-docstring "Global keymap for SX."
               ("q" . sx-tab-all-questions)
               ("i" . sx-inbox)
               ("o" . sx-open-link)
               ("u" . sx-tab-unanswered-my-tags)
               ("a" . sx-ask)
               ("s" . sx-search)))
#+end_src

*** DONE Reddit
CLOSED: [2021-01-05 Tue 09:39]
:PROPERTIES:
:ID:       b9a131d9-7a71-453a-8495-90c9af154eac
:END:
For reddit, I rely on the package =md4rd=.
However, there is currently a bug with the hierarchy package which is not embedded in my emacs 27.
As it requires more investigation, I disabled this packaged for now.

#+transclude: [[file:keytable_summary.org::Reddit]] :only-contents

#+begin_src emacs-lisp
  ;; Not automatically loaded by md4rd
  (use-package tree-mode
    :tags '("CONNECTED" "EXCHANGE" "REDDIT")
    )

  (use-builtin cl-extra
    :tags '("CONNECTED" "EXCHANGE" "REDDIT")
    )

  (use-package md4rd
    :tags '("CONNECTED" "EXCHANGE" "REDDIT")
    :pretty-hydra
    ((:color blue :hint none)
     ("Basic" (
        <<hydra-keybindings-gen(table=md4rd-hydra-basic-keybindings)>>
      )

      "Voting" (
        <<hydra-keybindings-gen(table=md4rd-hydra-voting-keybindings)>>
      )

      "Expanding" (
        <<hydra-keybindings-gen(table=md4rd-hydra-expanding-keybindings)>>
      )))

    :bind (
      :map md4rd-mode-map (
        <<keybindings-gen(table=md4rd-mode-keybindings)>>
      )
    )

    :config
    (setq md4rd-subs-active '(
        emacs orgmode
        composer audacity Reaper Musescore AudioProgramming
    )))
#+end_src

** DONE Release
CLOSED: [2021-01-05 Tue 09:42]
:PROPERTIES:
:ID:       960a1774-f8cb-4b22-a108-ffc7dbe4cdae
:END:
Finally, as a proper metalhead and music addict, I sometimes get lost in what is currently released.
In order to have a better view of what is going on, I developped a package named =metal-archives=.
I am using its extension =metal-archives-shopping-list= to maintain a list of release I want to buy.

#+begin_src emacs-lisp
  (use-package metal-archives-shopping-list
    :tags '("CONNECTED" "RELEASE")
    :if (file-directory-p cloud-org-root-dir)
    :commands (metal-archives-shopping-list-update
               metal-archives-retrieve-next-releases
               metal-archives-load-artists-map)
    :hook
    ;; (kill-emacs . metal-archives-shopping-list-update)
    (elpaca-after-init . metal-archives-load-artists-map)

    :init
    (when (file-exists-p (concat cloud-org-root-dir "perso/music/shopping_list.org" ))
      (setq metal-archives-shopping-list-target-file (concat cloud-org-root-dir "perso/music/shopping_list.org" )))

    :custom
    (metal-archives-shopping-list-root-node "CD")

    :config
    (add-to-list 'org-agenda-files metal-archives-shopping-list-target-file)
    (setq metal-archives-favorite-handle 'metal-archives-shopping-list-add-release-and-alert))
#+end_src

** DONE Youtube
CLOSED: [2021-02-09 Tue 16:12]
:PROPERTIES:
:ID:       136fb08d-d9a3-4c39-be8b-aae3da737065
:END:
To access youtube from Emacs, I am using =ytdious= which is based on the invidious.
It is connected to =youtube-dl= to download the video.

#+transclude: [[file:keytable_summary.org::Youtube]] :only-contents

#+BEGIN_SRC emacs-lisp
  (use-package ytdious
    :tags '("CONNECTED" "MULTIMEDIA")
    :commands (ytdious)
    :bind (
      :map ytdious-mode-map (
        <<keybindings-gen(table=ytdious-mode-keybindings)>>
      )
    )

    :custom (ytdious-sort-criterion 'upload_date)
    :init
    (setq ytdious-invidious-api-url "https://invidio.xamh.de/")

    :config
    (defun ytdious-download ()
      "Download video at point"
      (interactive)
      (let* ((video (ytdious-get-current-video))
             (id    (ytdious-video-id video)))
        (youtube-dl (concat "https://www.youtube.com/watch?v=" id))))

    (defun ytdious-watch ()
      "Stream video at point in mpv."
      (interactive)
      (let* ((video (ytdious-get-current-video))
             (id    (ytdious-video-id-fun video)))
        (start-process "ytdious mpv" nil
                       "mpv"
                       (concat "https://www.youtube.com/watch?v=" id)))))
#+END_SRC

** DONE Download
CLOSED: [2021-02-13 Sat 11:56]
:PROPERTIES:
:ID:       6690fff1-0405-4b95-8767-b7d76e0c8df0
:END:
Aria2 provides an easy way to manage downloads (both direct and peer-to-peer).
It requires =aria2c= to be available.

#+BEGIN_SRC emacs-lisp
  (when (executable-find "aria2c")
    (use-package aria2
      :ensure (:protocol ssh :type git :host github :repo "seblemaguer/aria2")
      :tags '("CONNECTED")
      :commands aria2-downloads-list))
#+END_SRC

* DONE Entertainment [100%]
:PROPERTIES:
:ID:       1d575160-5d7a-44b2-b334-d42ff75d340f
:END:
** DONE Music
CLOSED: [2021-12-10 Fri 12:19]
:PROPERTIES:
:ID:       940ba7ca-5b9f-4289-b4c0-267b190c0e8c
:END:
I am playing music in Emacs using EMMS.
The default configuration is already satisfying but I prefered to tweak a couple of part to make it more useable.
The first thing I changed is to use ~mpv~ as a player as I am already it as a default on my system.
I also tweaked the cache and some rendering part as I have a lot of files to navigate through.
Finally, I activated the browser and assigned the multimedia keys to be understood directly by EMMS.

#+transclude: [[file:keytable_summary.org::Music]] :only-contents

#+begin_src emacs-lisp
  (use-package emms
    :tags '("MULTIMEDIA" "MUSIC" "ENTERTAINMENT")
    :commands (emms emms-browse-by-artist with-current-emms-playlist)
    :bind (
      <<keybindings-gen(table=emms-keybindings)>>
    )

    :config
    (emms-all)

    ;; Use mpv player
    (setq emms-player-list '(emms-player-mpv))

    ;; A minor macos adaptation
    (when (eq system-type 'darwin)
      (setq emms-source-file-gnu-find "/usr/local/bin/gfind"))

    ;; Some behaviour definition
    (setq later-do-interval 0.0001
          emms-directory (concat user-emacs-directory "emms")
          emms-playlist-buffer-name "*Music*"
          emms-source-file-default-directory (expand-file-name "~/Music")
          emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find
          emms-show-format "NP: %s"
          emms-playlist-default-major-mode 'emms-playlist-mode
          emms-repeat-playlist t
          emms-mode-line-mode-line-function nil  ;; Don't want any info in the mode line
          emms-mode-line-titlebar-function 'emms-mode-line-playlist-current) ;; Put info in the titlebar

    ;; Visualisation activation/deactivation
    (emms-mode-line nil)

    ;; Enable cache and ensure to ignore any kind of URL
    (when (fboundp 'emms-cache)
      (emms-cache 1)
      (defun my-emms-cache-set  (type path track)
        (unless (string-match "^http[s]?://.*" path)
          (emms-cache-set type path track)))
      (setq emms-cache-set-function 'my-emms-cache-set))

    ;; Define routine to update cache without adding tracks to the playlist
    (defun emms-cache-update (dir)
      "Routine to update the cache without updating any playlist -either DIR, or the value of
    `emms-source-file-default-directory'."
      (interactive (list
        	    (emms-read-directory-name "Play directory tree: "
        				      (emms-source-file-directory-hint)
        				      emms-source-file-default-directory
        				      t)))
      (let ((files (emms-source-file-directory-tree (expand-file-name dir)
        					    (emms-source-file-regex)))
            (case-fold-search nil))
        (with-current-emms-playlist
          (point-max)
          (mapc (lambda (file)
        	  (unless (or (string-match emms-source-file-exclude-regexp file)
        		      (gethash file emms-cache-db))
        	    (emms-track 'file file)))
        	files))))

    ;; Adapt track description format
    (defun track-description (track)
      "Return a description of the current TRACK."
      (if (and (emms-track-get track 'info-artist)
               (emms-track-get track 'info-title))
          (let ((pmin (emms-track-get track 'info-playing-time-min))
        	(psec (emms-track-get track 'info-playing-time-sec))
        	(ptot (emms-track-get track 'info-playing-time))
        	(art  (emms-track-get track 'info-artist))
        	(tit  (emms-track-get track 'info-title))
        	(alb  (emms-track-get track 'info-album)))
            (cond ((and pmin psec) (format "%s - %s - %s [%02d:%02d]" art alb tit pmin psec))
        	  (ptot (format  "%s - %s - %s [%02d:%02d]" art alb tit (/ ptot 60) (% ptot 60)))
        	  (t (emms-track-simple-description track))))
        (progn
          (emms-track-simple-description track))))
    (setq emms-track-description-function 'track-description)

    ;; taken from http://emacs.stackexchange.com/questions/21747/emms-how-can-i-have-a-progress-bar?rq=1
    (defun emms-indicate-seek (_sec)
      "Show the progress bar when seek."
      (let* ((total-playing-time (emms-track-get
        			  (emms-playlist-current-selected-track)
        			  'info-playing-time))
             (elapsed/total (/ (* 100 emms-playing-time) total-playing-time)))
        (with-temp-message (format "[%-100s] %2d%% [%02d:%02d]/[%02d:%02d]"
        			   (make-string (round elapsed/total) ?=)
        			   (round elapsed/total)
        			   (/ (round emms-playing-time) 60) (% (round emms-playing-time) 60)
        			   (/ (round total-playing-time) 60) (% (round total-playing-time) 60))
          (sit-for 2))))
    (add-hook 'emms-player-seeked-functions #'emms-indicate-seek 'append))

  ;; Wait for elpaca so that the other packages are ready if necessary !
  (elpaca-wait)

  (use-builtin emms-info-metaflac ;; emms
    :tags '("MULTIMEDIA" "MUSIC" "ENTERTAINMENT")
    :config
    (setq emms-info-asynchronously nil
          emms-info-functions '(emms-info-metaflac)))

  (use-builtin emms-info-libtag ;; emms
    :tags '("MULTIMEDIA" "MUSIC" "ENTERTAINMENT")
    :config
    (setq emms-info-asynchronously nil)
    (add-to-list 'emms-info-functions 'emms-info-libtag t))

  (use-builtin emms-info-native ;; emms
    :tags '("MULTIMEDIA" "MUSIC" "ENTERTAINMENT")
    :init
    (setq emms-info-asynchronously nil)
    (add-to-list 'emms-info-functions 'emms-info-native t))

  (use-builtin emms-browser ;; emms
    :tags '("MULTIMEDIA" "MUSIC" "ENTERTAINMENT")
    :config
    ;; Formatting
    (setq emms-browser-info-artist-format "%iâ¢ %n"
          emms-browser-info-album-format "%i%cS [%y] %n"
          emms-browser-info-title-format "%iâª %T. %t [%d]"
          emms-browser-playlist-info-album-format "%cS %a - %A : "
          emms-browser-playlist-info-title-format "%i%T. %t [%d]")

    ;; Filtering
    (emms-browser-make-filter "all" #'ignore)
    (emms-browser-make-filter
     "recent - Month"
     (lambda (track) (< 30
        		(time-to-number-of-days
        		 (time-subtract (current-time)
        				(emms-info-track-file-mtime track))))))

    (emms-browser-make-filter
     "recent - Trimester"
     (lambda (track) (< (* 3 30)
        		(time-to-number-of-days
        		 (time-subtract (current-time)
        				(emms-info-track-file-mtime track))))))

    (emms-browser-make-filter
     "not-played"
     (lambda (track)
       (not (funcall (emms-browser-filter-only-recent 365) track))))

    (emms-browser-set-filter (assoc "all" emms-browser-filters))
    )
#+end_src

** DONE TV/Show
CLOSED: [2021-12-10 Fri 12:38]
:PROPERTIES:
:ID:       34a159a5-683d-464a-8926-e7a17d55215d
:END:
To sort out what I am currently watching, I use =seriestracker=.

#+begin_src emacs-lisp
  (use-package seriestracker
    :ensure (seriestracker :type git :host github :repo "MaximeWack/seriesTracker")
    :tags '("MULTIMEDIA" "ENTERTAINMENT")
    :demand                                                   ;;To force load seriestracker
    :config                                                   ;;These are the default
    (setq seriestracker-file (concat user-emacs-directory "seriestracker.el")
          seriestracker--fold-cycle 'seriestracker-all-folded ;; can also be 'seriestracker-all-unfolded or 'seriestracker-series-folded. Will deternine the folding at startup
          seriestracker-show-watched "hide"                   ;; whether to hide or "show" the watched episodes
          seriestracker-sorting-type "next"))                 ;; or "alpha" for alphabetic sort
#+end_src

** DONE Subtitles
CLOSED: [2023-01-18 Wed 12:16]
:PROPERTIES:
:ID:       98a11f14-44d0-4618-af40-b6e6f2512f68
:END:
Sacha Chua released an great package (=subed=) to edit subtitles files using emacs.
I just modified a couple of bindings to fit my French keyboard layout (the other keys are there for reminder).

#+transclude: [[file:keytable_summary.org::Subtitles]] :only-contents

#+begin_src emacs-lisp
  (use-package subed
    :ensure (subed :type git :host github :repo "sachac/subed" :files ("subed/*.el"))
    :bind (
      :map subed-mode-map (
          <<keybindings-gen(table=subed-keybindings)>>
      )
    )
    :hook
    (subed-mode . subed-disable-sync-point-to-player)
    (subed-mode . save-place-local-mode)
    (subed-mode . turn-on-auto-fill)
    (subed-mode . (lambda () (setq-local fill-column 40))))
#+end_src

* DONE Emacs and the rest of the world [100%]
:PROPERTIES:
:ID:       4706d18e-606a-4dee-85be-258f573f7beb
:END:
As Emacs is the entry point of my numerical life, I connected to a bunch of other external things.
It can be summarized around three categories:
the connection to the desktop environment,
the connection to the local operating system,
and the connection to servers (mainly computing clusters).

** DONE Emacs and the desktop [100%]
CLOSED: [2021-01-05 Tue 12:51]
:PROPERTIES:
:ID:       cb04489e-0b92-4f9b-9682-f4b0522ab920
:END:
In this section, I configure a set of packages to control different desktop aspect using Emacs.
Each subsection focuses on dedicated aspect of the desktop.

*** DONE Global clickable URLS
CLOSED: [2024-08-16 Fri 14:38]
:PROPERTIES:
:ID:       67af1675-65b0-4054-8ade-65e210ea08c6
:END:

#+begin_src emacs-lisp
    (use-builtin goto-addr
      :tags '("DESKTOP")
      :config
      (define-globalized-minor-mode global-goto-address-mode
        goto-address-mode goto-address-mode :group 'goto-address)

      (global-goto-address-mode)

      (define-globalized-minor-mode global-goto-address-prog-mode
        goto-address-prog-mode goto-address-prog-mode :group 'goto-address))
#+end_src

*** DONE Clipboard
CLOSED: [2021-01-05 Tue 12:39]
:PROPERTIES:
:ID:       596db304-f83c-43b3-b073-b5dde25fb04e
:END:
Integrate the clipboard to Emacs by using the package =cliphist=.

#+begin_src emacs-lisp
  (when (executable-find "parcellite")
    (use-package cliphist
      :tags '("DESKTOP")
      ))
#+end_src

*** DONE Bluetooth
CLOSED: [2021-01-05 Tue 12:52]
:PROPERTIES:
:ID:       3127c6cb-8025-43fb-83d3-46c53294da0e
:END:
To control the bluetooth devices, I use the package =bluetooth=.
No extra configuration is needed.

#+begin_src emacs-lisp
  (use-package bluetooth
    :tags '("DESKTOP")
    )
#+end_src

*** DONE Emacs and the web browser
CLOSED: [2021-01-05 Tue 12:47]
:PROPERTIES:
:FROM:     https://github.com/GhostText/GhostText
:ID:       ea42ca37-120c-4731-a2cb-375658a85a8b
:END:
Sometimes it is difficult to edit a text (from a textarea) in the web browser.
Using =atomic-chrome= coupled with the ~GhostText~ addon, I edit such text in Emacs and its synchronized in the browser automatically.

#+transclude: [[file:keytable_summary.org::Browser]] :only-contents

#+begin_src emacs-lisp
  (use-package atomic-chrome
    :tags '("DESKTOP")
    :hook
    (elpaca-after-init . atomic-chrome-start-server)

    :commands
    (atomic-chrome-start-server)

    :init
    (setq atomic-chrome-server-ghost-text-port 4666
          atomic-chrome-default-major-mode 'org-mode)

    :bind (
      <<keybindings-gen(table=atomic-chrome-keybindings)>>

     :map atomic-chrome-edit-mode-map
       ("C-c C-c" . nil)
     )
    )
#+end_src

*** DONE Emacs Application Framework (EAF)
CLOSED: [2021-01-05 Tue 12:51]
:PROPERTIES:
:ID:       3438154f-10d6-4744-9d1a-b3641dec6bd9
:END:
Emacs Application Framework (EAF) provides a way to integrate multiple applications internally into Emacs.
Emacs needs to be compiled using the flag ~--with-modules~ as it requires some dynamic linking.
In addition, =eaf= is installed externally as it requires additional compilation effort.
As for =mu4e=, my environment scripts are taking care of the compilation.

#+begin_src emacs-lisp :tangle no
  (use-package epc
    :tags '("DESKTOP")
    )

  (use-package eaf
    :ensure (eaf :type git
                   :host github
                   :repo "emacs-eaf/emacs-application-framework"
                   :files ("eaf.el" "eaf.py" "applications.json" "extension" "core" "img" "sync-eaf-resources.py"))
    :tags '("DESKTOP")
    :commands (eaf-install-and-update eaf-open eaf-open-browser)
    :custom
    (eaf-pdf-extension-list '("xps" "oxps" "cbz" "epub" "fb2" "fbz"))
    (eaf-browser-continue-where-left-off t)
    (eaf-browser-enable-adblocker t)
    (eaf-apps-to-install '(browser mail pdf-viewer image-viewer markdown-previewer mindmap org-previewer system-monitor video-player))
    ;; (browse-url-browser-function 'eaf-open-browser)

    :init
    (eval-after-load 'mu4e '(lambda ()
                              (add-to-list 'mu4e-view-actions
                                           '("ViewHTML" . mu4e-eaf-wrapper) t)))

    :config
    (when (require 'eaf-browser nil 'noerror)
      (require 'eaf-mail)
      (require 'eaf-pdf-viewer)
      (require 'eaf-image-viewer)
      (require 'eaf-markdown-previewer)
      (require 'eaf-org-previewer)
      (require 'eaf-mindmap)
      (require 'eaf-system-monitor))

    (defun mu4e-eaf-wrapper (msg)
      "Wrapper to be able to add `eaf-open-mail-as-html' in `mu4e-view-actions'."

      (unless (require 'eaf-browser nil 'noerror)
        (error "Need to run `eaf-install-and-update' first!"))
      (eaf-open-mail-as-html)))
#+end_src

*** DONE Printing
CLOSED: [2023-04-07 Fri 12:50]
:PROPERTIES:
:ID:       95795136-ead6-4e6b-808c-79f3544726c0
:END:
#+begin_src emacs-lisp
  (use-package transient-extras-lp
    :tags '("DESKTOP" "PRINT")
    :after pdf-tools
    :config
    (with-eval-after-load 'dired
      (define-key
       dired-mode-map
       (kbd "C-c C-p") #'transient-extras-lp-menu))

    (with-eval-after-load 'pdf-tools
      (define-key
       pdf-misc-minor-mode-map
         (kbd "C-c C-p") #'transient-extras-lp-menu)))
#+end_src

** DONE Emacs and the system [100%]
CLOSED: [2021-01-05 Tue 13:42]
:PROPERTIES:
:ID:       e295d6e9-d025-4551-956d-7c8e0d611dc0
:END:
In a lower level, I want to have a better access to some system/(non desktop-)environment tools.
I separated the configuration into three main subsections:
the section dedicated to the system/shell,
the section dedicated to specific tools,
and the section dedicated to background processes/"daemons" management directly into Emacs.

*** DONE System and Shell
CLOSED: [2021-01-05 Tue 13:13]
:PROPERTIES:
:ID:       12312784-2ad0-43d8-8abd-1ae8c266f709
:END:
In this section, I configure packages to access system informations and enforce the shell environment into Emacs.

#+transclude: [[file:keytable_summary.org::Shell execution]] :only-contents

**** DONE Get system control information
CLOSED: [2021-01-05 Tue 13:11]
:PROPERTIES:
:ID:       84f3eb5b-0650-459d-a54b-b770b75b39f5
:END:
To access the global OS information, =sysctl= provides a basic interface.
No extra configuration is needed.

#+begin_src emacs-lisp
  (use-package sysctl
    :tags '("SYSTEM")
    :commands (sysctl))
#+end_src

**** DONE Execute with shell environment
CLOSED: [2021-01-05 Tue 13:13]
:PROPERTIES:
:ID:       f1d0d602-b13d-4656-8d71-c91514ef8583
:END:
Because an important part of my environment relies on a properly configured shell (especially for environment variables),
I use =exec-path-from-shell= to force to run a command using the shell environment.
I also rely on =envrc= to load ~direnv~ configurations.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :tags '("SYSTEM")
    :config
    (setq exec-path-from-shell-arguments nil)
    (exec-path-from-shell-initialize))

  (when (executable-find "dtach")
    (use-package detached
      ;; NOTE: the original repo is a pain to access with ssh, using the emacsmirror
      :ensure (detached :type git :host github :repo "emacsmirror/detached")
      :tags '("SYSTEM")
      :init
      (detached-init)
      :bind (
        <<keybindings-gen(table=detached-mode-keybindings)>>
      )

      :custom ((detached-show-output-on-attach t)
               (detached-shell-history-file "~/.bash_history"))))

  (when (executable-find "direnv")
    (use-package envrc
      :tags '("SYSTEM")
      :hook (after-init . envrc-global-mode)))
#+end_src

**** DONE Define some short for commands
CLOSED: [2021-07-19 Mon 09:32]
:PROPERTIES:
:ID:       705e65d6-cdb6-4817-81d9-2226225f0956
:END:
This section defines some helpers for some recurrent commands.
It relies on the package =run-command=.
For now, only global commands are configured but some project specific configuration may be integrated in a near future.


#+begin_src emacs-lisp
  (use-package run-command
    :tags '("SYSTEM")
    :bind (
      <<keybindings-gen(table=run-command-entry-keybindings)>>
    )

    :custom (run-command-recipes '(define-server-commands))
    :init

    (defun define-server-commands ()
      "Define server commands used in run-command"
      (list
       (list :command-name "Start python HTTP server"
             :command-line "python -m http.server")
       (list :command-name "Jekyll serve"
             :command-line "bundle exec jekyll serve"))))
#+end_src

*** DONE Tools
CLOSED: [2021-01-05 Tue 13:21]
:PROPERTIES:
:ID:       0378e120-f0aa-4da3-8470-5fd87eea3517
:END:
This section is dedicated to the configuration of specific tools.
For now, it comprises ~Docker~ and ~Conda~.

**** DONE Docker
CLOSED: [2021-01-05 Tue 13:20]
:PROPERTIES:
:ID:       e240312d-0cd0-4a91-86cd-9f6a46924bb8
:END:
The package =docker= is already configured to provide everything to interact with Docker.

#+begin_src emacs-lisp
  (when (executable-find "docker")
    (use-package docker
      :commands (docker)
      :tags '("SYSTEM")
      ))
#+end_src

**** DONE Conda
CLOSED: [2021-01-05 Tue 13:18]
:PROPERTIES:
:ID:       f533e047-99ff-46b0-a42c-762625ed8ad1
:END:
I am using micromamba (more efficient than conda) to configure different environment for ~Python~ and ~R~.
While =conda.el= provide a nice environment management, it is not compatible with micromamba.
However =SqrtMinusOne= developped the package [[https://github.com/SqrtMinusOne/micromamba.el/][micromamba.el]] which provides a nice support for this tools.

#+begin_src emacs-lisp
  (when (executable-find "micromamba")
    (use-package micromamba
      :ensure (micromamba :host github :repo "SqrtMinusOne/micromamba.el")
      :init
      (defalias 'conda-activate 'micromamba-activate)
      (defalias 'conda-deactivate 'micromamba-deactivate)
      ;; :init
      ;; (setq conda-anaconda-home (expand-file-name "~/environment/local/mamba"))

      ;; (defun conda-hook ()
      ;;   "Conda activation hook."
      ;;   (setq conda-message-on-environment-switch nil)
      ;;   (conda-env-autoactivate-mode t))

      ;; :config
      ;; (conda--get-config)

      ;; :hook
      ;; (python-mode . conda-hook)
      ;; (ess-mode    . conda-hook)
      ))
#+end_src

*** DONE Dealing with processes
CLOSED: [2021-01-05 Tue 13:26]
:PROPERTIES:
:ID:       b72a7e89-251f-403e-a6f0-44c5cd5b89a9
:END:
To deal with background processes, I rely on two packages: =prodigy= and =elcontext=.
=prodigy= is used to run and monitor the processes.
However, =prodigy= doesn't provide a nice way to start processes automatically.
=elcontext= is used to deal with the start.
Yet =elcontext= is still slightly bugged, so I use my own fork right now.
Currently, it is mainly used to start/stop emails but it is likely to be expanded in the future.

#+transclude: [[file:keytable_summary.org::Processes]] :only-contents

#+BEGIN_SRC emacs-lisp
  (use-package prodigy
    :defer t
    :tags '("CONNECTED" "SYSTEM" "PROCESSES")
    :bind (:map prodigy-mode-map (
      <<keybindings-gen(table=prodigy-keybindings)>>
    ))

    :hook
    (kill-emacs . prodigy-force-stop-all-service)

    :config

    ;; Define services
    (when (and (string= work-hostname (system-name))
               (fboundp 'define-mail-services))
      (define-mail-services))

    (prodigy-define-service
     :name "davcal"
     :command "ssh"
     :args `("-nNT" "-L" "1080:localhost:1080" ,work-hostname)
     :tas '(perso ssh irc)
     :stop-signal 'sigterm
     :kill-process-buffer-on-stop t)

    (defun prodigy-force-stop-all-service ()
      "Helper to force kill all service"
      (dolist (service prodigy-services)
        (prodigy-stop-service service t))))

  (use-package osx-location
    :ensure (
       :package "osx-location"
       :fetcher github
       :repo "purcell/osx-location"
       :files ("*.el" "EmacsLocationHelper")
       :version (lambda (_) "0.4") ;; NOTE: dirty hack to ensure the version is properly set
       ))

  (use-package elcontext
    :ensure (:protocol ssh :type git :host github :repo "seblemaguer/elcontext" :branch "fix_missing_hydras_2")
    :tags '("CONNECTED" "SYSTEM" "PROCESSES")
    :config

    (defun elcontext-start-prodigy (name)
      "Helper to start properly the prodigy service NAME via elcontext."
      (prodigy-start-service
          (prodigy-find-service name)))

    (when (and (string= work-hostname (system-name))
               (fboundp 'list-mail-services))
      (dolist (name (list-mail-services))
        (setq elcontext--context-id name
              elcontext--context-current (ht (:name name)
                                             (:time (ht))
                                             (:action `(elcontext-start-prodigy ,name))
                                             (:location (ht))
                                             (:directory (expand-file-name "~"))))
        (elcontext-add-context elcontext--context-id elcontext--context-current)))

    ;; Reinit everything
    (setq elcontext--context-id nil
          elcontext--context-current (ht (:name nil)
                                         (:time (ht))
                                         (:action nil)
                                         (:location (ht))))
    (elcontext-global-mode))
#+END_SRC

** DONE Emacs and the servers
CLOSED: [2021-01-05 Tue 13:06]
:PROPERTIES:
:ID:       ed86814a-5744-4c13-8e1a-4ff9f7ef1b8b
:END:
Finally, I access to computing clusters regularly.
The main tools I am using there are ~docker~ and ~slurm~.
As an entry point, as every Emacs use, I use =tramp= to deal with servers using SSH as a backend.
=slurm-mode= doesn't rely on =tramp= and does not proposes remote access by default.
However, a hack was proposed in [[https://github.com/truls/slurm.el/tree/explicit-username][truls]] fork
I prefere to use my own fork as I would like to expand a bit more the rendering.

#+begin_src emacs-lisp
  (use-builtin tramp
    :tags '("SYSTEM" "SERVER" "CONNECTED")
    :custom
    (tramp-default-method "ssh")
    (password-cache-expiry 60)
    (tramp-auto-save-directory temporary-file-directory)
    (tramp-verbose 1)

    ;; ;; Debug
    ;; (tramp-verbose 9)
    ;; (tramp-debug-buffer t)

    :init
    ;; (set-default 'tramp-default-proxies-alist (quote ((".*" "\\`root\\'" "/ssh:%h:"))))
    (defun sudo-edit-current-file ()
      "Edit the current file as root"
      (interactive)
      (let ((position (point)))
        (find-alternate-file
         (if (file-remote-p (buffer-file-name))
             (let ((vec (tramp-dissect-file-name (buffer-file-name))))
               (tramp-make-tramp-file-name
                "sudo"
                (tramp-file-name-user vec)
                (tramp-file-name-host vec)
                (tramp-file-name-localname vec)))
           (concat "/sudo::" (buffer-file-name))))
        (goto-char position))))


  (use-package slurm-mode
    :ensure (:protocol ssh :type git :host github :repo "seblemaguer/slurm.el" :branch "explicit-username")
    :tags '("SYSTEM" "SERVER" "CONNECTED"))
#+end_src

** DONE Helpers [100%]
CLOSED: [2023-09-18 Mon 16:48]
:PROPERTIES:
:ID:       27c5a391-e781-4311-9ac5-db64fba6fb2c
:END:
In this section, some general helpers are configured.

*** DONE Unit conversion
CLOSED: [2023-09-18 Mon 16:36]
:PROPERTIES:
:ID:       609afc32-073e-46f1-8fb8-2389fb4b5136
:END:
=units= is a program which provides a quick way to convert between different units.
If this program is installed, we can use the emacs wrapper to facilitate the conversion between units inside a buffer.

#+begin_src emacs-lisp
(when (executable-find "units")
  (use-package units-mode
    :tags '("HELPERS")
    :hook text-mode
    :config
    (local-set-key (kbd "C-c u") 'units-convert-region-and-insert)))
#+end_src

*** DONE Open Street Map
CLOSED: [2023-09-18 Mon 16:40]
:PROPERTIES:
:ID:       efff9074-df6b-4d8b-adf7-892e22e36ed8
:END:
=osm= provides an interface to Open Street Map in emacs.
In addition to the usual commands, it also integrates org-mode links, which is convenient to pin locations in my notes.

#+begin_src emacs-lisp
  (use-package osm
    :tags '("HELPERS" "DESKTOP")
    :custom
    ;; Take a look at the customization group `osm' for more options.
    (osm-server 'default) ;; Configure the tile server
    (osm-copyright nil))
#+end_src

*** DONE Anki editor
CLOSED: [2023-09-18 Mon 16:47]
:PROPERTIES:
:ID:       f6508c8d-cc91-4ade-b9c7-c977d37a5863
:END:
[[https://apps.ankiweb.net/][Anki]] is flash-card program.
=anki-editor= is a mode which interfaces =org-mode= and Anki.
This provides a really neat way to create Anki cards easily directly in emacs.

Before anything, it is necessary to install Anki and [[https://foosoft.net/projects/anki-connect/][Anki-Connect]].
To install Anki, just follow the instruction on the application webpage: https://apps.ankiweb.net/
To install Anki-Connect:
 1. Open the =Install Add-on= dialog by selecting =Tools | Add-ons | Get Add-ons...= in Anki.
 2. Input =2055492159= into the text box labeled =Code= and press the OK button to proceed.
 3. Restart Anki when prompted to do so in order to complete the installation of Anki-Connect.

#+begin_src emacs-lisp
  (when (executable-find "anki")
    (use-package anki-editor
      :tags '("HELPERS" "DESKTOP" "ORG")
      :ensure (:host github :repo "orgtre/anki-editor")
      :bind (:map anki-editor-mode-map
                  ("C-c r" . org-desc2anki))
      :config
      (defun org-desc2anki (start end)
        "Convert current region containing desription list (<bulgarian> :: <english) to anki reverse card format."
        (interactive "r")
        (replace-regexp "- \\(.*\\) :: \\(.*\\)" "*** \\1
  :PROPERTIES:
  :ANKI_NOTE_TYPE: Basic (and reversed card)
  :END:
  **** front
  \\1
  **** Back
  \\2
  " nil start end)))


    (use-builtin anki-editor-ui
      :tags '("HELPERS" "DESKTOP" "ORG")
      :defer t
      :after anki-editor
      :bind (:map anki-editor-mode-map
                  ("C-c e" . anki-editor-ui)))
    )
#+end_src

*** DONE LLMs
CLOSED: [2024-07-22 Mon 18:17]
:PROPERTIES:
:ID:       7d1067a2-a74e-4e33-ab40-1f1890ee200f
:END:
As LLMs are apparently becoming a thing, it could be useful to test one on a local machine.
The machine should have a GPU and we will only use =ollama= (so server is assumed to be available).

In order to install the server simply run the following:

#+begin_src sh
  # Install ollama client
  curl -fsSL https://ollama.com/install.sh | sh

  # Get Llama models
  ollama pull llama3:8b-instruct-q8_0
  ollama pull qwen2.5:3b
  ollama pull qwen2.5-coder:3b
#+end_src

Also, it may be useful to modify the variable =OLLAMA_MODELS= in the service file as the default path is =/usr/share/ollama/models=.

#+begin_src emacs-lisp
  (when (executable-find "ollama")
    (use-package ellama
      :tags '("HELPERS" "HEAVY" "GPU")
      :bind ("C-c e" . ellama-transient-main-menu)
      :init
      (setopt ellama-language "Finnish")

      (require 'llm-ollama)


      (setopt ellama-provider (make-llm-ollama :chat-model "llama3:8b-instruct-q8_0"
  	                                     :embedding-model "nomic-embed-text"
  	                                     :default-chat-non-standard-params '(("num_ctx" . 8192))))
      (setopt ellama-summarization-provider (make-llm-ollama :chat-model "qwen2.5:3b"
  	                                                   :embedding-model "nomic-embed-text"
  	                                                   :default-chat-non-standard-params '(("num_ctx" . 32768))))
      (setopt ellama-coding-provider (make-llm-ollama  :chat-model "qwen2.5-coder:3b"
  	                                             :embedding-model "nomic-embed-text"
  	                                             :default-chat-non-standard-params '(("num_ctx" . 32768))))


      ;; Predefined llm providers for interactive switching.
      ;; You shouldn't add ollama providers here - it can be selected interactively
      ;; without it. It is just example.
      (setopt ellama-providers '(("zephyr" . (make-llm-ollama :chat-model "zephyr:7b-beta-q6_K"
  			                                    :embedding-model "zephyr:7b-beta-q6_K"))
  		               ("mistral" . (make-llm-ollama :chat-model "mistral:7b-instruct-v0.2-q6_K"
  			                                     :embedding-model "mistral:7b-instruct-v0.2-q6_K"))
  		               ("mixtral" . (make-llm-ollama :chat-model "mixtral:8x7b-instruct-v0.1-q3_K_M-4k"
  			                                     :embedding-model "mixtral:8x7b-instruct-v0.1-q3_K_M-4k"))))

      ;; Naming new sessions with llm
      (setopt ellama-naming-provider (make-llm-ollama :chat-model "llama3:8b-instruct-q8_0"
  	                                            :embedding-model "nomic-embed-text"
  	                                            :default-chat-non-standard-params '(("stop" . ("\n")))))
      (setopt ellama-naming-scheme 'ellama-generate-name-by-llm)

      ;; Translation llm provider
      (setopt ellama-translation-provider (make-llm-ollama :chat-model "qwen2.5:3b"
  	                                                 :embedding-model "nomic-embed-text"
  	                                                 :default-chat-non-standard-params '(("num_ctx" . 32768))))

      ;; customize display buffer behaviour
      ;; see ~(info "(elisp) Buffer Display Action Functions")~
      (setopt ellama-chat-display-action-function #'display-buffer-full-frame)
      (setopt ellama-instant-display-action-function #'display-buffer-at-bottom)

      :config
      ;; send last message in chat buffer with C-c C-c
      (add-hook 'org-ctrl-c-ctrl-c-hook #'ellama-chat-send-last-message))
    )
#+end_src

* DONE Visual [100%]
:PROPERTIES:
:ID:       4624b657-41a9-4f0a-9ed5-7f9670603d83
:END:
For the visual part, I rely mainly on =nano-emacs= developed by Nicolas P. Rougier.
It is a simple layout but incredibly clear and precise.
I deviate from it by prefering my emacs (color) theme (=flatfluc-theme=) and I tweaked a bit the layout (see =nano-layout=).
Concerning the layout, I needed to add a specific font resolution for my surface.
This is done in the ~config~ part of the package loading.
I also need =rainbow-mode= to help visualize the colors when editing the themes.
Finally, I use =indicators= to show my relative position in the buffer.

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :tags '("VISUAL"))

  (use-package flatfluc-theme
    :tags '("VISUAL")
    :init
    ;; Clean some unused information
    (tooltip-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)

    ;;disable splash screen and startup message
    (setq inhibit-startup-message t)
    (setq initial-scratch-message nil)

    ;; Default frame settings
    (setq default-frame-alist
          (append (list
                   '(font . "MesloLGS NF-10") ;; NOTE: the size needs to be spec. else font is too small
                   '(min-height . 1)  '(height . 45)
                   '(min-width  . 1)  '(width  . 81)
                   '(vertical-scroll-bars  . nil)
                   '(internal-border-width . 24)
                   '(left-fringe           . 15)
                   '(right-fringe          . 15)
                   '(tool-bar-lines        . 0)
                   '(menu-bar-lines        . 0))))

    ;; Vertical window divider
    (setq window-divider-default-right-width 5
          window-divider-default-places 'right-only)
    (window-divider-mode 1)

    ;; Fringe bits
    (setq-default indicate-buffer-boundaries 'right)

    ;; Highlight current line
    (global-hl-line-mode)

    :config
    (load-theme 'flatfluc t)

    ;; Nicer glyphs for continuation and wrap
    (defface flatfluc-faded `((t :foreground ,fui-soaring-eagle))
      "Faded face inspired by nano-theme. For now defined in the config and not in the theme")
    (set-display-table-slot standard-display-table
                            'truncation (make-glyph-code ?â¦ 'flatfluc-faded))
    (set-display-table-slot standard-display-table
                            'wrap (make-glyph-code ?- 'flatfluc-faded))

    ;; Update alert colors to be flatfluc friendlier
    (setq alert-severity-colors `((urgent   . ,fui-dark-alizarin)
                                  (high     . ,fui-dark-carrot)
                                  (moderate . ,fui-sunflower)
                                  (normal   . ,fui-turquoise)
                                  (low      . "blue")
                                  (trivial  . "purple")))
    )

  (use-package breadcrumb
    :tags '("VISUAL"))

  (use-package nano-modeline
    :ensure (nano-modeline :type git :host github :repo "rougier/nano-modeline")
    :tags '("VISUAL")
    :after breadcrumb
    :hook
    (prog-mode            . nano-modeline-prog-mode)
    (text-mode            . nano-modeline-text-mode)
    (org-mode             . nano-modeline-org-mode)
    (pdf-view-mode        . nano-modeline-pdf-mode)
    (mu4e-headers-mode    . nano-modeline-mu4e-headers-mode)
    (mu4e-view-mode       . nano-modeline-mu4e-message-mode)
    (elfeed-show-mode     . nano-modeline-elfeed-entry-mode)
    (elfeed-search-mode   . nano-modeline-elfeed-search-mode)
    (term-mode            . nano-modeline-term-mode)
    (xwidget-webkit-mode  . nano-modeline-xwidget-mode)
    (messages-buffer-mode . nano-modeline-message-mode)
    (org-capture-mode     . nano-modeline-org-capture-mode)
    (org-agenda-mode      . nano-modeline-org-agenda-mode)

    :config
    (nano-modeline-text-mode t)

    ;; ===== Modeline
    (setq mode-line-format (list ""))
    (setq-default mode-line-format (list ""))
    (set-face-attribute 'nano-modeline-active nil
                        :foreground fui-fg
                        :background fui-deep-clouds
                        :box '(:line-width 1))
    (set-face-attribute 'nano-modeline-status nil
                        :background fui-amethyst
                        :foreground fui-deep-clouds
                        :box '(:line-width 1))
    (set-face-attribute 'mode-line nil
                        :foreground fui-fg
                        :background fui-deep-clouds
                        :box '(:line-width 1)
                        :height 40)
    (set-face-attribute 'mode-line-inactive nil
                        :foreground fui-deep-clouds
                        :background fui-deep-clouds
                        ;; :box '(:line-width 1)
                        :box nil
                        :height 40)

    (defun nano-modeline-emms-track-description (track)
      "Return a description of the current TRACK tuned for nano-modeline."
      (if (and (emms-track-get track 'info-artist)
               (emms-track-get track 'info-title))
          (let ((art (emms-track-get track 'info-artist))
                (tit  (emms-track-get track 'info-title))
                (track-number  (emms-track-get track 'info-tracknumber))
                (alb  (emms-track-get track 'info-album)))
            (format "%s: %s / %02d - %s" art alb (string-to-number track-number) tit))
        (progn
          (emms-track-simple-description track))))

    (defun nano-modeline-emms-playlist-current (&optional name)
      "Wrapper to get the current track from the playlist."
      (propertize
       (nano-modeline-emms-track-description (emms-playlist-current-selected-track))
       'face (nano-modeline-face 'name)))

    (defun nano-emms-playing-time ()
      "Wrapper to get the EMMS playing time."
      emms-playing-time-string)

    (defun nano-modeline-emms-playlist-mode ()
      "Nano line for EMMS browser mode"

      (add-hook 'post-command-hook #'force-mode-line-update)
      (funcall nano-modeline-position
               '((nano-modeline-buffer-status) " "
                 (nano-modeline-buffer-name))

               '((nano-modeline-emms-playlist-current) " "
                 (nano-emms-playing-time))))

    (defun nano-modeline-emms-browser-mode ()
      "Nano line for EMMS browser mode"

      (add-hook 'post-command-hook #'force-mode-line-update)
      (funcall nano-modeline-position
               '((nano-modeline-buffer-status "EMMS") " "
                 (nano-modeline-buffer-name))
               '()))

    ;; Add emms support
    (add-hook 'emms-browser-mode-hook #'nano-modeline-emms-browser-mode)
    (add-hook 'emms-playlist-mode-hook #'nano-modeline-emms-playlist-mode)

    ;; Slack
    (defun nano-modeline-buffer-holder-status (&optional padding)
      "Generic prefix to indicate buffer STATUS with vertical PADDING (top . bottom)"

      (let* ((padding (or padding nano-modeline-padding))
             (top (propertize " " 'display `(raise ,(car padding))))
             (bot (propertize " " 'display `(raise ,(- (cdr padding))))))
        (propertize (concat top " " bot)
                    'face (nano-modeline-face 'status-**))))

    (defun nano-modeline-chat-mode ()
      "Nano line for chat based mode. At the opposite of `nano-modeline-text-mode', we ignore the column and status"

      (funcall nano-modeline-position
               '((nano-modeline-buffer-holder-status) " "
                 (nano-modeline-buffer-name))
               '()))

    (add-hook 'slack-mode-hook #'nano-modeline-chat-mode)
    (add-hook 'telega-chat-mode-hook #'nano-modeline-chat-mode)

    ;; add Breadcrumb
    (set-face-attribute 'breadcrumb-face nil :inherit 'nano-modeline-active)
    (set-face-attribute 'breadcrumb-project-leaf-face nil :inherit 'nano-modeline-active)
    (defun nano-modeline-buffer-name (&optional name)
      "Updated nano-modeline buffer `name' formatting to support breadcrumb."
      (if (and (require 'breadcrumb nil 'noerror)
               (not (null (breadcrumb-project-crumbs)))
               (not (derived-mode-p 'pdf-view-mode 'telega-image-mode 'telega-chat-mode 'telega-root-mode 'telega-webpage-mode)))
          (breadcrumb--header-line)
        (propertize
         (cond (name name)
               ((buffer-narrowed-p) (format"%s [narrow]" (buffer-name)))
               (t (buffer-name)))
         'face (nano-modeline-face 'name)))))
#+end_src

** DONE Prism
CLOSED: [2021-01-06 Wed 12:26]
:PROPERTIES:
:ID:       9b966fbb-3e32-401f-920d-66a7e4646a33
:END:
In daemon mode, =prism= is required to be required **after** loading the theme.
Therefore, for now it is here!

#+BEGIN_SRC emacs-lisp
  (use-package prism
    :tags '("CORE" "BUFFER" "VISUAL")
    :config
    (defun load-prism (frame)
      (with-selected-frame frame
        (remove-hook 'after-make-frame-functions 'load-prism)
        (prism-set-colors :num 16
          :desaturations (cl-loop for i from 0 below 16
                                  collect (* i 2.5))
          :lightens (cl-loop for i from 0 below 16
                             collect (* i 2.5))
          :colors (list "#C0392B" "#3498DB" "#16A085")

          :comments-fn
          (lambda (color)
            (prism-blend color
                         (face-attribute 'font-lock-comment-face :foreground) 0.25))

          :strings-fn
          (lambda (color)
            (prism-blend color "white" 0.5)))))

    (if (daemonp)
        (add-hook 'after-make-frame-functions 'load-prism)
      (load-prism (car (frame-list)))))
#+END_SRC

** DONE Font/Glyphs
CLOSED: [2021-01-05 Tue 10:41]
:PROPERTIES:
:ID:       06a72458-128d-410f-8387-a0b4fd371a51
:END:
Because, I tend to prefer glyphs to plain text, I tweaked a bit the font to override some glyphs.
This is especially useful for =magit=, =dired=, ...
To do so, I rely mainly on the ~nerdfonts~ collection.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :tags '("VISUAL" "ICONS")
    :config
    (defun set-icon-fonts (CODE-FONT-ALIST)
      "Utility to associate many unicode points with specified fonts."
      (--each CODE-FONT-ALIST
        (-let (((font . codes) it))
          (--each codes
            (set-fontset-font t `(,it . ,it) font)))))

    (defun load-default-fonts ()
      "Helper to load the default fonts when it should be when using the daemon."
      (when (and (not (member "all-the-icons" (font-family-list))) (display-graphic-p))
        (all-the-icons-install-fonts t))

      ;; The icons you see are not the correct icons until this is evaluated!
      (set-icon-fonts
       '(("fontawesome"
          ;; ï¼   ï     ï     ï      ï     ï
          #xf07c #xf0c9 #xf0c4 #xf0cb #xf017 #xf101)

         ("all-the-icons"
          ;; î¤   î¤¨
          #xe907 #xe928)

         ("github-octicons"
          ;; ï   ï     ï¶     ïµ     ï     ï
          #xf091 #xf059 #xf076 #xf075 #xf016 #xf00a)

         ("Symbola"
          ;; ð    â¨      â      â»    â¼     â      ð       ð½
          #x1d54a #x2a02 #x2205 #x27fb #x27fc #x2299 #x1d54b #x1d53d
          ;; ð¹    ð       ð
          #x1d539 #x1d507 #x1d517))))

    (defun load-fonts (frame)
      (select-frame frame)
      (load-default-fonts))

    (when (fboundp 'set-fontset-font)
      (if (daemonp)
          (add-hook 'after-make-frame-functions #'load-fonts)
        (load-default-fonts))))

  (use-package all-the-icons-nerd-fonts
    :ensure (all-the-icons-nerd-fonts :host github :repo "mohkale/all-the-icons-nerd-fonts")
    :tags '("VISUAL" "ICONS")
    :after all-the-icons
    :defer t
    :disabled t
    :config
    (all-the-icons-nerd-fonts-prefer))

  (use-package org-agenda-category-icons
    :ensure (:host github :repo "egregius313/org-agenda-category-icons")
    :tags '("VISUAL" "ICONS")
    :config
    (org-agenda-category-icons!
     :faicon
     (music release Release music Music)
     (wrench tools Tools configuration Configuration programming Programming)
     (flask expe Expe experiment Experiment)
     (file-o admin Admin administration Administration)
     (graduation-cap studies Studies teaching Teaching training Training)
     (suitcase trip Trip deplacement Deplacement)
     (book biblio Biblio reading Reading writing Writing paper Paper documentation Documentation)
     (envelope mail Mail)

     :fileicon
     (emacs emacs Emacs)
     (org org ORG)
     (image review Review)
     ))
#+end_src

** DONE Helpers [100%]
:PROPERTIES:
:ID:       0d344560-8688-4216-84ae-3fe393d336d1
:END:
In order to guide me a little bit more to the information I need,
I introduce a couple of visual helpers.
All of these helpers are configured in this section.

*** DONE Segmenting
CLOSED: [2021-01-05 Tue 10:51]
:PROPERTIES:
:ID:       7d7bb39b-ff02-451f-a610-e0c4ca12dc10
:END:
To segment properly different part of the code, I rely on two key concepts: separators and page breaks
Separators are coming in two ways: unary (like space) and binary (parenthesis style).
For the former, I sometimes activate the builtin =whitespace-mode= but it doesn't require any configuration.
For the latter, I rely on =smartparens= for the editing part and =rainbow-delimiters= to associate a color to each level of parenthesis.
It is to be noted than =smartparens= is much more completing than what I described and I may use some functionalities without knowing it.
Finally, the package =page-break-lines= provides a nice way to visualize a page break (^L) to be easily spotted.

#+begin_src emacs-lisp
  ;; Use puni-mode globally and disable it for term-mode.
  (use-package puni
    :defer t
    :init
    ;; The autoloads of Puni are set up so you can enable `puni-mode` or
    ;; `puni-global-mode` before `puni` is actually loaded. Only after you press
    ;; any key that calls Puni commands, it's loaded.
    (puni-global-mode)
    (add-hook 'term-mode-hook #'puni-disable-puni-mode)

    ;; Use electric-pair to add auto-pair
    (electric-pair-mode 1))

  (use-package rainbow-delimiters
    :tags '("VISUAL")
    :hook
    (prog-mode . rainbow-delimiters-mode))

  (use-package page-break-lines
    :tags '("VISUAL")
    :diminish page-break-lines-mode
    :config
    (global-page-break-lines-mode t))
#+end_src

*** DONE Navigating
CLOSED: [2021-01-05 Tue 10:46]
:PROPERTIES:
:ID:       bda4b153-a9f6-48d9-a243-051f55e294a6
:END:
Modifying/Navigating can lead to be slightly confused what has just happened.
I added =googles= to briefly flash to indicate what just changed and =scrollkeeper= to see where I am after a massive scrolling operation.
I also add =xhair= to visualize where I am (line + column) when I need to align things column-wise.

#+transclude: [[file:keytable_summary.org::Visual]] :only-contents

#+begin_src emacs-lisp
  (use-package goggles
    :tags '("VISUAL")
    :config
    (goggles-mode)
    (setq-default goggles-pulse t))

  (use-package scrollkeeper
    :ensure (scrollkeeper :type git :host github :repo "alphapapa/scrollkeeper.el")
    :tags '("VISUAL")
    :bind (
      <<keybindings-gen(table=scrollkeeper-remap-keybindings)>>
    ))

  (use-package xhair
    :tags '("VISUAL")
    )
#+end_src

*** DONE Filling
CLOSED: [2021-01-05 Tue 12:36]
:PROPERTIES:
:ID:       090646ff-c2f0-4732-918b-5def11abb327
:END:
To be consistent, I prefer to wrap the line at the ~fill-column~ value.
This is functionality is provided by =visual-fill-column=.

#+BEGIN_SRC emacs-lisp
  (use-builtin visual-fill-column
    :tags '("VISUAL")
    )
#+END_SRC

*** DONE Indentation
CLOSED: [2021-03-01 Mon 09:17]
:PROPERTIES:
:ID:       19d4716c-a330-4374-a71c-50d9e86b104b
:END:
When I am programming, I like seeing clearly at which indentation level I am.
To see this, I am using =indent-bars=.

#+begin_src emacs-lisp
  (use-package indent-bars
    :ensure (indent-bars :type git :host github :repo "jdtsmith/indent-bars")
    :custom
    (indent-bars-treesit-support t)
    (indent-bars-treesit-ignore-blank-lines-types '("module"))

    ;; Add other languages as needed
    (indent-bars-treesit-scope '((python function_definition class_definition for_statement
                                         if_statement with_statement while_statement)))
    :hook ((prog-mode yaml-mode sgml-mode) . indent-bars-mode))
#+end_src

*** DONE Diff
CLOSED: [2021-01-05 Tue 12:34]
:PROPERTIES:
:ID:       9c778844-dbd3-431c-8d2e-42674d1aa1c2
:END:
Due to the amount of modifications, I like having indicators which are reminding me what has been changed.
I am using =diff-hl= which provides a diff. status on the (left for me) fringe.
Long lines are also distracting, so I prefer to ellipse them.
To do so, I use =abridge-diff=.

#+begin_src emacs-lisp
  (use-package diff-hl
    :tags '("VISUAL")
    :hook ((elpaca-after-init . global-diff-hl-mode)
           (dired-mode . diff-hl-dired-mode-unless-remote))

    :init (setq diff-hl-draw-borders t)
    :config

    ;; Highlight on-the-fly
    (diff-hl-flydiff-mode 1)

    ;; Integration with magit
    (with-eval-after-load 'magit
      (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh)))

  (use-package abridge-diff
    :after magit ;; optional, if you'd like to use with magit
    :tags '("VISUAL")
    :init (abridge-diff-mode 1))
#+end_src

*** DONE Emoji
CLOSED: [2021-01-05 Tue 12:28]
:PROPERTIES:
:ID:       d16ae961-5c57-4b46-9797-302d7d4397cc
:END:
I am chatting, mailing and so on.
I prefer to visualize nicely emojis than the raw text.
To do so, I use the package =emojify= which provides everything needed for this.

#+begin_src emacs-lisp
  (use-builtin emojify ;; FIXME: temporary way because of stupid slack enforcement
    :tags '("VISUAL" "DESKTOP")
    :functions (emojify-set-emoji-data)
    :custom
    (slack-buffer-emojify               t)
    :hook
    (sauron-mode . emojify-mode)
    (telega-root-mode . (lambda () (emojify-mode 1)))
    (circe-channel-mode . emojify-mode)

    :config
    (when (featurep 'emojify)
      (emojify-set-emoji-data)))
#+end_src

*** DONE Replacing
CLOSED: [2024-11-15 Fri 13:02]
#+BEGIN_SRC emacs-lisp
  (use-package visual-replace
    :tags '("VISUAL")
    :defer nil
    :config
    (visual-replace-global-mode 1)
    (define-key visual-replace-mode-map
                (kbd "C-c")
                visual-replace-secondary-mode-map))
#+END_SRC

*** DONE Diverse set of visual helpers
CLOSED: [2024-11-15 Fri 13:02]
#+BEGIN_SRC emacs-lisp
  (defun display-current-time ()
    "Display the current time in the minibuffer with bold, different colors for date and time, and improved separators."
    (interactive)
    (let* ((current-time (current-time))
           (formatted-date (format-time-string "%Y-%m-%d" current-time))
           (formatted-time (format-time-string "%H:%M:%S" current-time))
           (formatted-output (concat
                             (propertize formatted-date 'face 'header-line)
                             " "
                             (propertize formatted-time 'face 'font-lock-builtin-face))))
      (message "%s" formatted-output)))
#+END_SRC

* TODO Key bindings [75%]
:PROPERTIES:
:ID:       c0208280-e748-44d5-bab7-74c7b3298638
:END:
In this section, we define the bindings used globally.
We can consider the following categories:
  - The functional bindings :: which allows the user to access to a functionality from anywhere (e.g. opening the version-control manager)
  - The remapped bindings :: which are homogeneizing or extending existing bindings in multiple modes

An helper to remind these bindings is also provided.

** TODO Functional bindings
:PROPERTIES:
:ID:       c7d1328b-675f-4861-810f-c922d4d896aa
:END:
These bindings are associated to the keys <fn> where n is varying between 1 and 12.
Their configuration heavily relies on =matcha=, =hydra= and =transient=.
The package =matcha= is used as the entry point for the configuration for simplicity!

For the documentation and the reasoning behind the definition of the bindings, refer to [[file:keytable_summary.org]] (if documentation is available :D)

#+transclude: [[file:keytable_summary.org::Functional keybindings]] :only-contents

**** DONE Initialise matcha (and the global bindings for better readibility)
CLOSED: [2023-11-25 Sat 10:00]
:PROPERTIES:
:ID:       6a838fe1-9c36-4831-85d5-6b37298b2402
:END:
#+BEGIN_SRC emacs-lisp
  (use-package matcha
    :ensure (matcha :host github :repo "jojojames/matcha")
    :after transient
    :bind (
      <<keybindings-gen(table=functional-keybindings)>>
    )
    :commands (matcha-magit matcha-eglot matcha-project)
    :init
    (defun my-matcha-consult-ripgrep-default-directory ()
      "Run `consult-ripgrep' with `default-directory'."
      (interactive)
      (consult-ripgrep default-directory))

    (defun my-matcha-counsel-rg-default-directory ()
      "Run `counsel-rg' with `default-directory'."
      (interactive)
      (counsel-rg nil default-directory))

    (defcustom matcha-project-pkg-list
      '(((mode . vertico-mode)
         (file . find-file)
         (recent . consult-recent-file)
         (buffer . switch-to-buffer)
         (rg . my-matcha-consult-ripgrep-default-directory)
         (rg-project . consult-ripgrep)
         (mx . execute-extended-command)
         (swiper . consult-line)
         (swiper-all . consult-line-multi)
         (git-grep . consult-git-grep))

        ((mode . selectrum-mode)
         (file . find-file)
         (recent . consult-recent-file)
         (buffer . switch-to-buffer)
         (rg . my-matcha-consult-ripgrep-default-directory)
         (rg-project . consult-ripgrep)
         (mx . execute-extended-command)
         (swiper . consult-line)
         (swiper-all . consult-line-multi)
         (git-grep . consult-git-grep))

        ((mode . ivy-mode)
         (file . counsel-find-file)
         (recent . counsel-recentf)
         (buffer . ivy-switch-buffer)
         (rg . my-matcha-counsel-rg-default-directory)
         (rg-project . counsel-rg)
         (mx . counsel-M-x)
         (swiper . swiper)
         (swiper-all . swiper-all)
         (git-grep . counsel-git-grep))

        ((mode . helm-mode)
         (find . helm-find-files)
         (recent . helm-recentf)
         (buffer . helm-buffers-list)
         (mx . helm-M-x)
         (swiper . helm-swoop)
         (swiper-all . helm-multi-swoop)
         (git-grep . helm-grep-do-git-grep))

        ((mode . ido-mode)
         (file . ido-find-file)
         (recent . ido-recentf-open)
         (buffer . ido-switch-buffer))

        ((fallback . t)
         (file . find-file)
         (recent . recentf-open-files)
         (buffer . switch-to-buffer)
         (mx . execute-extended-command)
         (git-grep . vc-git-grep))
        )
      "List of alists of common commands that different packages provide."
      :type 'list
      :group 'matcha)

    (defmacro matcha-create-project-actions (&rest actions)
      "Create a function to run a project action.

    ACTIONS has to be a key in `matcha-project-pkg-list'
    that's not :mode or :fallback."
      `(progn
         ,@(cl-loop
            for action in actions
            appending
            (let ((last-func (intern (format "my-matcha-%S-last-used" action)))
                  (func-name (intern (format "my-matcha-%S" action))))
              `((defvar ,last-func nil)
                (defun ,func-name ()
                  ,(format "Run %S in editor." action)
                  (interactive)
                  (catch 'done
                    (dolist (pkg matcha-project-pkg-list)
                      (if (alist-get 'fallback pkg)
                          (let ((fn (alist-get ',action pkg)))
                            (when fn
                              (call-interactively fn)
                              (throw 'done fn)))
                        (let ((mode (alist-get 'mode pkg))
                              (fn (alist-get ',action pkg)))
                          (when (boundp mode)
                            (when (and ,last-func
                                       (not (eq fn ,last-func)))
                              (apply mode '(1)))
                            (setq ,last-func fn)
                            (when fn
                              (call-interactively fn)
                              (throw 'done fn)))))))))))))

    (matcha-create-project-actions
     file
     recent
     buffer
     rg
     rg-project
     mx
     swiper
     swiper-all
     git-grep)

    (defun my-matcha-save-all-buffers ()
      "Save all buffers without confirming."
      (interactive)
      (save-some-buffers :all-buffers-no-confirm))

    ;; File Related

    (defun matcha-copy-current-filename-to-clipboard ()
      "Copy `buffer-file-name' to system clipboard."
      (interactive)
      (if (not buffer-file-name)
          (message "Not a file...")
        (message (format "Copying %s to clipboard..." buffer-file-name))
        (kill-new buffer-file-name)))

    (defalias 'copy-current-filename-to-clipboard 'matcha-copy-current-filename-to-clipboard)

    (defun matcha-revert-all-file-buffers ()
      "Refresh all open file buffers without confirmation.
    Buffers in modified (not yet saved) state in emacs will not be reverted. They
    will be reverted though if they were modified outside emacs.
    Buffers visiting files which do not exist any more or are no longer readable
    will be killed.

    https://emacs.stackexchange.com/questions/24459/revert-all-open-buffers-and-ignore-errors"
      (interactive)
      (dolist (buf (buffer-list))
        (let ((filename (buffer-file-name buf)))
          ;; Revert only buffers containing files, which are not modified;
          ;; do not try to revert non-file buffers like *Messages*.
          (when (and filename
                     (not (buffer-modified-p buf)))
            (when (file-readable-p filename)
              ;; If the file exists and is readable, revert the buffer.
              (with-current-buffer buf
                (revert-buffer :ignore-auto :noconfirm :preserve-modes))))))
      (message "Finished reverting buffers containing unmodified files."))

    (defalias 'revert-all-file-buffers 'matcha-revert-all-file-buffers)

    (defvar matcha-saved-files-file "~/.emacs.d/saved-files")

    (defun matcha-save-files-to-saved-files-list ()
      "Save list of open files in Emacs to `matcha-saved-files-file'."
      (interactive)
      (let ((text-to-write ""))
        (dolist (buffer (buffer-list))
          (when-let* ((buffer-name (buffer-file-name buffer)))
            (setq text-to-write (concat text-to-write buffer-name "\n"))))
        (unless (string-equal text-to-write "")
          (message (format "Writing to %s..." matcha-saved-files-file))
          (delete-file matcha-saved-files-file)
          (write-region text-to-write nil matcha-saved-files-file))))

    (defalias 'save-files-to-saved-files-list 'matcha-save-files-to-saved-files-list)

    (defun matcha-open-files-from-saved-files-list ()
      "Open saved files stored at `matcha-saved-files-file'."
      (interactive)
      (let ((files (with-temp-buffer
                     (insert-file-contents matcha-saved-files-file)
                     (split-string (buffer-string) "\n" t))))
        (message (format "Reading from %s..." matcha-saved-files-file))
        (mapc (lambda (file)
                (if (file-exists-p file)
                    (ignore-errors
                      (message (format "Finding file %s..." file))
                      (find-file file))
                  (message (format "File %s doesn't exist anymore." file))))
              files)
        (message "Finish opening saved files.")))

    (defalias 'open-files-from-saved-files-list 'matcha-open-files-from-saved-files-list)

    (defun matcha-rename-current-buffer-file ()
      "Renames current buffer and file it is visiting."
      (interactive)
      (let ((name (buffer-name))
            (filename (buffer-file-name)))
        (if (not (and filename (file-exists-p filename)))
            (error "Buffer '%s' is not visiting a file!" name)
          (let ((new-name (read-file-name "New name: " filename)))
            (if (get-buffer new-name)
                (error "A buffer named '%s' already exists!" new-name)
              (rename-file filename new-name 1)
              (rename-buffer new-name)
              (set-visited-file-name new-name)
              (set-buffer-modified-p nil)
              (message "File '%s' successfully renamed to '%s'"
                       name (file-name-nondirectory new-name)))))))

    (defalias 'rename-current-buffer-file 'matcha-rename-current-buffer-file)
    :config
    ;; Setup matcha now that everything is ready
    (matcha-setup))
#+END_SRC

**** TODO Define the transient helper bindings
:PROPERTIES:
:ID:       31d549b6-3664-4f48-a728-95bd3f96b06e
:END:

#+transclude: [[file:keytable_summary.org::Menu bindings]] :only-contents

#+BEGIN_SRC emacs-lisp
  (transient-define-prefix my-matcha-project ()
    "Project / Code"
    [["Entry"
      <<transient-keybindings-gen(table=project-main-menu-keybindings)>>
    ]]
    (interactive)
    (let ((transient-show-popup -.2))
      (transient-setup 'my-matcha-project)))

  (transient-define-prefix my-matcha-space ()
    "Space"
    [
     ["Do"
      ("s" "Search..." my-matcha-search)
      ("S" "Save all Buffers" my-matcha-save-all-buffers)]
     ["Mode"
      ("m" "Mode" matcha-run-mode-command)
      ("d" "Debug" matcha-run-debug-command)
      ("e" "Eval" matcha-run-eval-command)
      ("t" "Test" matcha-run-test-command)
      ("=" "Format" matcha-run-format-command)]]
    [:hide (lambda () t)
           ("/" my-matcha-swiper)
           ("-" split-window-below)
           ("|" split-window-right)
           ("\\" split-window-right)
           (";" my-matcha-mx)
           (":" eval-expression)
           ("'" eval-expression)
           ("<backspace>" d2elete-window)
           ("DEL" delete-window) ;; For terminals.
           ("x" kill-buffer)]
    (interactive)
    (let ((transient-show-popup -.2))
      (transient-setup 'my-matcha-space)))

  (transient-define-prefix my-matcha-profiler ()
    "Profiler"
    [["Profiler"
      ("s" "Start" profiler-start)
      ("r" "Report" profiler-report)
      ("x" "Stop" profiler-stop)]])

  (transient-define-prefix my-matcha-bookmark ()
    "Bookmark"
    [["Bookmark"
      ("b" "Set" bookmark-set)
      ("d" "Delete" bookmark-delete)
      ("j" "Jump" bookmark-jump)
      ("l" "List" bookmark-bmenu-list)
      ("s" "Save" bookmark-save)]])

  (transient-define-prefix my-matcha-system ()
    "System"
    [["System"
      ("b" "Bookmarks..." my-matcha-bookmark)]
     ["Shell"]
     ["Processes"
      ("p" "Profiler..." my-matcha-profiler)
      ("L" "List Processes" list-processes)]])

  (transient-define-prefix my-matcha-search ()
    "Search"
    [["Buffer"
      ("s" "Swiper" my-matcha-swiper)
      ("S" "Swiper Open Buffers" my-matcha-swiper-all)]
     ["Files"
      ("f" "Find File" my-matcha-file)
      ("i" "Git Grep" my-matcha-git-grep)]
     ["Occur"
      ("o" "Occur" occur)
      ("O" "Multi Occur" multi-occur)
      ;; ("P" "Occur in Project" projectile-multi-occur)
      ]
     ["Ripgrep"
      ("r" "Ripgrep in Directory" my-matcha-rg)
      ("R" "Ripgrep in Project" my-matcha-rg-project)]
     ["Other"
      ("a" "Rgrep" rgrep)]])

  (transient-define-prefix my-matcha-files ()
    "Files"
    [["Current File"
      ("y" "Copy Filename to Clipboard" matcha-copy-current-filename-to-clipboard)
      ("r" "Rename Current File" matcha-rename-current-buffer-file)]
     ["All Files"
      ("S" "Save All to SavedFile" matcha-save-files-to-saved-files-list)
      ("O" "Open All from SavedFile" matcha-open-files-from-saved-files-list)
      ("R" "Revert/Refresh All" matcha-revert-all-file-buffers)]])

  (transient-define-prefix my-matcha-flycheck ()
    "Flycheck"
    [["Diagnostics"
      <<transient-keybindings-gen(table=flycheck-diagnosis-menu-bindings)>>
     ]
     ["Backends"
      <<transient-keybindings-gen(table=flycheck-backend-menu-bindings)>>
     ]
     ["Navigate"
      <<transient-keybindings-gen(table=flycheck-navigate-menu-bindings)>>
     ]])
#+END_SRC

** DONE Functional bindings [100%]
CLOSED: [2021-01-05 Tue 10:03]
:PROPERTIES:
:ID:       eb3f7eae-0b4d-4a2a-a791-0478daa7b4c9
:END:
This section defines the functional bindings.
Hydra is used as the provider for these bindings.
For now, we consider the following ones: ~main helpers~, ~version control~ and some ~toggling~

*** DONE Main Helper
CLOSED: [2021-01-05 Tue 09:46]
:PROPERTIES:
:ID:       1fa43ada-2c96-4dd3-b427-51dbfbc63f3f
:END:
The main helper, mapped to *<f1>* contains the global operations which are interesting to access globally:
 - org-mode capturing and sniffing webpage
 - zooming
 - bookmarking and listing the bookmarks
 - Mail management: listing the synchronization process managed by *prodigy* and creating a new may

#+transclude: [[file:keytable_summary.org::Main Entry]] :only-contents

#+begin_src emacs-lisp
  (defun text-scale-reset ()
    "Reset the text scale to its original level (0)."
    (interactive)
    (text-scale-set 0))

  (pretty-hydra-define main-hydra
    (:color teal :hint nil :title "Emacs Entry Point")
    ("Org" (
       <<hydra-keybindings-gen(table=org-main-keybindings)>>
     )

     "Emacs Helper" (
       <<hydra-keybindings-gen(table=emacs-helper-main-keybindings)>>
     )

     "Zooming"(
       <<hydra-keybindings-gen-with-opt(table=zoom-main-keybindings)>>
     )

     "Bookmark" (
       <<hydra-keybindings-gen(table=bookmark-main-keybindings)>>
     )

     "Mail" (
       <<hydra-keybindings-gen(table=mail-main-keybindings)>>
     )

     "Backup" (
       <<hydra-keybindings-gen(table=backup-main-keybindings)>>
     )
    ))

  (global-set-key (kbd "<f1>") 'main-hydra/body)
#+end_src


** DONE Remapped bindings [100%]
CLOSED: [2021-01-05 Tue 10:01]
:PROPERTIES:
:ID:       6b3217eb-42e6-4028-93c6-dc633479a559
:END:
The following bindings are remapped to be homogeneous across the different modes and OS.
It concerns mainly the bindings to comment/uncomment and some macos related issues.

*** DONE Commenting
CLOSED: [2021-01-05 Tue 09:50]
:PROPERTIES:
:ID:       334dd7bd-e1dc-48eb-bb95-963f15108d53
:END:
I prefer to use a _C-c C-c_ to compile and therefore, the bindings to comment a section of the code should be remapped.
I select _C-c C-;_ to comment and _C-c C-:_ to uncomment.
Adding a toggle support for the commenting would be a good idea too

#+transclude: [[file:keytable_summary.org::Commenting]] :only-contents

#+begin_src emacs-lisp
  (use-builtin cc-mode
    :tags '("CORE" "BINDING")
    :bind
    (;; Global
     <<keybindings-gen(table=comment-keybindings)>>

     :map c-mode-base-map
	  <<keybindings-gen(table=comment-keybindings)>>
     :map c++-mode-map
	  <<keybindings-gen(table=comment-keybindings)>>))
#+end_src

** DONE Reminder for bindings
CLOSED: [2021-01-05 Tue 09:49]
:PROPERTIES:
:ID:       037034b4-2d93-4212-8174-5a21606c92ce
:END:
Finally, because of the amount of keys, I sometimes need a reminder of what is what.
To do so, I am using =remind-bindings=.

#+begin_src emacs-lisp
  (use-package remind-bindings
    :tags '("HELPER" "CORE" "BINDING"))
#+end_src

* Provide
:PROPERTIES:
:ID:       6fd20301-cf7c-4844-b725-dc912f537075
:END:
We finish the configuration, let's provide it!

#+begin_src emacs-lisp
  (provide 'init)
#+end_src
