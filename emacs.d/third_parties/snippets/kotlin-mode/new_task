# -*- mode: snippet -*-
# name: new_task
# key: new_task
# --
package ${1:Package}

// Logging
import org.apache.log4j.Logger

// Java IO
import java.io.File
import java.io.Serializable

// Injection
import javax.inject.Inject

// Gradle baseline
import org.gradle.api.*
import org.gradle.api.model.*

// Worker/Task
import org.gradle.api.tasks.*
import org.gradle.workers.*

// Provider/lazy configuration
import org.gradle.api.file.*
import org.gradle.api.provider.*


/**
 *  Task which ${2:Description}
 *
 *  @property objects The object factory to deal with lazy configuration
 *  @property workerExecutor The worker executor used by gradle
 *  @constructor Creates the task
 */
open class ${3:Name}Task @Inject constructor(objects: ObjectFactory, @Internal val workerExecutor: WorkerExecutor): DefaultTask()
{
    /**
     *  Task core function
     */
    @TaskAction
    fun run() {
        val workQueue: WorkQueue = workerExecutor.noIsolation();

        // Submit the execution
        workQueue.submit($3Worker::class) {
        }
    }
}

interface $3WorkerParameters : WorkParameters {
}

/**
 *  Worker which ${2}
 *
 *  @property input_dir The directory containing the files.
 *  @property model_file The model file trained.
 *  @Constructor Creates the worker
 */
class $3Worker @Inject constructor(params: $3WorkerParameters): Runnable {
    private val logger: Logger = Logger.getLogger($3Worker::class.java.name)

    /* to fill */

    /**
     *  Running function
     *
     */
    override fun run() {
        $0
    }
}
