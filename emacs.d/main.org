#+TITLE: Emacs configuration file
#+AUTHOR: SÃ©bastien Le Maguer
#+EMAIL: lemagues@tcd.ie
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  fr
#+OPTIONS:   H:10 num:t toc:t prop:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://seblemaguer.github.io/css/default.css" />
#+PROPERTY: header-args :tangle "~/.emacs.d/init.el"

This is my emacs configuration file. It is under version control and available, among other
configurations, at this repository: https://github.com/seblemaguer/dotfiles

* Server
Now that we are ready to actually configure emacs properly, let's first start the server!

#+begin_src emacs-lisp
  (server-start)
#+end_src

** Shutting down
:PROPERTIES:
:FROM: https://github.com/munen/emacs.d
:END:

Helper to shutdown properly the server

#+begin_src emacs-lisp
(defun server-shutdown ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs))
#+end_src

* Plugin and configuration
** Package management
The first part of the configuration is to prepare the package management. I am using =use-package= as
the central tool to deal with configuration of the packages.

*** Emacs package configuration
In this section, we are configuring the repositories and emacs internal package management. The only
specificity here is that the TLS algorithm is specific for 26.2.1.

#+begin_src emacs-lisp
  (require 'package)

  (when (and (= emacs-major-version 26)
             (= emacs-minor-version 2)
             (= emacs-build-number 1))
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))

  (setq package-enable-at-startup nil
        package-check-signature nil
        package-archives '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
                           ("MELPA"        . "https://melpa.org/packages/")
                           ("ORGMODE"      . "http://orgmode.org/elpa/"))
        package-archive-priorities  '(("ORGMODE"      . 15)
                                      ("MELPA"        . 10)
                                      ("GNU ELPA"     . 5))
        package-check-signature nil)

  (package-initialize)
#+end_src

*** Load use-package
Here, we are initializing =use-package= in the classic way.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
  (setq use-package-verbose t)

  ;; (eval-when-compile
  ;;   (setq use-package-expand-minimally byte-compile-current-file))
#+end_src

*** Straight
=Straight= coupled with =use-package= is a useful combination to deal with packages not on melpa or packages in development.

 #+begin_src emacs-lisp
   (defvar bootstrap-version)
   (let ((bootstrap-file
          (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
         (bootstrap-version 5))
     (unless (file-exists-p bootstrap-file)
       (with-current-buffer
           (url-retrieve-synchronously
            "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
            'silent 'inhibit-cookies)
         (goto-char (point-max))
         (eval-print-last-sexp)))
     (load bootstrap-file nil 'nomessage))

   (unless (string= (getenv "TRAVIS") "true")
     (setq straight-vc-git-default-protocol 'ssh))
 #+end_src

*** Tagging
I am using tags to condition the use of packages based on the computer hostname.

#+begin_src emacs-lisp
  (use-package use-package-tags
    :straight (use-package-tags :type git :host github :repo "seblemaguer/use-package-tags")
    :config
    (setq use-package-tags-enabled
	  `(("lemagues-surface" . ("ALL"))
	    ("stb067" . ("ALL"))
	    ("mackenzie" . ("!MAIL" "!RSS" "!USER" "!GUI" "!MULTIMEDIA" "!CHAT" "!DESKTOP"))
	    (,use-package-tags-default-host . ("CORE" "!USER" "!DESKTOP")))))
#+end_src

*** Hydra
I use hydra a lot so it is easier to add its support directly in the use-package configuration part.

**** Major mode/pretty hydra
#+begin_src emacs-lisp
  (use-package pretty-hydra
    :ensure t
    :tags '("CORE")
    :preface
    (defun with-alltheicon (icon str &optional height v-adjust)
      "Displays an icon from all-the-icon."
      (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

    (defun with-faicon (icon str &optional height v-adjust)
      "Displays an icon from Font Awesome icon."
      (s-concat (all-the-icons-faicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

    (defun with-fileicon (icon str &optional height v-adjust)
      "Displays an icon from the Atom File Icons package."
      (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

    (defun with-octicon (icon str &optional height v-adjust)
      "Displays an icon from the GitHub Octicons."
      (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str)))

  (use-package major-mode-hydra
    :ensure t
    :demand t
    :tags '("CORE")
    :bind
    ("M-SPC" . major-mode-hydra))
#+end_src

**** Using posframe
#+begin_src emacs-lisp
  (use-package hydra-posframe
    :straight (hydra-posframe :type git :host github :repo "Ladicle/hydra-posframe")
    :tags '("CORE")

    :custom
    (hydra-posframe-parameters
     '(
       (left-fringe . 4) (right-fringe . 4)
       (top-fringe . 4) (bottom-fringe . 4)
       (height . 18) (width . 105)
       (min-height . 17) (max-height . 30)
       (top . 25)
       ))

    :custom-face
    (hydra-posframe-border-face ((t (:background "#6272a4"))))
    :hook (after-init . hydra-posframe-enable))
#+end_src

*** General
I introduce general to configure the key management. It is not really used yet, but it will be more and and more.

#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :tags '("CORE"))
#+end_src

*** Paradox to enhance package list management
Finally, I use paradox to enhance the package listing experience.

#+begin_src emacs-lisp
  (use-package paradox
    :ensure t
    :tags '("CORE")
    :commands (paradox-upgrade-packages paradox-list-packages)
    :custom (paradox-automatically-star t)
    :config
    (setq paradox-spinner-type 'progress-bar
          paradox-execute-asynchronously t
          paradox-github-token (my:auth-source-get-passwd :host "api.github.com" :user "seblemaguer^paradox")))
#+end_src

*** COMMENT Auto-update
I was using auto update, but I think I will remove it soon.
#+begin_src emacs-lisp
  (use-package auto-package-update
    :ensure t
    :tags '("CORE")
    :config
    (setq auto-package-update-delete-old-versions t
          auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+end_src

** Configuration helpers
I need to define some helpers to be able to facilitate the configuration. This mainly introduce
tangling and user/password management.

*** Define some important variables
This section focus on defining some variables/helpers needed to have a more global configuration

#+begin_src emacs-lisp
  ;; Define root directory and add the plugins
  (defvar default-plugin-dir (format "%s/plugins" user-emacs-directory)
    "The plugins directory")

  ;; Don't screw up my files with custom
  (setq custom-file (format "%s/custom.el" user-emacs-directory))
  (load custom-file 'noerror)

  ;; Silence!!!!!!
  (setq save-abbrevs 'silently
	ad-redefinition-action 'accept

	;; Garbage collection (see https://github.com/jethrokuan/.emacs.d/blob/master/config.org)
	gc-cons-threshold 100000000
	large-file-warning-threshold 100000000)
#+end_src

*** Dealing with tangling this file
This part is copy/pasted from https://www.reddit.com/r/emacs/comments/6t37yg/org_mode_dot_emacs/

#+begin_src emacs-lisp
  (defun tangle-main-org ()
    "Tangle ~/.emacs.d/main.org to ~/.emacs.d/init.el."
    (interactive)

    ;; Tangle to init.el
    (with-current-buffer (find-file (concat user-emacs-directory "main.org"))
      (org-babel-tangle))
    )

  ;; ;; byte-compile plugins
  ;; (byte-recompile-directory (expand-file-name default-plugin-dir) 0)

  (defun compile-init ()
    "byte compiles ~/.emacs.d/init.el"
    (interactive)
    (when (equal (buffer-name)
		 (concat "main.org"))
      ;; Recompile init file
      (byte-compile-disable-warning  'make-local) ;; FIXME: apparently people says this warning is simply wrong, so ignore it!
      (byte-recompile-file (format "%s/init.el" user-emacs-directory) t 0 nil)
      ))
#+end_src

*** Identification helper
Easy use wrapper around auth-* authentification emacs utils.

#+begin_src emacs-lisp
  (cl-defun my:auth-source-get-user (&rest spec &allow-other-keys)
    "Helper to get the user given the SPEC from authsource."
    (let ((founds (apply 'auth-source-search spec)))
      (when founds
        (plist-get (nth 0 founds) :user))))

  (cl-defun my:auth-source-get-passwd (&rest spec &allow-other-keys)
    "Helper to get the password given the SPEC from authsource."
    (let ((founds (apply 'auth-source-search spec)))
      (when founds
        (funcall (plist-get (nth 0 founds) :secret)))))
#+end_src

*** Load private part
#+begin_src emacs-lisp
  (defvar private-file "~/.emacs.d/private-variables.el"
    "Path to the file which stores my configuration.")

  (when (file-exists-p private-file)
    (load private-file))
#+end_src

** Debug helper
Explain-pause-mode is useful to monitor emacs and "profile" what is going on.
However, sometimes it tends to conflict with other part of my configuration.
Therefore, for now, it is disabled.
#+begin_src emacs-lisp
  (use-package explain-pause-mode
    :ensure straight
    :straight (explain-pause-mode :type git :host github :repo "lastquestion/explain-pause-mode")
    :disabled t
    :init
    (explain-pause-mode t)
    :bind
    (("C-<f1>" . explain-pause-top)))
#+end_src

** Minor-mode activation
I use some minor modes based on some filetypes.
This package is an helper which facilitates these activations.

#+begin_src emacs-lisp
  (use-package auto-minor-mode
    :ensure t
    :tags '("CORE"))
#+end_src

* User interaction
** Notification
Emacs is my entry point for almost everything.
Therefore, it is also useful to have the notifications handled directly in Emacs.
To do so, I rely on the couple sauron/alert.
Alert is the entry point for raising notifications while sauron is used to log the notifications.

This combination allows me to use the modeline as an indicator of the priority of the notification.
By doing so, I can be aware of a notification but choose to ignore it if I am focusing on something else.
If another notification of at most the same priority is raised, it will be logged but there won't be any visible cue.
However, if a notification of an higher priority is raised, the color of the modeline will be updated to reflect the priority of the notification.

*** Sauron
Sauron is the pivot of the notification system.
Due to some priority issues with ERC and some event that I would like to ignore with the notifications coming from the *org-agenda*, I use my own fork for now.

#+begin_src emacs-lisp
  (use-package sauron
    :straight (sauron :type git :host github :repo "djcb/sauron"
                      :fork (:host github
                                   :repo "seblemaguer/sauron"
                                   :branch "functional"))
    :tags '("NOTIFICATION")
    :commands (sauron-start-hidden)

    :config
    (defun sauron-keep-priority (msg props)
      "Function to define which event should keep the same priority
    and not be raised even if it is recent. The criterion is based on
    MSG and PROPS."
      (or
       (string= (plist-get props :sender) "root")
       (string= (plist-get props :event) "join")
       (string= (plist-get props :event) "quit")))

    (setq sauron-separate-frame nil ;; The notification is on the same window ?
          sauron-sticky-frame t
          sauron-max-line-length nil ;; No max. length for the line
          sauron-modules '(sauron-org) ;; reduced the default modules
          sauron-column-alist '(( timestamp  .  20)
                                ( origin     .  20)
                                ( priority   .   4)
                                ( message    . nil))
          sauron-org-exclude-todo-states (list "IN PROCESS" "EXEC_STARTED" "PAUSED" "DELEGATED" "WAITING")
          sauron-insensitivity-handler 'sauron-keep-priority)
  )
#+end_src

*** Sauron/Alert/Modeline integration
By using my plugin `sauron-mode-line`, I link Alert and Sauron.
By this way, all the Alert notifications are automatically transmitted to Sauron.
If a Sauron event is raised, it is transmitted to Alert to adapt the modeline bar.
This plugin is in charge to managing the communication and avoid any cycle.

#+begin_src emacs-lisp
  (use-package sauron-mode-line
    :tags '("NOTIFICATION")
    :custom
    (sauron-event-added-functions 'sauron-mode-line-notifier-from-sauron)

    :commands (sauron-mode-line-start-hidden)
    :hook (after-init . sauron-mode-line-start-hidden)
    :bind
    (("<f7>"   . sauron-mode-line-toggle-hide-show)
     ("C-<f7>" . sauron-mode-line-clear)))
#+end_src

** Global keys
In this section, we define the bindings used globally.
We can consider the following categories:
  - The functional bindings :: which allows the user to access to a functionality from anywhere (e.g. opening the version-control manager)
  - The remapped bindings :: which are homogeneizing or extending existing bindings in multiple modes

An helper to remind these bindings is also provided.

*** Functional bindings
This section defines the functional bindings.
Hydra is used as the provider for these bindings.
For now, we consider the following two ones: *main helpers* and *version control*

**** Main Helper
The main helper, mapped to *<f1>* contains the global operations which are interesting to access globally:
 - org-mode capturing and sniffing webpage
 - zooming
 - bookmarking and listing the bookmarks
 - Mail management: listing the synchronization process managed by *prodigy* and creating a new may

#+begin_src emacs-lisp
  (defun text-scale-reset ()
    "Reset the text scale to its original level (0)."
    (interactive)
    (text-scale-set 0))

  (pretty-hydra-define main-hydra
    (:color teal :hint nil :title "Main")
    ("Org related"
     (("c" counsel-org-capture "Org capture")
      ("g" org-web-tools-read-url-as-org "Get WEB URL"))

     "Help"
     (("f" describe-function "Describe function")
      ("v" describe-variable "Describe variable"))

     "Zooming"
     (("+" text-scale-increase "Zoom in"  :color pink)
      ("-" text-scale-decrease "Zoom out" :color pink)
      ("0" text-scale-reset "Reset zoom"))

     "Bookmark"
     (("b" list-bookmarks "List bookmarks")
      ("B" bookmark-set "Bookmark file"))

     "Mail related"
     (("m" mu4e-compose-new "New mail")
      ("p" prodigy "Open Prodigy"))

     "Backups"
     (("s" snapshot-timeline "List backups")
      ("S" snapshot-timemachine "Backup timemachine"))))

  (global-set-key (kbd "<f1>") 'main-hydra/body)
#+end_src

**** Project/Version control
The following functional binding is the entry point to deal with code project management.
It is mapped to *<f4>*
It deals with:
  - project management using *projectile*
  - version control using *magit*
  - fixme
  - flychecks
  - travis

#+begin_src emacs-lisp
  (pretty-hydra-define project-hydra
    (:color teal :hint nil :title "Project")
    ("Projects"
     (("d"   org-dashboard-display "ORG Dashboard")
      ("p"   projectile-hydra/body "Projectile"))

     "Version Control"
     (("m"   magit-hydra/body "Magit")
      ("t"   show-my-travis-projects "Travis"))

     "Checking/Notes"
     (("f"   fic-view-listing "Fixme listing")
      ("F"   flycheck-hydra/body "Flycheck"))
     ))

  (global-set-key (kbd "<f4>") 'project-hydra/body)
#+end_src

**** Toggling
:PROPERTIES:
:FROM:     https://github.com/jerrypnz/major-mode-hydra.el
:END:
#+begin_src emacs-lisp
  ;; (defvar jp-toggles--title (with-faicon "toggle-on" "Toggles" 1 -0.05))
  (defvar jp-toggles--title "Toggles")

  (pretty-hydra-define jp-toggles
    (:color amaranth :quit-key "q" :title jp-toggles--title)
    ("Basic"
     (("n" linum-mode "line number" :toggle t)
      ("w" whitespace-mode "whitespace" :toggle t)
      ("W" whitespace-cleanup-mode "whitespace cleanup" :toggle t)
      ("r" rainbow-mode "rainbow" :toggle t)
      ("L" page-break-lines-mode "page break lines" :toggle t))

     "Highlight"
     (("s" symbol-overlay-mode "symbol" :toggle t)
      ("l" hl-line-mode "line" :toggle t)
      ("x" highlight-sexp-mode "sexp" :toggle t)
      ("t" hl-todo-mode "todo" :toggle t))

     "Coding"
     (("p" smartparens-mode "smartparens" :toggle t)
      ("P" smartparens-strict-mode "smartparens strict" :toggle t)
      ("S" show-smartparens-mode "show smartparens" :toggle t)
      ("f" flycheck-mode "flycheck" :toggle t))

     "Emacs"
     (("D" toggle-debug-on-error "debug on error" :toggle (default-value 'debug-on-error))
      ("X" toggle-debug-on-quit "debug on quit" :toggle (default-value 'debug-on-quit)))))

  (global-set-key (kbd "<f3>") 'jp-toggles/body)
#+end_src

*** Remapped bindings
The following bindings are remapped to be homogeneous accross the different modes.
It concerns

**** Compilation
#+begin_src emacs-lisp
  (defhydra hydra-next-error (global-map "C-x")
      "
  Compilation errors:
  _j_: next error        _h_: first error    _q_uit
  _k_: previous error    _l_: last error
  "
      ("`" next-error     nil)
      ("j" next-error     nil :bind nil)
      ("k" previous-error nil :bind nil)
      ("h" first-error    nil :bind nil)
      ("l" (condition-case err
               (while t
                 (next-error))
             (user-error nil))
       nil :bind nil)
      ("q" nil            nil :color blue))
#+end_src

**** Commenting
I prefer to use a _C-c C-c_ to compile and therefore, the bindings to comment a section of the code should be remapped.
I select _C-c C-;_ to comment and _C-c C-:_ to uncomment.
Adding a toggle support for the commenting would be a good idea too

#+begin_src emacs-lisp
  (use-package cc-mode
    :bind
    (;; Global
     ("C-c C-;" .  comment-region)
     ("C-c C-:" .  uncomment-region)

     :map c-mode-base-map
          ("C-c C-;" .  comment-region)
          ("C-c C-:" .  uncomment-region)
     :map c++-mode-map
          ("C-c C-;" .  comment-region)
          ("C-c C-:" .  uncomment-region))
  )
#+end_src

**** Buffers

#+begin_src emacs-lisp
  (global-set-key (kbd "M-G") 'what-line)
#+end_src

**** Windows
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c =") 'compare-windows)
#+end_src

**** Files
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-r") 'counsel-recentf)
  (global-set-key (kbd "C-x C-d") 'dired)

  (global-set-key [(control c) ?1] 'find-name-dired)
  (global-set-key [(control c) ?2] 'find-grep-dired)
  (global-set-key [(control c) ?3] 'grep-find)
#+end_src

**** Mac key remapping
#+begin_src emacs-lisp
  (global-set-key (kbd "<end>") 'move-end-of-line)
  (global-set-key (kbd "<home>") 'move-beginning-of-line)
#+end_src

*** Reminder for bindings
#+begin_src emacs-lisp
  (use-package remind-bindings
    :ensure t
    :tags '("HELPER")
    :hook (after-init . remind-bindings-initialise)
    :bind (("<f10>" . 'remind-bindings-togglebuffer)   ;; toggle buffer
           ("C-<f10>" . 'remind-bindings-specific-mode))) ;; buffer-specific only
#+end_src

*** Capturing
**** DOCT
#+begin_src emacs-lisp
  (use-package doct
    :ensure t
    :tags '("ORG")
    :commands (doct))
#+end_src

**** Entry point
Also use https://github.com/karlicoss/grasp to connect with firefox.

#+begin_src emacs-lisp
  (use-package org-capture
    :tags '("ORG" "USER")
    :after org
    :commands (org-capture)
    :config
    (setq org-capture-templates
          (doct
           `(
             ("Book"
              :keys "p"
              :type entry
              :file "~/shared/pCloudDrive/org/todo/todo.org"
              :headline "To read"
              :template-file ,(format "%s/third_parties/org-capture-templates/book.org" user-emacs-directory))

             ("CD"
              :keys "c"
              :type entry
              :file "~/shared/pCloudDrive/org/todo/todo.org"
              :headline "CD"
              :template-file ,(format "%s/third_parties/org-capture-templates/cd.org" user-emacs-directory))

             ("Concert"
              :keys "C"
              :type entry
              :file "~/shared/pCloudDrive/org/todo/todo.org"
              :headline "Concert"
              :template-file ,(format "%s/third_parties/org-capture-templates/concert.org" user-emacs-directory))

             ("Reference"
              :keys "f"
              :type entry
              :file "~/shared/pCloudDrive/org/todo/todo.org"
              :headline "Reference task"
              :template-file ,(format "%s/third_parties/org-capture-templates/reference.org" user-emacs-directory))

             ("Bookmark"
              :keys "L"
              :type entry
              :file "~/shared/pCloudDrive/org/todo/todo.org"
              :olp ("To review" "Bookmarks")
              :template-file ,(format "%s/third_parties/org-capture-templates/bookmark.org" user-emacs-directory))

             ("Mail"
              :keys "m"
              :type entry
              :file "~/shared/pCloudDrive/org/todo/todo.org"
              :headline "Mailing"
              :template-file ,(format "%s/third_parties/org-capture-templates/mail.org" user-emacs-directory))

             ("Meeting"
              :keys "M"
              :type entry
              :file "~/shared/pCloudDrive/org/todo/todo.org"
              :headline "To sort"
              :template-file ,(format "%s/third_parties/org-capture-templates/meeting.org" user-emacs-directory))

             ("RSS"
              :keys "r"
              :type entry
              :file "~/shared/pCloudDrive/org/todo/todo.org"
              :olp ("To review" "RSS")
              :template-file ,(format "%s/third_parties/org-capture-templates/rss.org" user-emacs-directory))

             ("TODO"
              :keys "t"
              :type entry
              :file "~/shared/pCloudDrive/org/todo/todo.org"
              :headline "To sort"
              :template-file ,(format "%s/third_parties/org-capture-templates/default.org" user-emacs-directory)
              :empty-lines-before 1)
             ))))
#+end_src

**** Cooking
#+begin_src emacs-lisp
    (use-package org-chef
      :ensure t
      :tags '("ORG" "USER")
      :after (org-capture)
      :config
      (add-to-list 'org-capture-templates
                   (doct '(
                           ("Cookbook"
                            :keys "o"
                            :type entry
                            :file "~/shared/pCloudDrive/recipes/cookbook.org"
                            :template ("* %^{Description}"
                                       "%(org-chef-get-recipe-from-url)")
                            :empty-lines 1)
                           ))))
#+end_src

**** ORG/Web tools
Org-web-tools is a nice package which allows to sniff a webpage and convert it into org-mode
format. This is really useful to homogeneise documentation.

#+begin_src emacs-lisp
  (use-package org-web-tools
    :ensure t
    :after (org)
    :tags '("CONNECTED"))
#+end_src

** Internal documentation
*** Key bindinds
#+begin_src emacs-lisp
  (use-package helm-descbinds
    :ensure t
    :tags '("DOCUMENTATION")
    :commands (helm-descbinds)
    :bind
    ("C-h b" . helm-descbinds))
#+end_src

*** Help
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :tags '("DOCUMENTATION")
    :commands (helpful-key helpful-symbol helpful-at-point)
    :bind (("C-h k" . helpful-key)
           ("C-h a" . helpful-symbol)
           ("C-h h" . helpful-at-point)))
#+end_src

** Visual
*** Mode line
**** Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :tags '("VISUAL")
    :hook (after-init . doom-modeline-mode)

    :init
    (setq doom-modeline-icon t
          doom-modeline-major-mode-icon t
          doom-modeline-buffer-file-name-style 'truncate-upto-project
          doom-modeline-persp-name t
          doom-modeline-checker-simple-format t

          ;; Whether display environment version or not
          doom-modeline-env-version t

          ;; Or for individual languages
          doom-modeline-env-enable-python t
          doom-modeline-env-enable-ruby t
          doom-modeline-env-enable-perl t
          doom-modeline-env-enable-go t
          doom-modeline-env-enable-elixir t
          doom-modeline-env-enable-rust t

          ;; Change the executables to use for the language version string
          doom-modeline-env-python-executable "python"
          doom-modeline-env-ruby-executable "ruby"
          doom-modeline-env-perl-executable "perl"
          doom-modeline-env-go-executable "go"
          doom-modeline-env-elixir-executable "iex"
          doom-modeline-env-rust-executable "rustc"

          ;; Whether display irc notifications or not. Requires `circe' package.
          doom-modeline-irc t
          doom-modeline-irc-stylize 'identity

          ;; Versioning (github)
          doom-modeline-github t

          ;;
          doom-modeline-checker-simple-format t)

    ;; Activate time
    (defface egoge-display-time
      '((((type x w32 mac))
         ;; #060525 is the background colour of my default face.
         (:foreground "#060525" :inherit bold))
        (((type tty))
         (:foreground "blue")))
      "Face used to display the time in the mode line.")

    ;; This causes the current time in the mode line to be displayed in
    ;; `egoge-display-time-face' to make it stand out visually.
    (setq display-time-string-forms
          '((propertize (concat "[" 24-hours ":" minutes "] ")
                        'face 'egoge-display-time)))

    (display-time)

    ;; Activate battery
    (display-battery-mode)
    )
#+end_src


**** Anzu
#+begin_src emacs-lisp
  (use-package anzu
    :ensure t
    :tags '("VISUAL")
    :config
    (global-anzu-mode +1))
#+end_src

**** Minor mode menu
#+begin_src emacs-lisp
  (use-package minions
    :ensure t
    :tags '("VISUAL")
    :config (minions-mode 1))
#+end_src

*** Global theme
#+begin_src emacs-lisp
  (use-package flatfluc-theme
    :ensure t
    :tags '("VISUAL")
    :config
    (load-theme 'flatfluc t))
#+end_src

*** Frame
**** Title
#+begin_src emacs-lisp
  (defun frame-title-format ()
    "Return frame title with current project name, where applicable."
    (let ((file buffer-file-name))
      (if file
          (if (and (bound-and-true-p projectile-mode)
                   (projectile-project-p))
              (concat
               (format "[%s] " (projectile-project-name))
               (replace-regexp-in-string (format "^%s" (projectile-project-p)) "" (file-truename file)))
            (abbreviate-file-name file))
        "%b")))

  (when (display-graphic-p)
    (setq frame-title-format '((:eval (frame-title-format)))))
#+end_src

**** Remove unused part
#+begin_src emacs-lisp
  (defun disable-frame-bars ()
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1))

  (if (display-graphic-p)
      (disable-frame-bars)
    (add-hook 'before-make-frame-hook 'disable-frame-bars))
#+end_src

*** Buffer
**** Org-mode
***** Faces
#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :tags '("VISUAL")
    :config

    (setq org-todo-keyword-faces
          '(("TODO"          :background "red1"          :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("IN PROCESS"    :background "lightgray"     :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("MEETING"       :foreground "red1"                              :weight bold)

            ;; Specific helpers
            ("REVIEW"        :background "orange"        :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("MAIL"          :background "purple"        :foreground "black" :weight bold :box (:line-width 2 :style released-button))

            ;; I can't really do anything here!
            ("WAITING"       :background "orange"        :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("PAUSED"        :background "orange"        :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("EXEC_STARTED"  :background "light green"   :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("DELEGATED"     :background "gold"          :foreground "black" :weight bold :box (:line-width 2 :style released-button))

            ;; Done but not complete
            ("CANCELLED"     :background "lime green"    :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("POSTPONED"     :background "lime green"    :foreground "black" :weight bold :box (:line-width 2 :style released-button))

            ;; Done and I don't care to be complete
            ("EVENT"         :foreground "purple"                            :weight bold)
            ("NOTE"          :foreground "purple"                            :weight bold)
            ("RELEASE"       :foreground "purple"                            :weight bold)
            ("MANDATORY"     :foreground "red"                               :weight bold)

            ;; Done and complete
            ("DONE"          :background "forest green"  :foreground "lightgray" :weight bold :box (:line-width 2 :style released-button))
            )

            org-priority-faces '((?A . (:foreground "red" :weight bold))
                                 (?B . (:foreground "orange"  :weight bold))
                                 (?C . (:foreground "orange"))
                                 (?D . (:foreground "forest green"))
                                 (?E . (:foreground "forest green")))))
#+end_src

***** Pretty bullets
#+begin_src emacs-lisp
  (use-package org-superstar
    :ensure t
    :hook
    (org-mode . (lambda () (org-superstar-mode 1))))
#+end_src

***** TODO Fancy priority
Disabled as for now it is creating a conflict with emacs 27 daemon
#+begin_src emacs-lisp
  (use-package org-fancy-priorities
    :ensure t
    :disabled t
    :hook
    (org-agenda-mode . org-fancy-priorities-mode)
    (org-mode . org-fancy-priorities-mode)
    :config
    (setq org-fancy-priorities-list
          '((?A . "â") (?B . "â¬") (?C . "â¬") (?D . "â")
            (?1 . "â¡") (?2 . "â®¬") (?3 . "â®®") (?4 . "â")
            (?I . "Important"))))
#+end_src

**** Indentation
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :commands (highlight-indent-guides-mode)
    :hook
    (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'column))
#+end_src

**** Column/line
#+begin_src emacs-lisp
  (use-package fill-column-indicator
    :ensure t
    :tags '("VISUAL")
    :config

    ;; Define a global mode but not sure I am going to use it
    (define-globalized-minor-mode
      global-fci-mode fci-mode
      (lambda ()
        (fci-mode 1))))

  (use-package visual-fill-column
    :tags '("VISUAL")
    :ensure t)

  (use-package hl-line+
    :load-path default-plugin-dir
    :config
    (global-hl-line-mode 1))

  ;; See column-number
  (column-number-mode t)
  (size-indication-mode t)
#+end_src

**** Paging
#+begin_src emacs-lisp
  (use-package page-break-lines
    :ensure t
    :tags '("VISUAL")
    :diminish page-break-lines-mode
    :config
    (global-page-break-lines-mode t))
#+end_src

**** Parenthesis
***** Smart parents
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :tags '("VISUAL")
    :config

    ;; Activate smartparens globally
    (smartparens-global-mode t)
    (show-smartparens-global-mode t)

    ;; Activate smartparens in minibuffer
    (add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-mode)

    ;; Do not pair simple quotes
    (sp-pair "'" nil :actions :rem))
#+end_src

***** Rainbow delimiter
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :tags '("VISUAL")
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src

**** Show current function
#+begin_src emacs-lisp
  (which-function-mode 1)
#+end_src

**** Diff
#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :tags '("VISUAL")

    :hook ((after-init . global-diff-hl-mode)
           (dired-mode . diff-hl-dired-mode))

    :init (setq diff-hl-draw-borders t)
    :config

    ;; Highlight on-the-fly
    (diff-hl-flydiff-mode 1)

    ;; Set fringe style
    (fringe-mode 20)
    (setq-default fringes-outside-margins t)

    ;; Integration with magit
    (with-eval-after-load 'magit
      (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh)))

  (use-package abridge-diff
    :ensure t
    :after magit ;; optional, if you'd like to use with magit
    :tags '("VISUAL")
    :init (abridge-diff-mode 1))
#+end_src

**** Faces/Colors
***** Rainbow
#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure t
  :commands (rainbow-mode))
#+end_src

***** Dired (using dired-rainbow)
#+begin_src emacs-lisp
  (use-package dired-rainbow
    :ensure t
    :tags '("VISUAL")
    :init
    (eval-after-load 'dired '(require 'dired-rainbow))

    :config

    (defconst dired-audio-files-extensions
      '("mp3" "MP3" "ogg" "OGG" "flac" "FLAC" "wav" "WAV")
      "Dired Audio files extensions")
    (dired-rainbow-define audio "#329EE8" dired-audio-files-extensions)

    (defconst dired-video-files-extensions
      '("vob" "VOB" "mkv" "MKV" "mpe" "mpg" "MPG" "mp4" "MP4" "ts" "TS" "m2ts"
        "M2TS" "avi" "AVI" "mov" "MOV" "wmv" "asf" "m2v" "m4v" "mpeg" "MPEG" "tp")
      "Dired Video files extensions")
    (dired-rainbow-define video "#455AFC" dired-video-files-extensions)

    (dired-rainbow-define html "#4e9a06" ("htm" "html" "xhtml"))
    (dired-rainbow-define xml "DarkGreen" ("xml" "xsd" "xsl" "xslt" "wsdl"))

    (dired-rainbow-define document "#ce5c00" ("doc" "docx" "odt" "pdb" "pdf" "ps" "rtf" "djvu"))
    (dired-rainbow-define image "#ff4b4b" ("jpg" "png" "jpeg" "gif"))

    (dired-rainbow-define sourcefile "#3F82FD" ("el" "groovy" "gradle" "py" "c" "cc" "h" "java" "pl" "rb"))

    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#ad7fa8" ("zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#e6a8df" ("deb" "rpm"))
    (dired-rainbow-define encrypted "LightBlue" ("gpg" "pgp"))

    (dired-rainbow-define-chmod executable-unix "Green" "-.*x.*")

    (dired-rainbow-define log (:inherit default :italic t) ".*\\.log")
    )
#+end_src

***** Prism
#+begin_src emacs-lisp
  (use-package prism
    :straight (prism :type git :host github :repo "alphapapa/prism.el")
    :config
    (defun load-prism (frame)
      (with-selected-frame frame
        (remove-hook 'after-make-frame-functions 'load-prism)
        (prism-set-colors :num 16
          :desaturations (cl-loop for i from 0 below 16
                                  collect (* i 2.5))
          :lightens (cl-loop for i from 0 below 16
                             collect (* i 2.5))
          :colors (list "#C0392B" "#3498DB" "#16A085")

          :comments-fn
          (lambda (color)
            (prism-blend color
                         (face-attribute 'font-lock-comment-face :foreground) 0.25))

          :strings-fn
          (lambda (color)
            (prism-blend color "white" 0.5)))))


    (if (daemonp)
        (add-hook 'after-make-frame-functions 'load-prism)
      (load-prism (car (frame-list)))))
#+end_src

**** Scrolling
#+begin_src emacs-lisp
  (use-package scrollkeeper
    :straight (scrollkeeper :type git :host github :repo "alphapapa/scrollkeeper.el")
    :tags '("VISUAL")
    :general ([remap scroll-up-command] #'scrollkeeper-contents-up
              [remap scroll-down-command] #'scrollkeeper-contents-down))
#+end_src

**** Emoji
#+begin_src emacs-lisp
  (use-package emojify
    :ensure t
    :tags '("VISUAL")
    :functions (emojify-set-emoji-data)
    :hook (erc-mode . emojify-mode)
    :config

    (setq emojify-user-emojis
          '(("(heart)" . (("name" . "Heart")
                          ("image" . "~/.emacs.d/emojis/emojione-v2.2.6-22/2665.png")
                          ("style" . "github")))))

    ;; If emojify is already loaded refresh emoji data
    (when (featurep 'emojify)
      (emojify-set-emoji-data)))

  (use-package company-emoji
    :ensure t
    :tags '("VISUAL"))

  (use-package flycheck-status-emoji
    :ensure t
    :after (flycheck)
    :tags '("VISUAL"))
#+end_src

*** Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :tags '("VISUAL"))

  (use-package all-the-icons-dired
    :ensure t
    :tags '("VISUAL"))

  (use-package all-the-icons-ivy
    :ensure t
    :tags '("VISUAL"))
#+end_src

*** Fonts
#+begin_src emacs-lisp
  (defun set-icon-fonts (CODE-FONT-ALIST)
    "Utility to associate many unicode points with specified fonts."
    (--each CODE-FONT-ALIST
      (-let (((font . codes) it))
        (--each codes
          (set-fontset-font t `(,it . ,it) font)))))

  (defun load-default-fonts ()
    (set-fontset-font "fontset-default" 'unicode "Dejavu Sans Mono")

    ;; The icons you see are not the correct icons until this is evaluated!
    (set-icon-fonts
     '(("fontawesome"
        ;; ï¼   ï     ï     ï      ï     ï
        #xf07c #xf0c9 #xf0c4 #xf0cb #xf017 #xf101)

       ("all-the-icons"
        ;; î¤   î¤¨
        #xe907 #xe928)

       ("github-octicons"
        ;; ï   ï     ï¶     ïµ     ï     ï
        #xf091 #xf059 #xf076 #xf075 #xf016 #xf00a)

       ("Symbola"
        ;; ð    â¨      â      â»    â¼     â      ð       ð½
        #x1d54a #x2a02 #x2205 #x27fb #x27fc #x2299 #x1d54b #x1d53d
        ;; ð¹    ð       ð
        #x1d539 #x1d507 #x1d517))))

  (defun load-fonts (frame)
    (select-frame frame)
    (load-default-fonts))

  (when (fboundp 'set-fontset-font)
    (if (daemonp)
        (add-hook 'after-make-frame-functions #'load-fonts)
      (load-default-fonts)))
#+end_src

** Dark room
Sometimes I just want to ignore everything except the current document. Darkroom is exactly designed for that

#+begin_src emacs-lisp
  (use-package darkroom
    :ensure t
    :tags '("PRODUCTION"))
#+end_src

** Buffer listing
#+begin_src emacs-lisp
  (use-package bufler
    :ensure t
    :tags '("BUFFER")
    :bind (("C-x C-b" . bufler)
           ("C-x b"   . bufler-switch-buffer))

    :custom
    (bufler-reverse nil)
    (bufler-face-prefix "prism-level-")
    (bufler-vc-state t)
    (bufler-list-group-separators '((0 . "\n")))
    (bufler-initial-face-depth 1)
    (bufler-groups (bufler-defgroups
                     (group (group-or "Help/Info"
                                      (mode-match "*Help*" (rx bos "help-"))
                                      (mode-match "*Info*" (rx bos "info-"))
                                      (mode-match "*Apropos*" (rx bos "apropos-"))))

                     (group (group-or "Mail"
                                      (mode-match "*Mu4e*" (rx bos "mu4e-"))))

                     (group (group-or "Chatty"
                                      (mode-match "ERC" (rx bos "erc-"))
                                      (name-match "*Slack*" (rx bos "*Slack"))
                                      (mode-match "Matrix" (rx bos "matrix-client-")))

                            (group (mode-match "ERC" (rx bos "erc-"))
                                   (group (name-match "Channels" (rx bos (or "#" "&"))))
                                   (group (name-match "Servers" ".*:[0-9]\\{4\\}"))
                                   ;; (auto-erc)
                                   )

                            (group (name-match "Slack" (rx bos "*Slack"))
                                   (group (group-not "Message" (name-match "Logging" "\\*Slack[^-]*Log -")))
                                   (group (name-match "Logging" "\\*Slack[^-]*Log -")))

                            (group (mode-match "Matrix" (rx bos "matrix-client-"))))

                     (group (mode-match "EMMS" (rx bos "emms-")))

                     (group (group-or "RSS"
                                      (mode-match "*Elfeed*" (rx bos "elfeed-"))
                                      (name-match "*Elfeed*" (rx bos "*elfeed"))
                                      (name-match "rss.org" (rx bos "rss.org"))))

                     (group (group-or "Todo"
                                      (name-match "Todo" (rx bos "todo.org"))))

                     ;; Subgroup collecting all special buffers (i.e. ones that are not
                     ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
                     ;; through to other groups, so they end up grouped with their project buffers).
                     (group (group-and "*Special*"
                                       (lambda (buffer)
                                         (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                                              buffer)
                                                     (funcall (mode-match "Dired" (rx bos "dired"))
                                                              buffer)
                                                     (funcall (auto-file) buffer))
                                           "*Special*")))

                            ;; Subgroup collecting these "special special" buffers separately for convenience.
                            (group (name-match "**Special**"
                                               (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))

                            ;; For my- calendars
                            (group (name-match "*Calendar*" "^[*]?[Cc]alendar.*$"))

                            ;; Package management
                            (group (name-match "*Packages*" (rx bos (or "*Paradox" "*Packages*"))))

                            ;; Processes in background
                            (group (name-match "*Prodigy*" (rx bos "*prodigy-")))

                            ;; Subgroup collecting all other Magit buffers, grouped by directory.
                            (group (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
                                   (auto-directory))

                            ;; Subgroup for Helm buffers.
                            (mode-match "*Helm*" (rx bos "helm-"))

                            ;; Remaining special buffers are grouped automatically by mode.
                            (auto-mode))


                     (group (group-and "*Projectile*"
                                       (lambda (buffer)
                                         (unless (funcall (lambda (buf)
                                                            (with-current-buffer buf
                                                              (string= (projectile-project-name) "-"))) buffer)
                                           "*Projectile*")))

                            ;; Subgroup collecting buffers in a projectile project.
                            (auto-projectile)
                            (auto-mode))

                     ;; Subgroup collecting buffers in a projectile project.
                     (group
                      (auto-tramp)
                     (auto-mode))

                     ;; Subgroup collecting buffers in a version-control project,
                     ;; grouping them by directory.
                     (auto-mode)
                     (auto-directory))))

#+end_src

** Minibuffer
Minibuffer configuration part. Nothing really outstanding, just the classical stuff.

#+begin_src emacs-lisp
  (use-package minibuffer
    :tags '("CORE")
    ;; :hook
    ;; (eval-expression-minibuffer-setup .  #'eldoc-mode)
    :config
    (setq read-file-name-completion-ignore-case t
          completion-ignore-case t
          resize-mini-windows t)

    (file-name-shadow-mode 1))
#+end_src

*** Maple minibuffer
#+begin_src emacs-lisp
  (use-package maple-minibuffer
    :straight (maple-minibuffer :type git :host github :repo "honmaple/emacs-maple-minibuffer")
    :disabled t
    :tags '("CORE")
    :hook
    (after-init . maple-minibuffer-mode)

    :custom
    (maple-minibuffer:position-type 'frame-center)
    (maple-minibuffer:width 0.7)
    (maple-minibuffer:action '(read-from-minibuffer read-string))
    (maple-minibuffer:ignore-action '(evil-ex eval-expression org-schedule))
    (maple-minibuffer:ignore-regexp '("^helm-"))

    :config
    ;; more custom parameters for frame
    (defun maple-minibuffer:parameters ()
      "Maple minibuffer parameters."
      `((height . ,(or maple-minibuffer:height 10))
        (width . ,(or maple-minibuffer:width (window-pixel-width)))
        (left-fringe . 5)
        (right-fringe . 5))))

#+end_src
** EAF
#+begin_src emacs-lisp
  (use-package eaf
    :tags '("HELPER")
    :load-path "~/environment/src/20-tools/emacs/emacs-application-framework/emacs-application-framework")
#+end_src
** Interface with Firefox (GhostText)
https://github.com/GhostText/GhostText
#+begin_src emacs-lisp
  (use-package atomic-chrome
    :ensure t
    :hook
    (after-init . atomic-chrome-start-server)

    :commands
    (atomic-chrome-start-server)

    :init
    (setq atomic-chrome-server-ghost-text-port 4666
          atomic-chrome-default-major-mode 'org-mode)

    :bind
    (("s-c C-c" . atomic-chrome-close-current-buffer)
     :map  atomic-chrome-edit-mode-map
     ("C-c C-c" . nil)))
#+end_src
* Editor
** Global emacs edition configuration
#+begin_src emacs-lisp
  ;; Delete trailing-whitespace
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Unify the buffer name style
  (eval-after-load "uniquify"
    '(progn
       (setq uniquify-buffer-name-style 'forward)))

  ;; Redefine fill-column as my screen is not 80 chars :D
  (setq-default fill-column 100)

  ;; Startup
  (setq inhibit-startup-message t
        find-file-suppress-same-file-warnings t)

  ;; Copy / paste
  (setq mouse-drag-copy-region nil
        select-enable-primary nil
        select-enable-clipboard t
        select-active-regions t)
#+end_src

** Goto / scroll
#+begin_src emacs-lisp
  (use-package fast-scroll
    :ensure t
    :hook
    (fast-scroll-start      . (lambda () (flycheck-mode -1)))
    (fast-scroll-end        . (lambda () (flycheck-mode 1)))

    :config
    (fast-scroll-config)
    (fast-scroll-mode 1))

  (use-package goto-line-preview
    :ensure t
    :commands (goto-line-preview)
    :bind
    (("M-g" . goto-line-preview)))

  (use-package goto-last-point
    :ensure t
    :functions (goto-last-point-mode)
    :bind ("C-<" . goto-last-point)
    :config (goto-last-point-mode))
#+end_src

** Encoding
Define the global encoding as utf-8 english US related. Of course, it is possible de locally change
this information per buffer.

#+begin_src emacs-lisp
  (setq system-time-locale "en_US.utf8")
  (prefer-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
#+end_src

** Searching / Replacing
*** Searching
Double-saber is really helpful to reduce the result of a search after the search itself.

#+begin_src emacs-lisp
  (use-package double-saber
    :ensure t
    :config
    (with-eval-after-load "ripgrep"
      (add-hook 'ripgrep-search-mode-hook
                (lambda ()
                  (double-saber-mode)
                  (setq-local double-saber-start-line 5)
                  (setq-local double-saber-end-text "Ripgrep finished"))))

    (with-eval-after-load "grep"
      (add-hook 'grep-mode-hook
                (lambda ()
                  (double-saber-mode)
                  (setq-local double-saber-start-line 5)
                  (setq-local double-saber-end-text "Grep finished"))))

    (with-eval-after-load "ggtags"
      (add-hook 'ggtags-global-mode-hook
                (lambda ()
                  (double-saber-mode)
                  (setq-local double-saber-start-line 5)
                  (setq-local double-saber-end-text "Global found")))))

  (with-eval-after-load "ivy"
    (add-hook 'ivy-occur-grep-mode-hook
              (lambda ()
                (double-saber-mode)
                (setq-local double-saber-start-line 5))))
#+end_src
*** Replacing
#+begin_src emacs-lisp
  (use-package comby
    :ensure t
    :commands (comby))
#+end_src

** Diff at point
#+begin_src emacs-lisp
  (use-package diff-at-point
    :ensure t
    :bind
    ("<C-M-return>" . diff-at-point-toggle)
    :tags '("HELPER")
    :config
    (defun diff-at-point-toggle ()
      (interactive)
      (cond
       ((string= major-mode "diff-mode")
        (diff-at-point-goto-source-and-close))
       (t
        (diff-at-point-open-and-goto-hunk)))))
#+end_src

** Helpers
#+begin_src emacs-lisp
(defun align-to-equals (begin end)
  "Align region to equal signs"
   (interactive "r")
   (align-regexp begin end "\\(\\s-*\\)=" 1 1 ))
#+end_src

* Process management
I want to have some services and processes managed directly in emacs. This services/processes are
closely related to my emacs use and there have to be shutdown when emacs is stopping.

** Services
The main use case (actually the only for now) is the imap notification system. To do so I use the
couple prodigy (to start the process in emacs) and imapnotify to actually activate the push
service. Internally, imapnotify is going to call emacsclient to notify the user about a new mail.

#+begin_src emacs-lisp
  (use-package prodigy
    :ensure t
    :demand t
    :tags '("REQUIRES_CONNECTION" "MAIL")
    :hook
    (kill-emacs . prodigy-force-stop-all-service)

    :config
    ;; Define services
    (when (fboundp 'define-mail-services)
      (define-mail-services))

    (defun prodigy-force-stop-all-service ()
      "Helper to force kill all service"
      (dolist (service prodigy-services)
	(prodigy-stop-service service t))))

  (use-package elcontext
    :ensure t
    :config

    (defun elcontext-start-prodigy (name)
      "Helper to start properly the prodigy service NAME via elcontext."
      (prodigy-start-service
	  (prodigy-find-service name)))

    (when (fboundp 'list-mail-services)
      (dolist (name (list-mail-services))
	(setq elcontext--context-id name
	      elcontext--context-current (ht (:name name)
					     (:time (ht))
					     (:action `(elcontext-start-prodigy ,name))
					     (:location (ht))
					     (:directory (expand-file-name "~"))))
	(elcontext-add-context elcontext--context-id elcontext--context-current)))

    ;; Reinit everything
    (setq elcontext--context-id nil
	  elcontext--context-current (ht (:name nil)
					 (:time (ht))
					 (:action nil)
					 (:location (ht))))
    (elcontext-global-mode))
#+end_src

** Background process configuration
Starting process in background is really nice to avoid being spammed. So let's make it available

#+begin_src emacs-lisp
  (use-package bpr
    :ensure t
    :tags '("PROCESS")
    :config

    (defun encode-cd ()
      "Encode CD using abcde."
      (interactive)
      (bpr-spawn "abcde -1"))

    (defun my-bpr-on-start (process)
      "Routine to allow colors in comint buffer."
      (set-process-filter process 'comint-output-filter))

    (setq bpr-scroll-direction 1
          bpr-show-progress nil
          bpr-colorize-output t
          bpr-close-after-success t
          bpr-use-projectile t
          bpr-process-mode #'comint-mode
          bpr-window-creator #'split-window-vertically
          bpr-on-start 'my-bpr-on-start))
#+end_src

** Paging support for comint
In order to monitor each process started via comint, I use bifocal which splits the window accordingly.

#+begin_src emacs-lisp
  (use-package bifocal
    :ensure t
    :tags '("CORE")
    :disabled t
    :hook
    (inferior-python-mode . #'bifocal-mode)

    :config
    (bifocal-global-mode 1))
#+end_src

* Loading / saving
** Recent files
Opening recent files is always an easy and fast shortcut. Some files should be ignored though. That
leads to this configuration

#+begin_src emacs-lisp
  (use-package recentf
    :tags '("CORE")
    :init
    (recentf-mode 1)

    :config
    (setq recentf-max-menu-items 100)     ;; Increase limit

    ;; Emacs
    (add-to-list 'recentf-exclude (format "%s/.orhc-bibtex-cache" (getenv "HOME")))
    (add-to-list 'recentf-exclude (format "%s/configuration/emacs\\.d/\\(?!\\(main.*\\)\\)" (getenv "HOME")))
    (add-to-list 'recentf-exclude (format "%s/\\.emacs\\.d/.*" (getenv "HOME")))

    ;; Some caches
    (add-to-list 'recentf-exclude (format "%s/\\.ido\\.last" (getenv "HOME")))
    (add-to-list 'recentf-exclude (format "%s/\\.recentf" (getenv "HOME")))

    ;; elfeed
    (add-to-list 'recentf-exclude (format "%s/\\.elfeed/.*" (getenv "HOME")))
    (add-to-list 'recentf-exclude (format "%s/shared/pCloudDrive/emacs/elfeed/.*" (getenv "HOME")))

    ;; Org-mode organisation
    (add-to-list 'recentf-exclude (format "%s/shared/pCloudDrive/org/organisation/.*" (getenv "HOME")))

    ;; Org/todo/calendars
    (add-to-list 'recentf-exclude ".*todo.org")
    (add-to-list 'recentf-exclude (format "%s/Calendars/.*" (getenv "HOME")))

    ;; Maildir
    (add-to-list 'recentf-exclude (format "%s/maildir.*" (getenv "HOME"))))
#+end_src

** Backup files
This section is dedicated to deal with backups. The main logic is to exlude some specific files
(either because of they are sensitive, either because they are just results of a process). For the
other ones, I want to have an easy way to navigate in it.

*** Global backup configuration
This the global backup configuration. For that I adapted a little bit the wonderful
snapshot-timemachine package.

#+begin_src emacs-lisp
    (use-package snapshot-timemachine
      :ensure t
      :tags '("CORE")
      :init


      (defun my-make-backup-file-name (FILE)
        (let* ((dirname backup-directory)
               (backup-filename (concat dirname (file-truename FILE))))
          (unless (file-exists-p (file-name-directory  backup-filename))
            (make-directory (file-name-directory backup-filename) t))
          backup-filename))

      ;; Redefine find-backup-filename to avoid the "!" replacement
      (defun find-backup-file-name (fn)
        "Find a file name for a backup file FN, and suggestions for deletions.
      Value is a list whose car is the name for the backup file
      and whose cdr is a list of old versions to consider deleting now.
      If the value is nil, don't make a backup.
      Uses `backup-directory-alist' in the same way as
      `make-backup-file-name--default-function' does."
        (let ((handler (find-file-name-handler fn 'find-backup-file-name)))
          ;; Run a handler for this function so that ange-ftp can refuse to do it.
          (if handler
              (funcall handler 'find-backup-file-name fn)
            (if (or (eq version-control 'never)
                    ;; We don't support numbered backups on plain MS-DOS
                    ;; when long file names are unavailable.
                    (and (eq system-type 'ms-dos)
                         (not (msdos-long-file-names))))
                (list (make-backup-file-name fn))
              (let* ((basic-name (make-backup-file-name fn))
                     (base-versions (concat (file-name-nondirectory basic-name)
                                            ".~"))
                     (backup-extract-version-start (length base-versions))
                     (high-water-mark 0)
                     (number-to-delete 0)
                     possibilities deserve-versions-p versions)
                (condition-case ()
                    (setq possibilities (file-name-all-completions
                                         base-versions
                                         (file-name-directory basic-name))
                          versions (sort (mapcar #'backup-extract-version
                                                 possibilities)
                                         #'<)
                          high-water-mark (apply 'max 0 versions)
                          deserve-versions-p (or version-control
                                                 (> high-water-mark 0))
                          number-to-delete (- (length versions)
                                              kept-old-versions
                                              kept-new-versions
                                              -1))
                  (file-error (setq possibilities nil)))
                (if (not deserve-versions-p)
                    (list (make-backup-file-name fn))
                  (cons (format "%s.~%d~" basic-name (1+ high-water-mark))
                        (if (and (> number-to-delete 0)
                                 ;; Delete nothing if there is overflow
                                 ;; in the number of versions to keep.
                                 (>= (+ kept-new-versions kept-old-versions -1) 0))
                            (mapcar (lambda (n)
                                      (format "%s.~%d~" basic-name n))
                                    (let ((v (nthcdr kept-old-versions versions)))
                                      (rplacd (nthcdr (1- number-to-delete) v) ())
                                      v))))))))))

      ;; Default Backup directory
      (defvar backup-directory "~/.emacs.d/backups/")
      (setq backup-directory-alist `((".*" . ,backup-directory)))
      (when (not (file-exists-p backup-directory))
        (make-directory backup-directory t))
      (setq make-backup-file-name-function #'my-make-backup-file-name)
      ;; Auto-save
      (defvar auto-save-directory "~/.emacs.d/auto-save/")
      (setq auto-save-file-name-transforms `((".*" ,auto-save-directory t)))
      (when (not (file-exists-p auto-save-directory))
        (make-directory auto-save-directory t))

      ;; Tramp backup
      (defvar tramp-backup-directory "~/.emacs.d/tramp-backups/")
      (setq tramp-backup-directory-alist `((".*" . ,tramp-backup-directory)))

      (when (not (file-exists-p tramp-backup-directory))
        (make-directory tramp-backup-directory t))

      (setq make-backup-files t               ; backup of a file the first time it is saved.
            backup-by-copying t               ; don't clobber symlinks
            version-control t                 ; version numbers for backup files
            delete-old-versions t             ; delete excess backup files silently
            delete-by-moving-to-trash t
            kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
            kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
            auto-save-default t               ; auto-save every buffer that visits a file
            auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
            auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
            )

      :config

      (defun snapshot-timemachine-backup-finder (file)
        "Find snapshots of FILE in rsnapshot backups."
        (let* ((file (expand-file-name file))
               (file-dir (file-name-directory file))
               (file-base (file-name-nondirectory file))
               (backup-files (directory-files (concat backup-directory file-dir) t
                                              (format "%s.*" file-base))))
          (seq-map-indexed (lambda (backup-file index)
                             (make-snapshot :id index
                                            :name (format "%d" index)
                                            :file backup-file
                                            :date (nth 5 (file-attributes backup-file))))
                           backup-files)))

      (setq snapshot-timemachine-snapshot-finder #'snapshot-timemachine-backup-finder))
#+end_src

*** Sensitive mode
There are some files which are not desired to be backed up. This part goal is to setup this
"avoiding saving" spÃ©cificities.

#+begin_src emacs-lisp
  (define-minor-mode sensitive-mode
    "For sensitive files like password lists.
  It disables backup creation and auto saving.

  With no argument, this command toggles the mode.
  Non-null prefix argument turns on the mode.
  Null prefix argument turns off the mode."
    ;; The initial value.
    nil
    ;; The indicator for the mode line.
    " Sensitive"
    ;; The minor mode bindings.
    nil
    (if (symbol-value sensitive-mode)
        (progn
          ;; disable backups
          (set (make-local-variable 'backup-inhibited) t)
          ;; disable auto-save
          (if auto-save-default
              (auto-save-mode -1)))
                                          ;resort to default value of backup-inhibited
      (kill-local-variable 'backup-inhibited)
                                          ;resort to default auto save setting
      (if auto-save-default
          (auto-save-mode 1))))

  (add-to-list 'auto-minor-mode-alist '("\\.git/.*\\'" . sensitive-mode))
  (add-to-list 'auto-minor-mode-alist '("emacs\\.d/.*\\'" . sensitive-mode))
  (add-to-list 'auto-minor-mode-alist '("emacs\\.d/emms/.*\\'" . sensitive-mode))
  (add-to-list 'auto-minor-mode-alist '("Calendars/.*.org\\'" . sensitive-mode))
  (add-to-list 'auto-minor-mode-alist '("\\.gpg\\'" . sensitive-mode))
#+end_src

** Large files
Some buffer specificities configuration like how to deal with trailing whitespaces or the
fill-column for example.

#+begin_src emacs-lisp
  ;; Open Large file
  (use-package vlf
    :ensure t
    :tags '("CORE")
    :hook (before-s)
    :config
    (require 'vlf-setup))
#+end_src

** Reload file at saved position
:PROPERTIES:
:FROM:     https://github.com/munen/emacs.d
:END:
Remember the cursor position of files when reopening them

#+begin_src emacs-lisp
  (use-package saveplace
    :ensure t
    :tags '("CORE")
    :init
    (setq save-place-file "~/.emacs.d/saveplace")
    :config
    (save-place-mode 1))
#+end_src

* File manager
** Dired
*** Run associated application - define helpers
First, globally association achieve thanks to *xdg-open*.  Also, by making some minor adaptations, I
defined some helpers to play video/audio using emms directly. It is mainly adapted from here:
https://github.com/kuanyui/.emacs.d/blob/master/rc/rc-emms.el
#+begin_src emacs-lisp
  (defun dired-open-native ()
    "Open marked files (or the file the cursor is on) from dired."
    (interactive)
    (let* ((files (dired-get-marked-files t current-prefix-arg))
           (n (length files)))
      (when (or (<= n 3)
                (y-or-n-p (format "Open %d files?" n)))
        (dolist (file files)
          (call-process "xdg-open" nil 0 nil file)))))

                                          ; The use of "gnome-open" here should probably be parameterized.
  (defun dired-open-current-directory-in-GUI-file-manager ()
    "Open the current directory in native GUI file namanger
  For those times when dired just wont do.
  "
    (interactive)
    (save-window-excursion
      (dired-do-async-shell-command
       "xdg-open .")))

  (defun emms-clear-playlist-if-any ()
    "Clear emms playlist (coming from: https://www.emacswiki.org/emacs/SimpleEmmsUserInterface )."
    (when emms-playlist-buffer
      (with-current-buffer emms-playlist-buffer)
        (emms-playlist-clear)))

  (defun file-audio-or-video-p (file-path)
    "Detect if the FILE-PATH is pointing to a video/audio file or not."
    (let* ((safe-path (replace-regexp-in-string "\"" "\\\"" (expand-file-name file-path)))
           (mime (shell-command-to-string (format "file --mime --brief \"%s\"" safe-path)))
           (type (car (split-string mime "/"))))
      (if (member type '(video audio))
          type
        nil)))

  ;; Disable video output to prevent a stupid new window.
  (defun dired-emms-play ()
    "Play current file from the dired buffer using emms"
    (interactive)
    (let ((file-path (dired-get-filename)))
      (if (or (member (file-name-extension file-path)
                      '("ogg" "mp3" "wav" "mpg" "mpeg" "wmv" "wma" "3gpp"
                        "mov" "avi" "divx" "ogm" "ogv" "asf" "mkv"
                        "rm" "rmvb" "mp4" "flac" "vrob" "m4a" "ape"
                        "flv" "webm"))
              (file-audio-or-video-p file-path))

          (progn
            (emms-play-dired)
            (emms-clear-playlist-if-any))))

    (dired-next-line 1))
#+end_src

*** Main configuration
Hydra mapping for dired taken from https://github.com/abo-abo/hydra/wiki/Dired and adapted.
#+begin_src emacs-lisp
  (use-package dired
    :tags '("FILE_MANAGEMENT")
    :functions
    (diredp-hide-subdir-nomove
     diredp-ediff
     dired-ediff-files
     diredp-compress-this-file)

    :mode-hydra
    (dired-mode
     (:color red)
     ("Basic"
      (("+" dired-create-directory "Create directory")
       ("C" dired-do-copy "Copy")
       ("D" dired-do-delete "Delete")
       ("R" dired-do-rename "Rename/Move")
       ("r" dired-do-rsync "Rsync")
       ("v" dired-view-file "View the file")
       ("O" dired-display-file "Display the file")
       ("S" dired-do-symlink "Symbolic link"))

      "Search"
      (("A" dired-do-find-regexp "Find")
       ("Q" dired-do-find-regexp-and-replace "Find and replace")
       ("F" dired-do-find-marked-files "Find and mark")
       ("o" dired-find-file-other-window "Find in an other window"))

      "Permissions"
      (("G" dired-do-chgrp "Change group")
       ("M" dired-do-chmod "Change permissions"))

      "Marking"
      (("m" dired-mark "Mark")
       ("t" dired-toggle-marks "Toggle mark")
       ("u" dired-unmark "Unmark")
       ("U" dired-unmark-all-marks "Unmark all"))

      "Diff"
      (("=" diredp-ediff "Ediff")
       ("e" dired-ediff-files "Ediff files"))

      "Display"
      (("(" dired-hide-details-mode "Show details" :toggle t)
       (")" dired-git-info-mode "Git info" :toggle t)
       ("s" dired-sort-toggle-or-edit "Sort")
       ("$" diredp-hide-subdir-nomove "Hide subdir")
       ("g" revert-buffer "Redisplay"))))

    :bind
    (:map dired-mode-map
          ("C-o" . dired-omit-mode)
          ("<C-return>" . dired-open-native)
          ("e" . dired-open-externally)
          ("p" . dired-emms-play)
          ("E" . ora-ediff-files))

    :init
    (defun ora-ediff-files ()
      (interactive)
      (let ((files (dired-get-marked-files))
            (wnd (current-window-configuration)))
        (if (<= (length files) 2)
            (let ((file1 (car files))
                  (file2 (if (cdr files)
                             (cadr files)
                           (read-file-name
                            "file: "
                            (dired-dwim-target-directory)))))
              (if (file-newer-than-file-p file1 file2)
                  (ediff-files file2 file1)
                (ediff-files file1 file2))
              (add-hook 'ediff-after-quit-hook-internal
                        (lambda ()
                          (setq ediff-after-quit-hook-internal nil)
                          (set-window-configuration wnd))))
          (error "no more than 2 files should be marked"))))

    (setq-default dired-omit-files "^\\.\\([a-zA-Z0-9].*\\)?$"
                  dired-omit-mode t)

    :config

    ;; Adapt ls for mac
    (when (eq system-type 'darwin)
      (use-package ls-lisp
        :defines ls-lisp-use-insert-directory-program
        :config
        (setq ls-lisp-use-insert-directory-program t
              insert-directory-program "/usr/local/bin/gls")))

    ;; Omitting
    (put 'dired-find-alternate-file 'disabled nil)

    (setq dired-dwim-target t

          ;; Compression
          auto-compression-mode t

          ;; Recursive
          dired-recursive-deletes 'top
          dired-recursive-copies 'always

          ;; Details information
          dired-listing-switches "--group-directories-first -alh"
          dired-details-hidden-string "[...]")
    )

  (use-package ls-lisp
    :config
    ;; Adapt ls lisp format
    (if (boundp 'ls-lisp-ignore-case)
        (setq ls-lisp-ignore-case t))
    (if (boundp 'ls-lisp-dirs-first)
        (setq ls-lisp-dirs-first t))
    (if (boundp 'ls-lisp-use-localized-time-format)
        (setq ls-lisp-use-localized-time-format t))
    (if (boundp 'ls-lisp-format-time-list)
        (setq ls-lisp-format-time-list '("%Y-%m-%d %H:%M" "%Y-%m-%d %H:%M"))))
#+end_src

*** peep-dired
#+begin_src emacs-lisp
  (use-package peep-dired
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :config
    (define-key dired-mode-map (kbd "P") 'peep-dired))
#+end_src

*** dired-narrow
#+begin_src emacs-lisp
  (use-package dired-narrow
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :config
    (define-key dired-mode-map (kbd "/") 'dired-narrow))
#+end_src

*** dired-single
#+begin_src emacs-lisp
  (use-package dired-single
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :config
    (define-key dired-mode-map [return] 'dired-single-buffer)
    (define-key dired-mode-map [mouse-1] 'dired-single-buffer-mouse))
#+end_src

*** dired-collapse
#+begin_src emacs-lisp
  (use-package dired-collapse
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :disabled t
    :hook
    (dired-mode . dired-collapse-mode))
#+end_src

*** dired-filter
#+begin_src emacs-lisp
  (use-package dired-filter
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :hook
    (dired-mode . dired-filter-group-mode)

    :init
    (setq dired-filter-revert 'never
          dired-filter-group-saved-groups
          '(("default"
             ("previous"
              (regexp . "^\\.\\.$"))
             ("Directory"
              (directory))
             ("Git"
              (directory . ".git")
              (file . ".gitignore"))
             ("PDF"
              (extension . "pdf"))
             ("LaTeX"
              (extension "tex" "bib"))
             ("Source"
              (extension "c" "cpp" "hs" "rb" "py" "r" "cs" "el" "lisp" "html" "js" "css"))
             ("Doc"
              (extension "md" "rst" "txt"))
             ("Org"
              (extension . "org"))
             ("Archives"
              (extension "zip" "rar" "gz" "bz2" "tar"))
             ("Images"
              (extension "jpg" "JPG" "webp" "png" "PNG" "jpeg" "JPEG" "bmp" "BMP" "TIFF" "tiff" "gif" "GIF"))))))
#+end_src

*** dired-subtree
#+begin_src emacs-lisp
  (use-package dired-subtree
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :bind (:map dired-mode-map
                ("i" . dired-subtree-insert)
                (";" . dired-subtree-remove)))
#+end_src

*** dired-git-info
#+begin_src emacs-lisp
  (use-package dired-git-info
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :bind (:map dired-mode-map
                (")"  . dired-git-info-mode)))
#+end_src

#+end_src

*** Images
#+begin_src emacs-lisp
  (use-package image-dired+
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :config
    (setq auto-image-file-mode t)
    (eval-after-load 'image-dired+ '(image-diredx-async-mode 1)))
#+end_src

*** Async
#+begin_src emacs-lisp
  (use-package async
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :after dired
    :config

    (when (require 'dired-aux)
      (progn
        (require 'dired-async))
      (dired-async-mode 1)))
#+end_src

*** Dired / Rsync
#+begin_src emacs-lisp
  (use-package dired-rsync
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :functions dired-do-rsync
    :config
    (bind-key "C-c C-r" 'dired-rsync dired-mode-map))
#+end_src
*** Toggle
#+begin_src emacs-lisp
  (use-package dired-toggle
    :ensure t
    :commands (dired-toggle)
    :bind (("C-<f8>" . #'dired-toggle)
           :map dired-mode-map
           ("q" . #'dired-toggle-quit)
           ([remap dired-find-file] . #'dired-toggle-find-file)
           ([remap dired-up-directory] . #'dired-toggle-up-directory)
           ("C-c C-u" . #'dired-toggle-up-directory))
    :hook
    (dired-toggle-mode . dired-toggle-hook)

    :init
    (defun dired-toggle-hook ()
      (interactive)
      (visual-line-mode 1)
      (setq-local visual-line-fringe-indicators '(nil right-curly-arrow))
      (setq-local word-wrap nil))

    :config
    (setq dired-toggle-window-size 32
          dired-toggle-window-side 'left))
#+end_src

** Images
*** Visualisation
#+begin_src emacs-lisp
  (use-package image+
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :pretty-hydra
    ((:color red)
     ("Zoom"
      (("+" imagex-sticky-zoom-in "zoom in")
       ("-" imagex-sticky-zoom-out "zoom out")
       ("M" imagex-sticky-maximize "maximize"))

      "Rotation"
      (("r" imagex-sticky-rotate-right "rotate right")
       ("l" imagex-sticky-rotate-left "rotate left"))

      "I/O"
      (("O" imagex-sticky-restore-original "restore original")
       ("S" imagex-sticky-save-image "save file"))
      ))

    :hook
    (image-mode . (lambda () (require 'image+) (imagex-sticky-mode)))

    :bind (:map image-mode-map
		("/" . image+-hydra/body)))
#+end_src

*** Manipulation
#+begin_src emacs-lisp
  (use-package blimp
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :hook
    (image-mode . blimp-mode))
#+end_src

** Diff
*** Global
#+begin_src emacs-lisp
  (use-package ediff
    :tags '("FILE_MANAGEMENT")
    :config
    (autoload 'diff-mode "diff-mode" "Diff major mode" t)
    (setq diff-switches "-u"
          ediff-auto-refine-limit (* 2 14000)
          ediff-window-setup-function 'ediff-setup-windows-plain
          ediff-split-window-function
          (lambda (&optional arg)
            (if (> (frame-width) 160)
                (split-window-horizontally arg)
              (split-window-vertically arg)))))
#+end_src

*** Helpers for region diff
#+begin_src emacs-lisp
  (defun diff-region ()
    "Select a region to compare"
    (interactive)
    (when (use-region-p) ; there is a region
      (let (buf)
        (setq buf (get-buffer-create "*Diff-regionA*"))
        (save-current-buffer
          (set-buffer buf)
          (erase-buffer))
        (append-to-buffer buf (region-beginning) (region-end)))
      )
    (message "Now select other region to compare and run `diff-region-now`"))

  (defun diff-region-now ()
    "Compare current region with region already selected by `diff-region`"
    (interactive)
    (when (use-region-p)
      (let (bufa bufb)
        (setq bufa (get-buffer-create "*Diff-regionA*"))
        (setq bufb (get-buffer-create "*Diff-regionB*"))
        (save-current-buffer
          (set-buffer bufb)
          (erase-buffer))
        (append-to-buffer bufb (region-beginning) (region-end))
        (ediff-buffers bufa bufb))
      ))
#+end_src

** Tramp
#+begin_src emacs-lisp
  (use-package tramp
    :defer t
    :tags '("FILE_MANAGEMENT")
    :custom (tramp-default-method "ssh"
             password-cache-expiry 60
             tramp-verbose 1
             tramp-auto-save-directory temporary-file-directory)
          ;; ;; Debug
          ;; tramp-verbose 9
          ;; tramp-debug-buffer t)
  )

  (use-package counsel-tramp
    :ensure t)
#+end_src

** Trash
#+begin_src emacs-lisp
  ;; Ask confirmation only once and move to trash
  (setq dired-recursive-deletes 'always)
  (setq delete-by-moving-to-trash t)

  (defun empty-trash()
    "Command to empty the trash (for now gnome/linux specific)"
    (interactive)
    (shell-command "rm -rf ~/.local/share/Trash/*"))

  (defun open-trash-dir()
    "Command to open the trash dir"
    (interactive)
    (find-file "~/.local/share/Trash/files"))
#+end_src

** Treemacs
*** Global
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :bind (:map global-map
                ([f8]        . treemacs))
    :functions (treemacs-follow-mode treemacs-filewatch-mode)

    :config
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-integration               t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t))
#+end_src

*** Projectile
#+begin_src emacs-lisp
  (use-package treemacs-projectile
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :functions treemacs-projectile-create-header
    :after treemacs projectile
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header))
#+end_src

*** Magit
#+begin_src emacs-lisp
  (use-package treemacs-magit
    :tags '("FILE_MANAGEMENT")
    :after treemacs magit
    :ensure t)
#+end_src

*** Icons
#+begin_src emacs-lisp
  (use-package treemacs-icons-dired
    :tags '("FILE_MANAGEMENT")
    :ensure t
    :commands (treemacs-icons-dired-mode)
    :hook
    (dired-mode . treemacs-icons-dired--enable-highlight-correction)
    (dired-mode . treemacs--select-icon-set )
    (dired-mode . treemacs-icons-dired-mode))
#+end_src

* Coding / Development
** IDE
*** Buffer
**** TODO Undo
In order to have a better and more visual control of undoing, I use undo-propose for now. I used to
use undo-tree but corruption was a problem. However, having the navigation tree might be
easier. Therefore the section is still in *todo* status.

#+begin_src emacs-lisp
  (use-package undo-propose
    :ensure t
    :disabled t
    :tags '("CORE")
    :commands (undo-propose)
    :bind ("C-x u" . undo-propose))

  (use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))
#+end_src

**** Folding
For the folding, I am relying on outline-minor mode and more specifically outline-shine.

#+begin_src emacs-lisp
  (use-package outshine
    :straight (outshine :type git :host github :repo "alphapapa/outshine")
    :commands (outshine-cycle)
    :bind
    (:map outline-minor-mode-map
          ("<C-tab>"  . outshine-cycle)))
#+end_src

**** Helpers
I define here some global helpers used either in the rest of the file, either available to use at runtime

***** Editing as root
Defining a simple helper to edit file as root using tramp

#+begin_src emacs-lisp
  (defun edit-current-file-as-root ()
    "Edit the file that is associated with the current buffer as root"
    (interactive)
    (if (buffer-file-name)
        (find-file (concat "/sudo:localhost:" (buffer-file-name)))
      (message "Current buffer does not have an associated file.")))
#+end_src

*** Completion
This part focuses on completion configuration. Language specific configurations are not done here
but in the dedicate language configuration part. This section is just for global configuration.
**** Ivy/swipper/counsel
I do prefer vertical completion, which is why I use extensively Ivy and extensions.

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :tags '("COMPLETION")
    :config
    (ivy-mode)
    (setq ivy-display-style 'fancy
          ivy-use-virtual-buffers t
          enable-recursive-minibuffers t
          ivy-use-selectable-prompt t))

  (use-package counsel
    :ensure t
    :tags '("COMPLETION")
    :bind
    (("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)))

  (use-package ivy-rich
    :ensure t
    :tags '("COMPLETION")
    :config
    (ivy-rich-mode 1)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+end_src

**** Company
In order to have inline completion, really important for coding, I use company. However I adapted
some facing attributes. Each language is also adding its backend when needed. Therefore, only global
configuration here.

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :tags '("COMPLETION")
    :init
    (setq company-backends '(company-capf company-files))

    :config
    ;; Global
    (setq company-idle-delay 1
          company-minimum-prefix-length 1
          company-show-numbers t
          company-tooltip-limit 20)

    ;; Activating globally
    (global-company-mode t))

  (use-package company-quickhelp
    :ensure t
    :after company
    :tags '("COMPLETION")
    :config
    (company-quickhelp-mode 1))
#+end_src

**** Helm
I use Helm for some specific cases which requires an important visibility space completion.

#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :tags '("COMPLETION")
    :functions helm-show-completion-default-display-function
    :config
    (setq helm-scroll-amount 4 ; scroll 4 lines other window using M-<next>/M-<prior>
          helm-quick-update t ; do not display invisible candidates
          helm-idle-delay 0.01 ; be idle for this many seconds, before updating in delayed sources.
          helm-input-idle-delay 0.01 ; be idle for this many seconds, before updating candidate buffer
          helm-show-completion-display-function #'helm-show-completion-default-display-function
          helm-split-window-default-side 'below ;; open helm buffer in another window
          helm-split-window-inside-p t ;; open helm buffer inside current window, not occupy whole other window
          helm-candidate-number-limit 200 ; limit the number of displayed canidates
          helm-move-to-line-cycle-in-source nil ; move to end or beginning of source when reaching top or bottom of source.
          )
    )
#+end_src

**** Compdef
The main problem here is I tend to "push" more than actually setting, I will have to refactor this!

#+begin_src emacs-lisp
(use-package compdef :ensure t :disabled t)
#+end_src

**** Templating
I use templates for 2 use cases: the buffer edition and the file specific templates. Both are relying on *yasnippet*.

***** Edition templates
The default configuration of yasnippet consists of activating it and plugging it with company.
Ivy-yasnippet is used for snippet discovery.

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :tags '("COMPLETION")
    :init
    (yas-global-mode 1))

  ;; Load snippets
  (use-package yasnippet-snippets
    :ensure t
    :tags '("COMPLETION")
    :config

    ;; Add third parties snippets
    (defvar third-parties-snippet-dir (format "%s/third_parties/snippets" user-emacs-directory)
      "Directory containing my own snippets")

    (defun third-parties-snippets-initialize ()
      (add-to-list 'yas-snippet-dirs 'third-parties-snippet-dir t)
      (yas-load-directory third-parties-snippet-dir t))

    (eval-after-load 'yasnippet '(third-parties-snippets-initialize)))

  ;; Connect with ivy to have a list on demand
  (use-package ivy-yasnippet
    :ensure t
    :tags '("COMPLETION")
    :requires (yasnippet ivy))
#+end_src

***** Filetype templates
This part is using yatemplate (an over-layer of yasnippet) coupled with auto-insert to have a set of
file type dedicated templates. The templates are available in =third_parties/templates= directory.

#+begin_src emacs-lisp
  (use-package yatemplate
    :ensure t
    :tags '("COMPLETION")
    :after yasnippet
    :config

    ;; Define template directory
    (setq yatemplate-dir (concat user-emacs-directory "/third_parties/templates"))

    ;; Coupling with auto-insert
    (setq auto-insert-alist nil)
    (yatemplate-fill-alist)
    ;; (add-hook 'find-file-hook 'auto-insert)
    )
#+end_src

**** Prescient
Prescient helps to sort candidates by last used first and then sorting by length.

#+begin_src emacs-lisp
  (use-package prescient
    :ensure t
    :tags '("COMPLETION")
    :config (prescient-persist-mode))

  (use-package ivy-prescient
    :ensure t
    :tags '("COMPLETION")
    :config (ivy-prescient-mode))

  (use-package company-prescient
    :ensure t
    :tags '("COMPLETION")
    :config (company-prescient-mode))
#+end_src

*** Language interaction (LSP)
LSP is a set of helper to interact with external "ide" tools and provide their functionalities into
emacs. It is the baseline of my configuration for java, kotlin and also python. I suspect I am going
to extend it even further in the feature.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :tags '("IDE")
    :mode-hydra
    (lsp-mode
     (:color red)
     ("Buffer"
      (("f"   lsp-format-buffer "Format")
       ("m"   lsp-ui-imenu "IMenu")
       ("x"   lsp-execute-code-action "Excute action"))

      "Server"
      (("M-s" lsp-describe-session "Describe")
       ("M-r" lsp-restart-workspace "Restart")
       ("S"   lsp-shutdown-workspace "Shutdown"))

      "Symbol"
      (("d"   lsp-find-declaration "Declaration")
       ("D"   lsp-ui-peek-find-definitions "Definition")
       ("R"   lsp-ui-peek-find-references "References")
       ("i"   lsp-ui-peek-find-implementation "Implementation")
       ("t"   lsp-find-type-definition "Type")
       ("s"   lsp-signature-help "Signature")
       ("o"   lsp-describe-thing-at-point "Documentation")
       ("r"   lsp-rename "Rename"))))

    :commands (lsp lsp-deferred)

    :bind
    (:map lsp-mode-map
          ("C-h M-h" . lsp-mode-hydra/body))

    :init
    (setq lsp-before-save-edits t
          lsp-inhibit-message t
          lsp-eldoc-render-all nil
          lsp-highlight-symbol-at-point nil
          lsp-prefer-flymake nil
          read-process-output-max (* 1024 1024)
          lsp-idle-delay 0.500))

  (use-package lsp-ui
    :ensure t
    :tags '("IDE")
    :after lsp-mode
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-doc-enable t
          lsp-ui-doc-use-webkit nil
          lsp-ui-doc-delay 1.0
          lsp-ui-sideline-delay 1.0
          lsp-ui-doc-include-signature t
          lsp-ui-doc-position 'at-point
          lsp-eldoc-enable-hover nil ; Disable eldoc displays in minibuffer

          lsp-ui-sideline-enable t
          lsp-ui-sideline-show-hover nil
          lsp-ui-sideline-show-diagnostics nil
          lsp-ui-sideline-ignore-duplicate t))

  (use-package dap-mode
    :ensure t
    :tags '("IDE")
    :commands dap-debug
    :after lsp-mode
    :init
    (dap-mode t)
    (dap-ui-mode t))
#+end_src

*** Version control
**** Git
***** Magit
- Externally opening has been copied from https://gist.github.com/dotemacs/9a0433341e75e01461c9
- Pretty configuration is adapted from https://ekaschalk.github.io/post/pretty-magit/

****** Global
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :tags '("VC")
    :commands (magit magit-hydra/body magit-get-current-branch)
    :pretty-hydra
    ((:color blue)
     ("Status/Info"
      (("d" magit-diff-range "Diff")
       ("l" magit-log-all "Log all")
       ("s" magit-status "Status")
       ("t" git-timemachine "Time machine")) ;; FIXME: works only if git-timemachine installed

      "Remote"
      (("f" magit-pull-branch "Pull")
       ("p" magit-push-other "Push"))

      "Operations"
      (("c" magit-commit-create "Commit")
       ("<" project-hydra/body "back"))))

    :bind
    (:map magit-mode-map
	  ("o" . magit-open-repo))

    :config

    ;; Ignore recent commit
    (setq magit-status-sections-hook
	  '(magit-insert-status-headers
	    magit-insert-merge-log
	    magit-insert-rebase-sequence
	    magit-insert-am-sequence
	    magit-insert-sequencer-sequence
	    magit-insert-bisect-output
	    magit-insert-bisect-rest
	    magit-insert-bisect-log
	    magit-insert-untracked-files
	    magit-insert-unstaged-changes
	    magit-insert-staged-changes
	    magit-insert-stashes
	    magit-insert-unpulled-from-upstream
	    magit-insert-unpulled-from-pushremote
	    magit-insert-unpushed-to-upstream
	    magit-insert-unpushed-to-pushremote))

    ;; Update visualization
    (setq pretty-magit-alist nil
	  pretty-magit-prompt nil)

    (defmacro pretty-magit (WORD ICON PROPS &optional NO-PROMPT?)
      "Replace sanitized WORD with ICON, PROPS and by default add to prompts."
      `(prog1
	   (add-to-list 'pretty-magit-alist
			(list (rx bow (group ,WORD (eval (if ,NO-PROMPT? "" ":"))))
			      ,ICON ',PROPS))
	 (unless ,NO-PROMPT?
	   (add-to-list 'pretty-magit-prompt (concat ,WORD ":")))))

    ;; Operations
    (pretty-magit "add:"      ?ï¶  (:foreground "#375E97" :height 1.2) t)
    (pretty-magit "update:"   ?â   (:foreground "#375E97" :height 1.2) t)
    (pretty-magit "fix:"      ?ï  (:foreground "#FB6542" :height 1.2) t)
    (pretty-magit "clean:"    ?ï  (:foreground "#FFBB00" :height 1.2) t)
    (pretty-magit "doc:"      ?ï  (:foreground "#3F681C" :height 1.2) t)

    ;; Meta information
    (pretty-magit "master"    ?î¤  (:box nil :height 1.2)             t)
    (pretty-magit "origin"    ?ï  (:box nil :height 1.2)             t)
    (pretty-magit "upstream"  ?ïµ  (:box nil :height 1.2)             t)

    (defun add-magit-faces ()
      "Add face properties and compose symbols for buffer from pretty-magit."
      (interactive)
      (with-silent-modifications
	(--each pretty-magit-alist
	  (-let (((rgx icon props) it))
	    (save-excursion
	      (goto-char (point-min))
	      (while (search-forward-regexp rgx nil t)
		(compose-region
		 (match-beginning 1) (match-end 1) icon)
		(when props
		  (add-face-text-property
		   (match-beginning 1) (match-end 1) props))))))))

    (advice-add 'magit-status :after 'add-magit-faces)
    (advice-add 'magit-refresh-buffer :after 'add-magit-faces)

    ;; Opening repo externally
    (defun parse-url (url)
      "convert a git remote location as a HTTP URL"
      (if (string-match "^http" url)
	  url
	(replace-regexp-in-string "\\(.*\\)@\\(.*\\):\\(.*\\)\\(\\.git?\\)"
				  "https://\\2/\\3"
				  url)))
    (defun magit-open-repo ()
      "open remote repo URL"
      (interactive)
      (let ((url (magit-get "remote" "origin" "url")))
	(progn
	  (browse-url (parse-url url))
	  (message "opening repo %s" url))))
    )
#+end_src

****** Diff
#+begin_src emacs-lisp
  (use-package magit-tbdiff
    :ensure t
    :tags '("VC")
    :after magit)
#+end_src

****** Todo
#+begin_src emacs-lisp
  (use-package magit-todos
    :ensure t
    :disabled t
    :tags '("VC")
    :commands (magit-todos-mode)
    :hook (magit-mode . magit-todos-mode)
    :config
    (setq magit-todos-recursive t
          magit-todos-depth 100)
    :custom (magit-todos-keywords (list "TODO" "FIXME")))
#+end_src

***** Git ignore
#+begin_src emacs-lisp
  (use-package gitignore-mode
    :ensure t
    :tags '("VC"))

  (use-package helm-gitignore
    :ensure t
    :tags '("VC"))
#+end_src

***** Config edition
#+begin_src emacs-lisp
  (use-package gitconfig-mode
    :ensure t
    :tags '("VC")
    :mode
    ("/\.gitconfig\'"    . gitconfig-mode)
    ("/vcs/gitconfig\'"    . gitconfig-mode))
#+end_src

***** Helpers for edition
#+begin_src emacs-lisp
  (use-package gitattributes-mode
    :ensure t
    :tags '("VC"))
#+end_src

***** Git prefix
#+begin_src emacs-lisp
  (use-package git-msg-prefix
    :ensure t
    :tags '("VC")
    :config
    (setq git-msg-prefix-log-flags " --since='1 week ago' "
          git-msg-prefix-regex "^\\([^:]*: \\)"
          git-msg-prefix-input-method 'ivy-read)
    ;; (add-hook 'git-commit-mode-hook 'git-msg-prefix)
    )
#+end_src

***** Commit navigation
#+begin_src emacs-lisp
  (use-package git-timemachine
    :ensure t
    :commands (git-timemachine-toggle)
    :tags '("VC"))
#+end_src

***** Send patch by email
#+begin_src emacs-lisp
  (use-package gitpatch
    :ensure t
    :tags '("VC")
    :config
    (setq gitpatch-mail-attach-patch-key "C-c i"))
#+end_src

***** Exploring repository
#+begin_src emacs-lisp
  (use-package github-explorer
    :ensure t
    :tags '("VC"))
#+end_src

***** TODO Reviewing
#+begin_src emacs-lisp
  (use-package github-review
    :ensure t)
#+end_src

**** Mercurial
***** Monky
#+begin_src emacs-lisp
  (use-package monky
    :ensure t
    :commands (monky-status monky-pull)
    :tags '("VC"))
#+end_src

***** Configuration
#+begin_src emacs-lisp
  (use-package hgignore-mode
    :ensure t
    :tags '("VC"))

  (use-package hgrc-mode
    :ensure t
    :tags '("VC"))
#+end_src

**** Providers
***** Forge
#+begin_src emacs-lisp
  (use-package forge
    :ensure t
    :demand t
    :tags '("VC")
    :after magit
    :custom-face
    (forge-topic-closed ((t (:strike-through t :inherit magit-dimmed)))))
#+end_src

***** Gist
#+begin_src emacs-lisp
  (use-package gist
    :ensure t
    :tags '("VC")
    :mode-hydra
    (gist-list-mode
     (:color red)
     ("Basic"
      (("F" gist-fetch-current "Fetch")
       ("+" gist-add-buffer "Add buffer")
       ("-" gist-remove-file "Remove file")
       ("g" gist-list-reload "List reload")
       ("k" gist-kill-current "Kill current"))

      "Information"
      (("e" gist-edit-current-description "Edit description")
       ("y" gist-print-current-url "Print URL"))

      "Starring"
      (("^" gist-unstar "Unstar")
       ("*" gist-star "Start"))

      "Remote"
      (("b" gist-browse-current-url "Browse current URL")
       ("f" gist-fork "Fork")))))
#+end_src

***** Gitlab
#+begin_src emacs-lisp
  (use-package gitlab
    :ensure t
    :tags '("VC"))

  (use-package ivy-gitlab
    :ensure t
    :tags '("VC"))
#+end_src

***** Browsing at remote
#+begin_src emacs-lisp
  (use-package browse-at-remote
    :ensure t
    :tags '("VC"))
#+end_src

**** Continuous building
#+begin_src emacs-lisp
  (use-package travis
    :ensure t
    :tags '("VC")
    :commands (show-my-travis-projects)
    :config

    (require 'travis-utils)

    (defun travis--get-github-token ()
      "Retrieve the Travis token ID."
      (my:auth-source-get-passwd :host "travis-ci.org" :user "seblemaguer"))

    (defun show-my-travis-projects ()
      (interactive)
      (travis-show-projects "seblemaguer")))
#+end_src

*** Project management
**** Configuration projectile
The commands are based on http://endlessparentheses.com/improving-projectile-with-extra-commands.html?source=rss
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :tags '("PROJECT")
    :pretty-hydra
    ((:color teal :hint nil :title "PROJECTILE: %(projectile-project-root)")
     ("Find File"
      (("d"   counsel-projectile-find-dir "Find dir")
       ("s-f" counsel-projectile-find-file "Find file")
       ("ff"  counsel-projectile-find-file-dwim "File dwim")
       ("fd"  counsel-projectile-find-file-in-directory "Find file in directory")
       ("r"   counsel-projectile-recentf "Recentf"))

      "Search/Tags"
      (("a"   counsel-projectile-ag "Ag chairs")
       ("o"   counsel-projectile-multi-occur "Multi-occur")
       ("g"   ggtags-update-tags "Update tags"))

      "Buffers"
      (("K"   counsel-projectile-kill-buffers "Kill buffers"))

      "Cache"
      (("p"   counsel-projectile-switch-project "Switch to project")
       ("x"   counsel-projectile-remove-known-project "Remove known project")
       ("X"   counsel-projectile-cleanup-known-projects "Clean known projects")
       ("z"   counsel-projectile-cache-current-file "Cache current file"))))

    :config

    ;; Global configuration
    (setq projectile-switch-project-action 'neotree-projectile-action
          projectile-enable-caching t
          projectile-create-missing-test-files t
          projectile-switch-project-action #'projectile-commander
          projectile-ignored-project-function 'file-remote-p)

    ;; Defining some helpers
    (def-projectile-commander-method ?s
      "Open a *shell* buffer for the project."
      ;; This requires a snapshot version of Projectile.
      (projectile-run-shell))

    (def-projectile-commander-method ?c
      "Run `compile' in the project."
      (projectile-compile-project nil))

    (def-projectile-commander-method ?\C-?
      "Go back to project selection."
      (projectile-switch-project))

    ;; Keys
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)

    ;; Activate globally
    (projectile-mode)

    ;; Needed to avoid tramp hanging in buffer listing
    (defadvice projectile-project-root (around ignore-remote first activate)
      (unless (file-remote-p default-directory) ad-do-it))
    )
#+end_src

**** Todos/projectile
#+begin_src emacs-lisp
  (use-package org-projectile
    :ensure t
    :tags '("PROJECT")
    :disabled t
    :config
    (org-projectile-per-project)
    (setq org-projectile-per-project-filepath "todo.org"
          org-agenda-files
          (append org-agenda-files (org-projectile-todo-files))))
#+end_src

**** Completion
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :tags '("PROJECT")
    :after projectile
    :functions
    (counsel-projectile-find-file-in-directory
     counsel-projectile-kill-buffers
     counsel-projectile-multi-occur
     counsel-projectile-recentf
     counsel-projectile-remove-known-project
     counsel-projectile-cleanup-known-projects
     counsel-projectile-cache-current-file
     counsel-projectile-invalidate-cache
     ggtags-update-tags ;; FIXME: a require should be put somewhere maybe
     ))
#+end_src

*** Compilation
I develop with emacs, so compiling is actually a big part of my life. Therefore, I modified baseline
compilation mechanisms as well as fly checking.

**** Baseline compilation
I just modify a little bit the default compilation to be a little more "user friendly".

#+begin_src emacs-lisp
  (defun my-compile-autoclose (buffer string)
    "Auto close compile log if there are no errors"
    (when (and (not (string-match-p (buffer-name buffer) "*grep*"))
               (string-match "finished" string))
          (delete-window (get-buffer-window buffer t))
          (bury-buffer-internal buffer)))

  (use-package compile
    :defer
    :diminish compilation-in-progress
    :tags '("COMPILATION")
    :hook
    (compilation-filter-hook . my-colorize-compilation-buffer)
    :init
    (setq compilation-scroll-output t)
    :config
    (defun my-colorize-compilation-buffer ()
          (read-only-mode 'toggle)
          (ansi-color-apply-on-region compilation-filter-start (point))
          (read-only-mode 'toggle))
    (add-to-list 'compilation-finish-functions #'my-compile-autoclose)

    (setq compilation-always-kill t
          compilation-ask-about-save nil
          compilation-scroll-output 'first-error)

    ;; the next-error function weirdly stops at "In file included from
    ;; config.cpp:14:0:". Stop that:
    ;; http://stackoverflow.com/questions/15489319/how-can-i-skip-in-file-included-from-in-emacs-c-compilation-mode
    (setcar (nthcdr 5 (assoc 'gcc-include compilation-error-regexp-alist-alist)) 0)
    )
#+end_src

**** Flychecking
For the fly checking, I use flycheck instead of flymake. So I adapted it for my needs by also adding proselint support.

#+begin_src emacs-lisp
  ;; Disable checking doc
  (use-package flycheck
    :ensure t
    :tags '("CORE")
    :commands (flycheck-error-list-set-filter flycheck-next-error flycheck-previous-error flycheck-first-error)
    :pretty-hydra
    ((:pre (progn (setq hydra-hint-display-type t) (flycheck-list-errors))
	   :post (progn (setq hydra-hint-display-type nil) (quit-windows-on "*Flycheck errors*"))
	   :color teal :hint nil)

     ("Errors"
      (("f"  flycheck-error-list-set-filter                            "Filter")
       ("j"  flycheck-next-error                                       "Next")
       ("k"  flycheck-previous-error                                   "Previous")
       ("gg" flycheck-first-error                                      "First")
       ("G"  (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
       ("<"  project-hydra/body "back"))))

    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))

    (flycheck-define-checker proselint
      "A linter for prose."
      :command ("proselint" source-inplace)
      :error-patterns
      ((warning line-start (file-name) ":" line ":" column ": "
		(id (one-or-more (not (any " "))))
		(message) line-end))
      :modes (text-mode markdown-mode gfm-mode org-mode))
    )

  (use-package flycheck-posframe
    :ensure t
    :after flycheck
    :hook (flycheck-mode . flycheck-posframe-mode)
    :config
    (setq flycheck-posframe-warning-prefix "\u26a0 "))
#+end_src

**** Task runner
#+begin_src emacs-lisp
  (use-package taskrunner
    :ensure straight
    :straight (taskrunner :type git :host github :repo "emacs-taskrunner/emacs-taskrunner"
                          :fork (:host github :repo "seblemaguer/emacs-taskrunner"))
    :tags '("COMPILATION"))

  (use-package ivy-taskrunner
    :ensure straight
    :straight (ivy-taskrunner :type git :host github :repo "emacs-taskrunner/ivy-taskrunner")
    :tags '("COMPILATION")
    :bind ("C-c C-g b" . ivy-taskrunner))
#+end_src
*** Dealing with comment
**** Separedit
#+begin_src emacs-lisp
  (use-package separedit
    :ensure t
    :bind ("C-c '" . separedit)
    :config
    (setq separedit-default-mode 'markdown-mode)) ;; or org-mode
#+end_src

**** Fixme keywords management
To deal with the fixme, I relie on two part: fic-mode for the highlighting and occur for the
listing.

#+begin_src emacs-lisp
  (use-package fic-mode
    :ensure t
    :tags '("CORE")
    :hook
    (prog-mode . fic-mode)
    :init

    (defun fic-view-listing ()
      "Use occur to list related FIXME keywords"
      (interactive)
      (occur "\\<\\(FIXME\\|WRITEME\\|WRITEME!\\|TODO\\|BUG\\):?")))
#+end_src

*** Formatting
**** format-all
We can globally reformat the buffer relying on external tool. =format-all= is here for this.

#+begin_src emacs-lisp
  (use-package format-all
    :ensure t
    :commands (format-all-buffer format-all-mode))
#+end_src
*** Documentation
#+begin_src emacs-lisp
  (use-package man
    :ensure t
    :tags '("DOCUMENTATION")
    :config
    (setq Man-notify-method 'pushy
          woman-manpath `("/usr/share/man/" "/usr/local/man/" ;; System
                          ,(format "%s/local/man" user-emacs-directory) ;; Private environment
                          )))
#+end_src

** Programming language specific configurations
Now that we have achieved the global configuration, I am going to focus on the language specific
configuration.

*** C/C++
C and C++ configuration is mainly relying on irony. Some minor adaptations, like the compilation
part, are also integrated.
**** Irony main configuration
We just load irony add support for c derivative mode.
#+begin_src emacs-lisp
  (use-package irony
    :ensure t
    :tags '("LANGUAGE")
    :hook ((c-mode . irony-mode)
           (objc-mode . irony-mode)
           (c++-mode . irony-mode)))
#+end_src

**** Checking/documentation
#+begin_src emacs-lisp
  (use-package flycheck-irony
    :ensure t
    :tags '("LANGUAGE")
    :after (flycheck irony))

  (use-package irony-eldoc
    :ensure t
    :tags '("LANGUAGE")
    :after (irony))
#+end_src

**** Completion
For the completion, I am relying on company and irony. The configuration consists of add irony
into company backend.
#+begin_src emacs-lisp
  (use-package company-irony
    :ensure t
    :tags '("LANGUAGE")
    ;; :compdef irony-mode
    ;; :company company-irony
    :hook
    (irony-mode . company-irony-hook)

    :init
    (defun company-irony-hook ()
      (make-local-variable 'company-backends)
      (set 'company-backends (append '(company-irony) company-backends))))

  (use-package company-irony-c-headers
    :ensure t
    :tags '("LANGUAGE")
    ;; :compdef irony-mode
    ;; :company company-irony-c-headers
    :hook
    (irony-mode . company-irony-c-headers-hook)

    :init
    (defun company-irony-c-headers-hook ()
      (make-local-variable 'company-backends)
      (set 'company-backends (append '(company-irony-c-headers) company-backends))))
#+end_src

**** Adapt compilation
Sometimes, I don't want to have a makefile or any complicated project compilation. So I just use
gcc/g++. Therefore, here, either there is a makefile and use it, either there is none and I use
gcc/++ directly.
#+begin_src emacs-lisp
  (use-package smart-compile
    :ensure t
    :tags '("LANGUAGE")
    :bind (("C-c C-c" . smart-compile)

           :map c-mode-base-map
           ("C-c C-c" . smart-compile)))
#+end_src

**** C++ specificities
For C++, I use a dedicated font lock.
#+begin_src emacs-lisp
  (use-package modern-cpp-font-lock
    :ensure t
    :tags '("LANGUAGE"))
#+end_src

*** Configuration and log files
This part is dedicated to unix and more general configuration files as well as logs.
**** Default unix configuration
Config-general-mode is applied for all unix configuration files.
#+begin_src emacs-lisp
  (use-package config-general-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode ("\\.conf$" "\\.*rc$"))
#+end_src

**** Authinfo
I developed a dedicated mode for syntax highlighting authinfo files. For now, it is not stable
enough to be on melpa so I use straight.
#+begin_src emacs-lisp
  (use-package colored-authinfo-mode
    :straight (colored-authinfo-mode :repo "seblemaguer/colored-authinfo-mode" :type git :host github)
    :tags '("LANGUAGE")
    :mode ("\\.authinfo\\(?:\\.gpg\\)\\'" . colored-authinfo-mode))
#+end_src

**** Apache
#+begin_src emacs-lisp
  (use-package apache-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode ("\\.htaccess\\'" "httpd\\.conf\\'" "srm\\.conf\\'"
           "access\\.conf\\'" "sites-\\(available\\|enabled\\)/"))
#+end_src

**** SSH configuration
#+begin_src emacs-lisp
  (use-package ssh-config-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode ("/\\.ssh/config\\'" "/system/ssh\\'" "/sshd?_config\\'" "/known_hosts\\'" "/authorized_keys2?\\'")
    :hook (ssh-config-mode . turn-on-font-lock)

    :config
    (autoload 'ssh-config-mode "ssh-config-mode" t))
#+end_src

**** Logview
#+begin_src emacs-lisp
  (use-package logview
    :ensure t
    :tags '("LANGUAGE")

    :commands logview-mode
    :mode
    ("\\.log\\(?:\\.[0-9]+\\)?\\'" . logview-mode)
    ("syslog\\(?:\\.[0-9]+\\)?\\'" . logview-mode))
#+end_src

**** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode (".yaml$")
    :hook
    (yaml-mode . yaml-mode-outline-hook)

    :init
    (defun yaml-outline-level ()
      "Return the outline level based on the indentation, hardcoded at 2 spaces."
      (s-count-matches "[ ]\\{2\\}" (match-string 0)))

    (defun yaml-mode-outline-hook ()
      (outline-minor-mode)
      (setq outline-regexp "^\\([ ]\\{2\\}\\)*\\([-] \\)?\\([\"][^\"]*[\"]\\|[a-zA-Z0-9_-]*\\): *\\([>|]\\|&[a-zA-Z0-9_-]*\\)?$")
      (setq outline-level 'yaml-outline-level))
    )

  (use-package yaml-tomato
    :ensure t
    :tags '("LANGUAGE"))
#+end_src

**** vimrc
#+begin_src emacs-lisp
  (use-package vimrc-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode ("^\\.vimrc\\'"))
#+end_src

*** CSS
#+begin_src emacs-lisp
  (use-package scss-mode
    :ensure t
    :tags '("LANGUAGE")
    :defines scss-compile-at-save
    :mode ("\\.scss\\'")
    :config
    (setq scss-compile-at-save 'nil))
#+end_src

*** CSV
 #+begin_src emacs-lisp
   (use-package csv-mode
     :ensure t
     :tags '("LANGUAGE")
     :config

     ;; Define separators
     (setq csv-separators '("," ";" ":" " ")))

   ;; Subpackages
   (use-package csv-nav
     :ensure t
     :tags '("LANGUAGE")
     :disabled t)
 #+end_src

*** Cue
#+begin_src emacs-lisp
  (use-package cue-mode
    :straight (cue-mode :repo "seblemaguer/cue-mode" :type git :host github)
    :tags '("LANGUAGE")
    :mode ("\\.cue$"))
#+end_src

*** Emacs Lisp
**** Global configuration
#+begin_src emacs-lisp
  (use-package emacs-lisp-mode
    :mode-hydra
    ("Eval"
     (("b" eval-buffer "buffer")
      ("e" eval-defun "defun")
      ("r" eval-region "region"))

     "REPL"
     (("I" ielm "ielm"))

     "Test"
     (("t" ert "prompt")
      ("T" (ert t) "all")
      ("F" (ert :failed) "failed"))

     "Doc"
     (("d" describe-foo-at-point "thing-at-pt")
      ("f" describe-function "function")
      ("v" describe-variable "variable")
      ("i" info-lookup-symbol "info lookup"))))
#+end_src

**** Buffer content
#+begin_src emacs-lisp
  ;; Package lint
  (use-package package-lint
    :ensure t
      :tags '("COMPILATION"))

  ;; Pretty print for lisp
  (use-package ipretty
    :ensure t
      :tags '("LANGUAGE"))
#+end_src

**** ELPL
#+begin_src emacs-lisp
  (use-package elpl
    :ensure t
    :commands (elpl))
#+end_src

*** Graphviz
#+begin_src emacs-lisp
  (use-package graphviz-dot-mode
    :ensure t
    :tags '("LANGUAGE")
    :init
    (defvar default-tab-width nil)

    :mode ("\\.dot\\'"))
#+end_src

*** Java based
**** Global (lsp-java)
#+begin_src emacs-lisp
  (use-package lsp-java
    :ensure t
    :tags '("LANGUAGE")
    :hook
    (java-mode . lsp)

    :config
    (setq lsp-java-save-action-organize-imports nil))

  (use-package dap-java :disabled t)
  (use-package lsp-java-treemacs :disabled t)
#+end_src

**** Snippets
#+begin_src emacs-lisp
  (use-package java-snippets
    :ensure t
    :tags '("LANGUAGE"))
#+end_src

**** Javadoc
#+begin_src emacs-lisp
  (use-package javadoc-lookup
    :ensure t
    :tags '("LANGUAGE")
    :config
    (when (file-exists-p "/usr/share/doc/openjdk-8-jdk/api")
      (javadoc-add-roots "/usr/share/doc/openjdk-8-jdk/api"))

    (javadoc-add-artifacts [org.lwjgl.lwjgl lwjgl "2.8.2"]
                           [com.nullprogram native-guide "0.2"]
                           [org.apache.commons commons-math3 "3.0"]
                           ;; [de.dfki.lt.jtok jtok-core "1.9.3"]
                           ))

#+end_src

*** Groovy
**** Global groovy
#+begin_src emacs-lisp
  (use-package groovy-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode ("\.groovy$" "\.gradle$")
    :interpreter ("gradle" "groovy")
    :hook
    (groovy-mode .  (lambda () (inf-groovy-keys)))
    (groovy-mode . lsp-deferred)

    :config
    (autoload 'run-groovy "inf-groovy" "Run an inferior Groovy process")
    (autoload 'inf-groovy-keys "inf-groovy" "Set local key defs for inf-groovy in groovy-mode")

    (setq lsp-groovy-server-file "~/environment/local/lib/groovy-language-server-all.jar"))

  ;; Subpackages
  (use-package groovy-imports
    :ensure t
    :tags '("LANGUAGE"))
#+end_src

**** Gradle specificities
#+begin_src emacs-lisp
  (use-package flycheck-gradle
    :ensure t
    :commands (flycheck-gradle-setup)
    :tags '("LANGUAGE")
    :init
    (mapc
     (lambda (x)
       (add-hook x #'flycheck-gradle-setup))
     '(java-mode-hook kotlin-mode-hook groovy-mode-hook)))
#+end_src

*** Kotlin
#+begin_src emacs-lisp
  (use-package kotlin-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode "\\.kts?\\'"
    :hook
    (kotlin-mode . lsp-deferred)

    :config
    (setq kotlin-tab-width 4))
#+end_src

*** Latex
**** Global
#+begin_src emacs-lisp
  (use-package tex-site
    :ensure auctex
    :tags '("LANGUAGE")
    :after (tex latex)
    :hook
    (LaTeX-mode . turn-off-auto-fill)
    (LaTeX-mode . (lambda () (TeX-fold-mode t)))
    (LaTeX-mode . LaTeX-math-mode)
    (LaTeX-mode . outline-minor-mode)
    (LaTeX-mode . TeX-source-correlate-mode)

    :config
    ;; Pdf activated by default
    (TeX-global-PDF-mode 1)

    ;; Diverse
    (setq-default TeX-master nil)
    (setq TeX-parse-self t
          TeX-auto-save t)

    ;; Minor helpers for comment and quotes
    (add-to-list 'LaTeX-verbatim-environments "comment")
    (setq TeX-open-quote "\enquote{"
          TeX-close-quote "}")

    ;; Indentation
    (setq LaTeX-indent-level 4
          LaTeX-item-indent 0
          TeX-brace-indent-level 4
          TeX-newline-function 'newline-and-indent)

    (defadvice LaTeX-fill-region-as-paragraph (around LaTeX-sentence-filling)
      "Start each sentence on a new line."
      (let ((from (ad-get-arg 0))
            (to-marker (set-marker (make-marker) (ad-get-arg 1)))
            tmp-end)
        (while (< from (marker-position to-marker))
          (forward-sentence)
          ;; might have gone beyond to-marker --- use whichever is smaller:
          (ad-set-arg 1 (setq tmp-end (min (point) (marker-position to-marker))))
          ad-do-it
          (ad-set-arg 0 (setq from (point)))
          (unless (or
                   (bolp)
                   (looking-at "\\s *$"))
            (LaTeX-newline)))
        (set-marker to-marker nil)))
    (ad-activate 'LaTeX-fill-region-as-paragraph)

    ;; PDF/Tex correlation
    (setq TeX-source-correlate-method 'synctex)

    ;; Keys
    (define-key LaTeX-mode-map (kbd "C-c C-=") 'align-current))
#+end_src

**** Bibtex
***** Global
#+begin_src emacs-lisp
  (use-package bibtex
    :tags '("LANGUAGE")
    :config
    (defun bibtex-generate-autokey ()
      (let* ((bibtex-autokey-names nil)
             (bibtex-autokey-year-length 4)
             (bibtex-autokey-name-separator "\0")
             (names (split-string (bibtex-autokey-get-names) "\0"))
             (year (bibtex-autokey-get-year))
             (name-char (cond ((= (length names) 1) 4)
                              ((= (length names) 2) 2)
                              (t 1)))
             (existing-keys (bibtex-parse-keys))
             key)
        (setq names (s-upper-camel-case (car names)))
        (setq key (format "%s:%s" year names))

        (let ((ret key))
          (loop for c from ?a to ?z
                while (assoc ret existing-keys)
                do (setq ret (format "%s:%c" key c)))
          ret)))

    (setq bibtex-align-at-equal-sign t
          bibtex-autokey-name-year-separator ""
          bibtex-autokey-year-title-separator ""
          bibtex-autokey-titleword-first-ignore '("the" "a" "if" "and" "an")
          bibtex-autokey-titleword-length 100
          bibtex-autokey-titlewords 1))
#+end_src

***** TODO Utilities
#+begin_src emacs-lisp
  (defvar bibtex-plugin-dir (concat default-plugin-dir "/bibtex-utils")
    "Directory containing some bibtex helpers")
  (add-to-list 'load-path bibtex-plugin-dir)
#+end_src

***** Formatting
#+begin_src emacs-lisp
  (use-package bibclean-format
    :ensure t
    :hook
    (bibtex-mode . bibclean-format-on-save-mode)

    :commands (bibclean-format)

    :bind
    (:map bibtex-mode-map
          ("C-c f" . bibclean-format))
    :config
    (setq bibclean-format-args '("--max-width" "0" "--align-equal")))
#+end_src

**** Reftex
#+begin_src emacs-lisp
  (use-package reftex
    :tags '("LANGUAGE")
    :hook
    (LaTeX-mode . turn-on-reftex)   ; with AUCTeX LaTeX mode
    :config
    (setq reftex-save-parse-info t
          reftex-enable-partial-scans t
          reftex-use-multiple-selection-buffers t
          reftex-plug-into-AUCTeX t
          reftex-vref-is-default t
          reftex-cite-format
          '((?\C-m . "\\cite[]{%l}")
            (?t . "\\textcite{%l}")
            (?a . "\\autocite[]{%l}")
            (?p . "\\parencite{%l}")
            (?f . "\\footcite[][]{%l}")
            (?F . "\\fullcite[]{%l}")
            (?x . "[]{%l}")
            (?X . "{%l}"))

          font-latex-match-reference-keywords
          '(("cite" "[{")
            ("cites" "[{}]")
            ("footcite" "[{")
            ("footcites" "[{")
            ("parencite" "[{")
            ("textcite" "[{")
            ("fullcite" "[{")
            ("citetitle" "[{")
            ("citetitles" "[{")
            ("headlessfullcite" "[{"))

          reftex-cite-prompt-optional-args nil
          reftex-cite-cleanup-optional-args t))
#+end_src

**** Completion
#+begin_src emacs-lisp
  ;; Completion
  (setq TeX-auto-global (format "%s/auctex/style" user-emacs-directory))

  (use-package company-auctex
    :ensure t
    :tags '("LANGUAGE")
    :hook
    (LaTeX-mode . company-auctex-hook)

    :init
    (defun company-auctex-hook ()
      (make-local-variable 'company-backends)
      (company-auctex-init)))

  (use-package company-reftex
    :ensure t
    :tags '("LANGUAGE")
    ;; :compdef (latex-mode org-mode)
    ;; :company (company-reftex-labels company-reftex-citations)
    :hook
    (LaTeX-mode . company-reftex-hook)
    (org-mode   . company-reftex-hook)

    :init
    (defun company-reftex-hook ()
      (make-local-variable 'company-backends)
      (set 'company-backends (append '(company-reftex-labels company-reftex-citations) company-backends))))

  (use-package company-math
    :ensure t
    :tags '("LANGUAGE")
    :disabled t
    ;; :compdef (latex-mode org-mode)
    ;; :company company-math-symbols-unicode
    :hook
    (LaTeX-mode . company-math-hook)
    (org-mode   . company-math-hook)

    :init
    (defun company-math-hook ()
      (make-local-variable 'company-backends)
      (set 'company-backends (append '(company-math-symbols-unicode) company-backends))))
#+end_src

**** Compilation
#+begin_src emacs-lisp
  ;; Escape mode
  (defun TeX-toggle-escape nil
    (interactive)
    "Toggle Shell Escape"
    (setq LaTeX-command
          (if (string= LaTeX-command "latex")
              "latex -shell-escape"
            "latex"))
    (message (concat "shell escape "
                     (if (string= LaTeX-command "latex -shell-escape")
                         "enabled"
                       "disabled"))
             )
    )

  (use-package auctex-latexmk
    :ensure t
    :tags '("LANGUAGE")
    :config
    (setq auctex-latexmk-inherit-TeX-PDF-mode t)
    (auctex-latexmk-setup))

  (setq TeX-show-compilation nil)

  ;; Redine TeX-output-mode to get the color !
  (define-derived-mode TeX-output-mode TeX-special-mode "LaTeX Output"
    "Major mode for viewing TeX output.
    \\{TeX-output-mode-map} "
    :syntax-table nil
    (set (make-local-variable 'revert-buffer-function)
         #'TeX-output-revert-buffer)

    (set (make-local-variable 'font-lock-defaults)
         '((("^!.*" . font-lock-warning-face) ; LaTeX error
            ("^-+$" . font-lock-builtin-face) ; latexmk divider
            ("^\\(?:Overfull\\|Underfull\\|Tight\\|Loose\\).*" . font-lock-builtin-face)
            ;; .....
            )))

    ;; special-mode makes it read-only which prevents input from TeX.
    (setq buffer-read-only nil))
#+end_src

**** Preview
#+begin_src emacs-lisp
  (use-package xenops
    :ensure t
    :commands (xenops-mode xenops-doctor)
    :hook
    (latex-mode . xenops-mode))
#+end_src
**** TikZ/PGF
#+begin_src emacs-lisp
  (use-package tikz-mode
    :ensure straight
    :straight (tikz-mode :type git :host github :repo "seblemaguer/tikz-mode"))
#+end_src
*** Ledger
 #+begin_src emacs-lisp
   (use-package ledger-mode
     :ensure t
     :tags '("LANGUAGE")
     :mode ("\\.ledger$"))

   (use-package flycheck-ledger
     :ensure t
     :tags '("LANGUAGE")
     :after (flycheck ledger-mode))
 #+end_src

*** Lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :ensure t
    :tags '("LANGUAGE"))
#+end_src

*** Matlab
#+begin_src emacs-lisp
  (use-package matlab-load
    :ensure matlab-mode
    :tags '("LANGUAGE")
    :defines (matlab-shell-command-switches mlint-programs)
    :no-require t
    :mode ("\\.m$" . matlab-mode)
    :commands (matlab-shell)

    :config
    ;; (eval-after-load 'company
    ;;   '(add-to-list 'company-backends 'company-matlab))

    ;; (eval-after-load 'flycheck
    ;;   '(require 'flycheck-matlab-mlint)))

    ;; Command defines
    (setq matlab-shell-command-switches '("-nodesktop -nosplash")
          mlint-programs '("mlint" "glnxa64/mlint")))
#+end_src

*** Markdown
**** Global
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode ("\\.md$"))

  (use-package markdown-mode+
    :ensure t
    :tags '("LANGUAGE")
    :after markdown-mode)
#+end_src

**** Syntax highlight in block
#+begin_src emacs-lisp
  (use-package poly-markdown
    :ensure t
    :disabled t
    :tags '("LANGUAGE"))
#+end_src

**** Visualize GFM rendering
#+begin_src emacs-lisp
  (use-package grip-mode
    :ensure t
    :commands (grip-mode)
    :tags '("GUI")
    :bind (:map markdown-mode-command-map
           ("g" . grip-mode)))
#+end_src

*** Org
**** Global
#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :tags '("ORG")

    :config

    ;; Global
    (setq org-startup-indented t
          org-startup-folded t
          org-enforce-todo-dependencies t
          org-cycle-separator-lines 2
          org-blank-before-new-entry '((heading) (plain-list-item . auto))
          org-insert-heading-respect-content nil
          org-reverse-note-order nil
          org-show-following-heading t
          org-show-hierarchy-above t
          org-show-siblings '((default))
          org-id-method 'uuidgen
          org-deadline-warning-days 30
          org-table-export-default-format "orgtbl-to-csv"
          org-src-window-setup 'other-window
          org-clone-delete-id t
          org-cycle-include-plain-lists t
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-hide-emphasis-markers t
          org-global-properties '(("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                  ("STYLE_ALL" . "habit"))

          ;; Todo part
          org-todo-keywords '(;; Baseline sequence
                              (sequence "TODO(t)" "DELEGATED(e)" "EXEC_STARTED(S)" "IN PROCESS(s)"  "MEETING(M)" "WAITING(w)" "PAUSED(p)" "|" "DONE(d)" "CANCELLED(c@/!)" "POSTPONED(o@/!)")

                              ;; Specific "to complete"
                              (sequence "REVIEW(r)" "RELEASE(R)" "MAIL(m)" "|")

                              ;; Note information
                              (sequence "|" "NOTE(N)" "EVENT(E)" "MANDATORY(M)"))

          org-todo-state-tags-triggers '(("CANCELLED" ("CANCELLED" . t))
                                         ("POSTPONED" ("POSTPONED" . t)))

          ;; Priority definition
          org-highest-priority ?A
          org-lowest-priority ?E
          org-default-priority ?C

          ;; Archiving
          org-archive-mark-done t
          org-log-done 'time
          org-archive-location "%s_archive::* Archived Tasks"

          ;; Refiling
          org-refile-targets '((nil . (:maxlevel . 6))
                               (org-agenda-files . (:maxlevel . 6)))
          org-completion-use-ido nil
          org-refile-use-outline-path 'file
          org-outline-path-complete-in-steps nil
          org-refile-allow-creating-parent-nodes 'confirm))

    ;; FIXME: to sort !
    (use-package org-checklist :defer t)
    (use-package ob-exp :defer t)
    (use-package ox-bibtex :defer t)
    (use-package org-protocol :defer t)
#+end_src

**** Editing
***** Global
#+begin_src emacs-lisp
  (setq org-list-allow-alphabetical t
        org-highlight-latex-and-related '(latex)
        org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar"
        org-babel-results-keyword "results" ;; Display images directly in the buffer
        org-confirm-babel-evaluate nil
        org-startup-with-inline-images t)

  ;; Add languages
  (use-package jupyter
    :ensure t
    :tags '("ORG" "USER")
    :defer t
    :init
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((jupyter . t)))
    :config
    (org-babel-jupyter-override-src-block "python"))

  (org-babel-do-load-languages 'org-babel-load-languages
                               '((emacs-lisp . t)
                                 (dot . t)
                                 (ditaa . t)
                                 (R . t)
                                 (python . t)
                                 (ruby . t)
                                 (gnuplot . t)
                                 (clojure . t)
                                 (shell . t)
                                 (ledger . t)
                                 (org . t)
                                 (plantuml . t)
                                 (latex . t)))

                                          ; Define specific modes for specific tools
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+end_src

***** Yanking
#+begin_src emacs-lisp
  (use-package org-rich-yank
    :ensure t
    :tags '("ORG")
    :commands (org-rich-yank)
    :bind (:map org-mode-map ("C-M-y" . org-rich-yank)))
#+end_src

***** Id generations
#+begin_src emacs-lisp
  (use-package org-id+
    :straight (org-id+ :repo "seblemaguer/org-id-plus" :type git :host github)
    :commands (org-id+-add-ids-to-headlines-in-file)
    :tags '("ORG"))
#+end_src

***** Latex toggle fragment
 #+begin_src emacs-lisp
  (use-package org-fragtog
    :ensure t
    :tags '("ORG")
    :hook
    (org-mode . org-fragtog-mode))
#+end_src

**** Exporting
***** HTML
#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t
    :tags '("ORG"))

  (use-package ox-html
    :after ox
    :requires (htmlize)
    :functions (endless/export-audio-link endless/export-video-link)
    :tags '("ORG")
    :config
    (setq org-html-xml-declaration '(("html" . "")
                                     ("was-html" . "<?xml version=\"1.0\" encoding=\"%s\"?>")
                                     ("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>"))
          org-export-html-inline-images t
          org-export-with-sub-superscripts nil
          org-export-html-style-extra "<link rel=\"stylesheet\" href=\"org.css\" type=\"text/css\" />"
          org-export-html-style-include-default nil
          org-export-htmlize-output-type 'css ; Do not generate internal css formatting for HTML exports
          )

    (defun endless/export-audio-link (path desc format)
      "Export org audio links to hmtl."
      (cl-case format
        (html (format "<audio src=\"%s\" controls>%s</audio>" path (or desc "")))))
    (org-link-set-parameters "audio" :ignore #'endless/export-audio-link)

    (defun endless/export-video-link (path desc format)
      "Export org video links to hmtl."
      (cl-case format
        (html (format "<video controls src=\"%s\">%s</video>" path (or desc "")))))
    (org-link-set-parameters "video" :ignore #'endless/export-video-link)

    (add-to-list 'org-file-apps '("\\.x?html?\\'" . "/usr/bin/firefox %s")))

  (use-package ox-reveal
    :ensure t
    :tags '("ORG")
    :requires (ox-html htmlize))
#+end_src

***** LaTeX
#+begin_src emacs-lisp
  (use-package ox-latex
    :tags '("ORG")
    :after ox
    :config
    (setq org-latex-listings t
          org-export-with-LaTeX-fragments t
          org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f")))
#+end_src

***** Beamer
#+begin_src emacs-lisp
  (use-package ox-beamer
    :tags '("ORG")
    :after ox)
#+end_src

***** Docbook
#+begin_src emacs-lisp
(setq org-export-docbook-xsl-fo-proc-command "fop %s %s"
      org-export-docbook-xslt-proc-command "xsltproc --output %s /usr/share/xml/docbook/stylesheet/nwalsh/fo/docbook.xsl %s")
#+end_src

***** Markdown
#+begin_src emacs-lisp
  (use-package ox-gfm
      :ensure t
      :tags '("ORG")
      :after ox
      :config (require 'ox-gfm))
#+end_src

***** Pandoc
#+begin_src emacs-lisp
  (use-package ox-pandoc
    :ensure t
    :tags '("ORG")
    :disabled t
    :defines (org-pandoc-options-for-docx org-pandoc-options-for-beamer-pdf org-pandoc-options-for-latex-pdf)
    :config
    ;; default options for all output formats
    (setq org-pandoc-options '((standalone . t))
          ;; cancel above settings only for 'docx' format
          org-pandoc-options-for-docx '((standalone . nil))
          ;; special settings for beamer-pdf and latex-pdf exporters
          org-pandoc-options-for-beamer-pdf '((pdf-engine . "xelatex"))
          org-pandoc-options-for-latex-pdf '((pdf-engine . "xelatex"))))
#+end_src

**** Querying
It is useful to find some items in org files based on a query.
#+begin_src emacs-lisp
  (use-package org-ql
    :ensure t)
#+end_src

*** PDF
**** Global
  #+begin_src emacs-lisp
    (use-package pdf-tools
      :ensure t
      :tags '("DOCUMENT" "GUI")
      :functions
      (pdf-history-backward
       pdf-history-forward
       pdf-links-action-perfom
       pdf-links-isearch-link
       pdf-view-enlarge
       pdf-view-shrink
       pdf-view-scale-reset
       pdf-view-fit-height-to-window
       pdf-view-fit-width-to-window
       pdf-view-fit-page-to-window
       pdf-view-next-page-command
       pdf-view-previous-page-command
       pdf-view-dark-minor-mode)

      :hook
      (pdf-view-mode . (lambda ()
                         (pdf-misc-size-indication-minor-mode)
                         (pdf-links-minor-mode)
                         (pdf-isearch-minor-mode)
                         (cua-mode 0)))

      :bind
      (:map pdf-view-mode-map
            ("/" . pdf-tools-hydra/body)
            ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
            ("<C-s>" . isearch-forward)
            ("g"  . pdf-view-first-page)
            ("G"  . pdf-view-last-page)
            ("l"  . image-forward-hscroll)
            ("h"  . image-backward-hscroll)
            ("j"  . pdf-view-next-page)
            ("k"  . pdf-view-previous-page)
            ("e"  . pdf-view-goto-page)
            ("u"  . pdf-view-revert-buffer)
            ("al" . pdf-annot-list-annotations)
            ("ad" . pdf-annot-delete)
            ("aa" . pdf-annot-attachment-dired)
            ("am" . pdf-annot-add-markup-annotation)
            ("at" . pdf-annot-add-text-annotation)
            ("y"  . pdf-view-kill-ring-save)
            ("i"  . pdf-misc-display-metadata)
            ("s"  . pdf-occur)
            ("b"  . pdf-view-set-slice-from-bounding-box)
            ("r"  . pdf-view-reset-slice))

      :pretty-hydra
      ((:color blue :hint nil)
       ("Move"
        (("g" pdf-view-first-page "First")
         ("G" pdf-view-last-page "Last")
         ("p" pdf-view-previous-page-command "Previous" :color red)
         ("n" pdf-view-next-page-command "Next ":color red)
         ("e" pdf-view-goto-page "Page")
         ("h" image-backward-hscroll "Scroll left" :color red)
         ("l" image-forward-hscroll "Scroll right" :color red))

        "History"
        (("B" pdf-history-backward "Backward" :color red)
         ("N" pdf-history-forward "Forward" :color red))

        "Scale/Fit"
        (("+" pdf-view-enlarge "Enlarge" :color red)
         ("-" pdf-view-shrink "Shrink" :color red)
         ("0" pdf-view-scale-reset "Reset")
         ("H" pdf-view-fit-height-to-window "Fit height")
         ("W" pdf-view-fit-width-to-window "Fit width")
         ("P" pdf-view-fit-page-to-window "Fit page")
         ("b" pdf-view-set-slice-from-bounding-box "Set slice from bounding box")
         ("r" pdf-view-reset-slice "Reset slice"))

        "Annotations"
        (("al" pdf-annot-list-annotations "List")
         ("am" pdf-annot-add-markup-annotation "Markup")
         ("at" pdf-annot-add-text-annotation "Text")
         ("ad" pdf-annot-delete "Delete")
         ("aa" pdf-annot-attachment-dired "Dired")
         ("y"  pdf-view-kill-ring-save "Yank"))

        "Search/Link"
        (("s" pdf-occur "Search")
         ("o" pdf-outline "Outline")
         ("F" pdf-links-action-perfom "Link")
         ("f" pdf-links-isearch-link "Search link"))

        "Do"
        (("d" pdf-view-dark-minor-mode "Dark mode")
         ("i" pdf-misc-display-metadata "Info")
         ("u" pdf-view-revert-buffer "Revert buffer"))))

      :magic ("%PDF" . pdf-view-mode)

      :config
      ;; Install what need to be installed !
      (pdf-tools-install t t t)

      ;; open pdfs scaled to fit page
      (setq-default pdf-view-display-size 'fit-page)

      ;; automatically annotate highlights
      (setq pdf-annot-activate-created-annotations t)

      ;; more fine-grained zooming
      (setq pdf-view-resize-factor 1.1))

    (use-package pdf-view-restore
      :ensure t
      :after pdf-tools
      :tags '("DOCUMENT" "GUI")
      :hook
      (pdf-view-mode-hook . pdf-view-restore-mode))
  #+end_src

**** Grepping
#+begin_src emacs-lisp
  (use-package pdfgrep
    :ensure t
      :tags '("DOCUMENT" "GUI")
    :config
    (pdfgrep-mode))
#+end_src

**** COMMENT Org specific
  #+begin_src emacs-lisp
    (use-package org-pdfview
      :ensure t
      :tags '("LANGUAGE" "GUI")
      :config

      (add-to-list 'org-file-apps
                   '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link)))))
  #+end_src

*** Perl
#+begin_src emacs-lisp
  (use-package cperl-mode
    :tags '("LANGUAGE")
    :defines (compile-dwim-check-tools)
    :config
    (defalias 'perl-mode 'cperl-mode)
    (cperl-set-style "BSD")

    ;; Documentation
    (cperl-lazy-install)
    (setq cperl-lazy-help-time 2)

    ;; Folding
    (add-hook 'cperl-mode-hook 'hs-minor-mode)

    ;; Interactive shell
    (autoload 'run-perl "inf-perl" "Start perl interactive shell" t)

    ;; Debugger
    (autoload 'perldb-ui "perldb-ui" "perl debugger" t)

    ;; Executable perl
    (when (and buffer-file-name
               (not (string-match "\\.\\(pm\\|pod\\)$" (buffer-file-name))))
      (add-hook 'after-save-hook 'executable-chmod nil t))
    (set (make-local-variable 'compile-dwim-check-tools) nil))
#+end_src

*** Praat
#+begin_src emacs-lisp
  (use-package praat-mode
    :tags '("LANGUAGE")
    :mode ("\\.praat" "\\.[tT][Gg]"))
#+end_src

*** Python
**** Global configuration
#+begin_src emacs-lisp
  (use-package python
    :tags '("LANGUAGE")
    :mode
    ("\\.py\\'" . python-mode)
    ("\\.wsgi$" . python-mode)

    :init
    (setq-default indent-tabs-mode nil)

    :config
    (setq python-indent-offset 4
          python-shell-interpreter "ipython"
          python-shell-interpreter-args "--simple-prompt -i"))
#+end_src

**** Lsp
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :ensure t
    :commands (lsp lsp-deferred)
    :tags '("LANGUAGE" "IDE")
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp))))
#+end_src

**** Pipenv
#+begin_src emacs-lisp
  (use-package pipenv
    :ensure t
    :tags '("LANGUAGE")
    :hook
    ((python-mode . pipenv-mode))

    :init
    (setq pipenv-projectile-after-switch-function
          #'pipenv-projectile-after-switch-extended))
#+end_src

**** Conda
#+begin_src emacs-lisp
  (use-package conda
    :ensure t
    :tags '("LANGUAGE")
    :init
    (setq conda-anaconda-home (expand-file-name "~/environment/local/miniconda3"))

    (defun conda-hook ()
      "Conda activation hook for python mode."
      (setq conda-message-on-environment-switch nil)
      (conda-env-autoactivate-mode t))

    :hook
    (python-mode . conda-hook)

    :config
    ;; If you want interactive shell support, include:
    (conda-env-initialize-interactive-shells)

    ;; If you want eshell support, include:
    (conda-env-initialize-eshell))
#+end_src

**** Interpreter configuration
#+begin_src emacs-lisp
  (use-package ein
    :ensure t
    :tags '("LANGUAGE")
    :config

    (cond
     ((eq system-type 'darwin) (setq ein:console-args '("--gui=osx" "--matplotlib=osx" "--colors=Linux")))
     ((eq system-type 'gnu/linux) (setq ein:console-args '("--gui=gtk3" "--matplotlib=gtk3" "--colors=Linux"))))

    (setq ein:query-timeout 1000))
#+end_src

**** Sphinx documentation
#+begin_src emacs-lisp
  (use-package sphinx-doc
    :ensure t
    :tags '("LANGUAGE")
    :hook
    (python-mode . (lambda () (sphinx-doc-mode t))))
#+end_src

*** R
**** ESS configuration
#+begin_src emacs-lisp
  ;; ESS for R programming
  (use-package ess
    :ensure t
    :tags '("LANGUAGE")
    :config
    (setq ess-default-style 'RRR+))

  (use-package ess-smart-underscore
    :ensure t
    :tags '("LANGUAGE")
    :disabled t
    :after ess)

  (use-package ess-view
    :ensure t
    :tags '("LANGUAGE")
    :commands (ess-view-mode)
    :after ess)
#+end_src

**** Support drag & drop
#+begin_src emacs-lisp
  (use-package extend-dnd
    :ensure t
    :tags '("LANGUAGE")
    :config
    (extend-dnd-activate))
#+end_src

*** Shell
**** Completion
#+begin_src emacs-lisp
  (use-package company-shell
    :ensure t
    :tags '("LANGUAGE")
    ;; :compdef (sh-mode eshell-mode)
    ;; :company (company-shell company-shell-env company-fish-shell)
    :hook
    (shell-mode . company-shell-hook)

    :init
    (defun company-shell-hook ()
      (make-local-variable 'company-backends)
      (set 'company-backends (append '(company-shell company-shell-env company-fish-shell) company-backends))))
#+end_src
**** Modern helpers
#+begin_src emacs-lisp
  (use-package modern-sh
    :ensure t
    :disabled t
    :hook (sh-mode . embed-modern-sh-mode-toggle)
    :bind
    (:map modern-sh-mode-map
          ("C-<f6>"  . modern-sh-menu))
    :init
    (defun embed-modern-sh-mode-toggle ()
        (when (buffer-file-name)
          (modern-sh-mode))))
#+end_src
*** PlantUML
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :ensure t
    :tags '("LANGUAGE")
    :after org
    :mode ("\\.plantuml\\'")
    :config
    (setq plantuml-jar-path "/opt/plantuml/plantuml.jar"
          org-plantuml-jar-path plantuml-jar-path))
#+end_src

*** Web configuration
**** Global web configuration
#+begin_src emacs-lisp
    (use-package web-mode
      :ensure t
      :tags '("LANGUAGE")
      :mode
      (
       ".twig$"
       ".html?$"
       ".hbs$"
       ".vue$"
       ".php$"
       ".tpl$"
       ".mustache$"
       )
      :init
      (setq web-mode-code-indent-offset 2
            web-mode-css-indent-offset 2
            web-mode-enable-auto-closing t
            web-mode-enable-auto-expanding t
            web-mode-enable-auto-indentation t
            web-mode-enable-auto-opening t
            web-mode-enable-auto-pairing t
            web-mode-enable-css-colorization t
            web-mode-markup-indent-offset 2)

      :config
      ;; Template
      (setq web-mode-engines-alist
            '(("php"    . "\\.phtml\\'")
              ("blade"  . "\\.blade\\."))
            )

      )

    (use-package web-beautify
      :ensure t
      :tags '("LANGUAGE")
      :commands (web-beautify-css
                 web-beautify-css-buffer
                 web-beautify-html
                 web-beautify-html-buffer
                 web-beautify-js
                 web-beautify-js-buffer))

    (use-package web-completion-data
      :ensure t
      :tags '("LANGUAGE"))

    (use-package web-mode-edit-element
      :ensure t
      :tags '("LANGUAGE"))
#+end_src

**** EMMET
#+begin_src emacs-lisp
  (use-package emmet-mode
    :ensure t
    :tags '("LANGUAGE")
    :diminish (emmet-mode . "Îµ")
    :bind* (("C-)" . emmet-next-edit-point)
            ("C-(" . emmet-prev-edit-point))
    :commands (emmet-mode
               emmet-next-edit-point
               emmet-prev-edit-point)
    :hook
    ((sgml-mode-hook . emmet-mode)
     (html-mode . emmet-mode)
     (web-mode . emmet-mode))
    :init
    (setq emmet-indentation 2
          emmet-move-cursor-between-quotes t))
#+end_src

**** Completion
#+begin_src emacs-lisp
  (use-package company-web
    :ensure t
    :tags '("LANGUAGE")
    ;; :compdef web-mode
    ;; :company company-web-html
    :hook
    (web-mode . company-web-hook)

    :init
    (defun company-web-hook ()
      (make-local-variable 'company-backends)
      (set 'company-backends (append '(company-web-html) company-backends))))
#+end_src

**** Javascript
***** Global
#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode
    ("\\.js\\'")
    :hook
    (js2-mode . js2-imenu-extras-mode))

  (use-package js2-refactor
    :ensure t
    :tags '("LANGUAGE")
    :hook
    (js2-mode . js2-refactor-mode)

    :commands (js2-refactor-mode js2-refactor-hydra/body)
    :pretty-hydra
    ((:color blue :hint nil)
     ("Functions"
      (("ef" js2r-extract-function)
       ("em" js2r-extract-method)
       ("lp" js2r-localize-parameter)
       ("ip" js2r-introduce-parameter)
       ("tf" js2r-toggle-function-expression-and-declaration)
       ("ta" js2r-toggle-arrow-function-and-expression)
       ("ao" js2r-arguments-to-object))

      "Variables"
      (("ev" js2r-extract-var)
       ("iv" js2r-inline-var)
       ("rv" js2r-rename-var)
       ("vt" js2r-var-to-this)
       ("ag" js2r-add-to-globals-annotation)
       ("ti" js2r-ternary-to-if)
       ("sv" js2r-split-var-declaration))

      "Buffer"
      (("wi" js2r-wrap-buffer-in-iife)
       ("ig" js2r-inject-global-in-iife)
       ("ee" js2r-expand-node-at-point)
       ("cc" js2r-contract-node-at-point)
       ("uw" js2r-unwrap))

      "Sexp"
      (("k" js2r-kill)
       ("ss" js2r-split-string)
       ("sl" js2r-forward-slurp)
       ("ba" js2r-forward-barf))

      "Debugging"
      (("lt" js2r-log-this)
       ("dt" js2r-debug-this))
      ))

    :config
    (js2r-add-keybindings-with-prefix "C-c C-r")
    (define-key js2-mode-map (kbd "C-k") #'js2r-kill)

    ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
    ;; unbind it.
    (define-key js-mode-map (kbd "M-.") nil))

  (use-package xref-js2
    :ensure t
    :tags '("LANGUAGE")
    :disabled t
    :hook
    (js2-mode . (lambda () (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))

  (use-package indium
    :ensure t
    :tags '("LANGUAGE")
    :diminish indium-interaction-mode
    :defer t
    :hook
    (js2-mode . #'indium-interaction-mode)

    :config
    (setq indium-update-script-on-save t))

  (use-package gulp-task-runner
    :ensure t
    :tags '("LANGUAGE")
    :commands (gulp))

  (use-package js-auto-beautify
    :ensure t
    :tags '("LANGUAGE"))

  (use-package js-import
    :ensure t
    :tags '("LANGUAGE"))
#+end_src

***** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode
    ("\\.json$"))

  ;; Subpackage
  (use-package json-reformat
    :ensure t
    :tags '("LANGUAGE"))
#+end_src

***** AngularJS
Extracted from https://github.com/zakame/emacs-for-javascript
#+begin_src emacs-lisp
  (use-package react-snippets
    :ensure t
    :tags '("LANGUAGE"))

  (use-package angular-mode
    :ensure t
    :tags '("LANGUAGE"))

  (use-package angular-snippets
    :ensure t
    :tags '("LANGUAGE")
    :config
    (eval-after-load "web-mode"
      '(bind-key "C-c C-d" 'ng-snip-show-docs-at-point web-mode-map)))
#+end_src

***** Nodenv
#+begin_src emacs-lisp
  (use-package nodenv
    :ensure t
    :tags '("LANGUAGE")
    :disabled t
    :hook
    (js-mode . #'nodenv-mode))
#+end_src

***** Some helpers
#+begin_src emacs-lisp
  (defun grunt-serve ()
    "Spawns 'grunt serve' process"
    (interactive)
    ;; Set dynamic config for process.
    ;; Variables below are applied only to particular process
    (let* ((bpr-scroll-direction 1) (bpr-show-progress nil))
      (bpr-spawn "$(npm bin)/grunt serve --color")
      (bpr-open-last-buffer)))
#+end_src

*** XML
#+begin_src emacs-lisp
  (use-package nxml-mode
    :tags '("LANGUAGE")
    :mode ("\\.xml$" . nxml-mode)
    :commands (pretty-print-xml-region)
    :init
    ;; Mapping xml to nxml
    (fset 'xml-mode 'nxml-mode)

    :hook
    (nxml-mode . (lambda ()
                   (outline-minor-mode)
                   (setq outline-regexp "^[ \t]*\<[a-zA-Z]+")))
    :config

    ;; Global configuration
    (setq nxml-child-indent 2
          nxml-auto-insert-xml-declaration-flag t
          nxml-slash-auto-complete-flag t
          nxml-bind-meta-tab-to-complete-flag t)

    ;; Helper to format
    (defun pretty-print-xml-region (begin end)
      "Pretty format XML markup in region. You need to have nxml-mode
  http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
  this.  The function inserts linebreaks to separate tags that have
  nothing but whitespace between them.  It then indents the markup
  by using nxml's indentation rules."
      (interactive "r")
      (save-excursion
        (nxml-mode)
        (goto-char begin)
        (while (search-forward-regexp "\>[ \\t]*\<" nil t)
          (backward-char) (insert "\n"))
        (indent-region begin end))))
#+end_src

* Writing
** Biblio
This part focus on bibliography/library configuration. The goal is to have a global configuration to
organize read papers or "to read" papers. This is mainly based on https://codearsonist.com/reading-for-programmers
#+begin_src emacs-lisp
  (use-package ivy-bibtex
    :ensure t
    :tags '("PRODUCTION" "USER")
    :config
    (setq ivy-bibtex-bibliography "~/shared/pCloudDrive/org/work/biblio/index.bib" ;; where your references are stored
          ivy-bibtex-library-path "~/shared/pCloudDrive/org/work/biblio/lib/" ;; where your pdfs etc are stored
          ivy-bibtex-notes-path "~/shared/pCloudDrive/org/work/biblio/index.org" ;; where your notes are stored
          bibtex-completion-bibliography "~/shared/pCloudDrive/org/work/biblio/index.bib" ;; writing completion
          bibtex-completion-notes-path "~/shared/pCloudDrive/org/work/biblio/index.org"))

  (use-package org-ref
    :ensure t
    :tags '("ORG" "USER")
    :hook
    (org-export-before-parsing . orcp-citeproc)
    :init
    (setq org-ref-completion-library 'org-ref-ivy-cite
          org-ref-notes-directory "~/shared/pCloudDrive/org/work/biblio"
          org-ref-bibliography-notes "~/shared/pCloudDrive/org/work/biblio/index.org"
          org-ref-default-bibliography '("~/shared/pCloudDrive/org/work/biblio/index.bib")
          org-ref-pdf-directory "~/shared/pCloudDrive/org/work/biblio/lib/"))

  (use-package org-noter
    :ensure t
    :tags '("ORG" "USER")
    :bind ("C-x i" . org-noter)
    :config
    (setq org-noter-property-doc-file "INTERLEAVE_PDF"
          org-noter-property-note-location "INTERLEAVE_PAGE_NOTE"))

  (use-package gscholar-bibtex
    :ensure t
    :tags '("WRITING" "CONNECTED")
    :commands (gscholar-bibtex)
    )
#+end_src

** Inspiration helpers
As I write papers, it is useful to have some helper to start to have the inspiration.
#+begin_src emacs-lisp
  (use-package academic-phrases
    :ensure t
    :tags '("WRITING" "CONNECTED"))

  (use-package mw-thesaurus
    :ensure straight
    :straight (mw-thesaurus :type git :fetcher github :repo "agzam/mw-thesaurus.el")
    :commands (mw-thesaurus-lookup-at-point))
#+end_src

** Grammar checking
*** For english
#+begin_src emacs-lisp
  (use-package grammarly
    :ensure t
    :tags '("WRITING" "CONNECTED"))
#+end_src

*** For french
#+begin_src emacs-lisp
  (use-package flycheck-grammalecte
    :ensure t
    :disabled t
    :tags '("WRITING"))
#+end_src
** Translation
*** WordReference
#+begin_src emacs-lisp
  (use-package wordreference
    :load-path default-plugin-dir
    :commands (wordreference wordreference-at-point))
#+end_src
*** Google
#+begin_src emacs-lisp
  (use-package go-translate
    :ensure t
    :bind (("\C-ct" . go-translate)
           ("\C-cT" . go-translate-popup))
    :config
    (setq go-translate-local-language "en"
          go-translate-target-language "fr"
          go-translate-extra-directions '(("bg" . "en")
                                          ("en" . "bg")
                                          ("en" . "fr"))
          go-translate-buffer-follow-p t))
#+end_src
* "Entertainment"
** Communication
*** Mail
**** TTLS
  #+begin_src emacs-lisp
    (use-package starttls
      :tags '("CONNECTED")
      :if (< emacs-major-version 27)
      :config
      (setq starttls-use-gnutls t
            starttls-gnutls-program "gnutls-cli"
            starttls-extra-arguments '("--insecure")
            auth-sources '("~/.authinfo.gpg")))

  #+end_src

**** Message composition
#+begin_src emacs-lisp
  (use-package message
    :tags '("REQUIRES_CONNECTION" "MAIL")
    :hook
    (message-setup . (lambda () (footnote-mode t)))

    :config
    (setq message-auto-save-directory nil
          message-citation-line-function 'message-insert-formatted-citation-line
          message-citation-line-format  "\n\n-----------------------\nOn %a, %b %d %Y (%-H:%M %Z), %N wrote:\n"
          message-sendmail-f-is-evil nil
          message-kill-buffer-on-exit t
          message-signature-file (format "%s/third_parties/mail/signature" user-emacs-directory)
          message-fill-column 100)
    )
#+end_src

**** Composing/Sending
***** SMTP configuration
  #+begin_src emacs-lisp
    (use-package smtpmail-multi
      :ensure t
      :tags '("REQUIRES_CONNECTION" "MAIL")
      :config
      ;; Get account informations from private file
      (when (fboundp 'set-smtpmail-multi-accounts)
        (set-smtpmail-multi-accounts))

      ;; Define default environment
      (setq user-full-name "SÃ©bastien Le Maguer"
            smtpmail-multi-default-account 'tcd
            message-send-mail-function 'smtpmail-multi-send-it
            mail-host-address "tcd.ie"

            ;; Debug part
            smtpmail-debug-info nil
            smtpmail-debug-verbose nil)
      )
  #+end_src
***** HTML Composing
#+begin_src emacs-lisp
  (use-package org-mime
    :ensure t
    :commands (mu4e-compose-new)
    :hook
    (org-ctrl-c-ctrl-c . htmlize-and-send)

    :config
    (defun htmlize-and-send ()
      "When in an org-mu4e-compose-org-mode message, htmlize and send it."
      (interactive)
      (when (member 'org~mu4e-mime-switch-headers-or-body post-command-hook)
        (org-mime-htmlize)
        (message-send-and-exit))))
#+end_src
***** Checking attachment
#+begin_src emacs-lisp
  (use-package message-attachment-reminder
    :ensure t
    :commands (message-attachment-reminder-warn-if-no-attachments)
    :hook
    (message-send . message-attachment-reminder-warn-if-no-attachments))
#+end_src
**** Mu4e
***** Global
#+begin_src emacs-lisp
  (use-package mu4e
    :tags '("REQUIRES_CONNECTION" "MAIL")
    :commands (mu4e)
    :load-path "~/environment/local/share/emacs/site-lisp/mu4e"
    :pretty-hydra
    ((:color blue :hint nil)
     ("General"
      (("n" mu4e-headers-next "Next")
       ("p" mu4e-headers-previous "Previous")
       ("[" mu4e-select-next-unread "Next unred")
       ("]" mu4e-select-previous-unread "Previous unred")
       ("y" mu4e-select-other-view "Switch view")
       ("R" mu4e-compose-reply "Reply")
       ("C" mu4e-compose-new "Compose")
       ("F" mu4e-compose-forward "Forward")
       ("o" my/org-capture-mu4e "Org capture"))                  ; differs from built-in

      "Search"
      (("s" mu4e-headers-search "Search")
       ("S" mu4e-headers-search-edit "Edit prev. query")
       ("/" mu4e-headers-search-narrow "Narrow search")
       ("b" mu4e-headers-search-bookmark "Search bookmark")
       ("B" mu4e-headers-search-bookmark-edit "Edit bookmark")
       ("{" mu4e-headers-query-prev "Previous query")              ; differs from built-in
       ("}" mu4e-headers-query-next "Next query")              ; differs from built-in
       ("C-+" mu4e-headers-split-view-grow "Show more")
       ("C--" mu4e-headers-split-view-shrink "Show less"))

      "Mark"
      (("!" mu4e-headers-mark-for-read "Read")
       ("?" mu4e-headers-mark-for-unread "Unread")
       ("r" mu4e-headers-mark-for-refile "Refile")
       ("u" mu4e-headers-mark-for-unmark "Unmark")
       ("U" mu4e-mark-unmark-all "Unmark *")
       ("d" mu4e-headers-mark-for-trash "Trash")
       ("D" mu4e-headers-mark-for-delete "Delete")
       ("m" mu4e-headers-mark-for-move "Move")
       ("a" mu4e-headers-action "Action")                  ; not really a mark per-se
       ("A" mu4e-headers-mark-for-action "Mark for action")         ; differs from built-in
       ("*" mu4e-headers-mark-for-something "*thing")

       ("#" mu4e-mark-resolve-deferred-marks "Deferred")
       ("%" mu4e-headers-mark-pattern "Pattern")
       ("&" mu4e-headers-mark-custom "Custom")
       ("+" mu4e-headers-mark-for-flag "Flag")
       ("-" mu4e-headers-mark-for-unflag "Unflag")
       ("t" mu4e-headers-mark-subthread "Subthread")
       ("T" mu4e-headers-mark-thread "Thread"))

      "Miscellany"
      (("q" mu4e~headers-quit-buffer "Quit")
       ("H" mu4e-display-manual "Help")
       ("|" mu4e-view-pipe "Through shell")                       ; does not seem built-in any longer
       ("`" mu4e-update-mail-and-index "Update")           ; differs from built-in
       (";" mu4e-context-switch "Switch context")
       ("j" mu4e~headers-jump-to-maildir "Jump to maildir"))

      "Switches"
      (("O" mu4e-headers-change-sorting "Sorting")
       ("P" mu4e-headers-toggle-threading "Threading")
       ("Q" mu4e-headers-toggle-full-search "Full searching")
       ("V" mu4e-headers-toggle-skip-duplicates "Skip dups")
       ("W" mu4e-headers-toggle-include-related "Include related"))))

    :bind
    (([f2] . mu4e)

     :map mu4e-headers-mode-map
     ("|" . mu4e-view-pipe)
     ("." . mu4e-hydra/body)

     :map mu4e-main-mode-map
     ("u" . mu4e-update-mail-and-index)

     :map message-mode-map
     ("C-c C-a" . mail-add-attachment))

    :hook
    (mu4e-compose-mode . format-hook-message)

    :custom
    ;; File management
    (mu4e-maildir "~/mail")
    (mu4e-attachment-dir "~/Downloads")
    (mu4e-change-filenames-when-moving t)

    ;; User interaction
    (mail-user-agent 'mu4e-user-agent)
    (mu4e-compose-forward-as-attachment t)
    (mu4e-hide-index-messages t)
    (mu4e-compose-context-policy 'ask-if-none)
    (mu4e-confirm-quit nil)
    (mu4e-compose-dont-reply-to-self t)
    (mu4e-update-interval nil)

    ;; Gui
    (mu4e-view-show-addresses t)
    (mu4e-view-show-images t)
    (mu4e-view-use-gnus t)
    (mu4e-use-fancy-chars t)

    ;; headers
    (mu4e-headers-date-format "%a %d %b %Y")
    (mu4e-headers-time-format "%H:%M:%S")
    (mu4e-headers-fields      '((:human-date    .  18)
                                (:size          .   6)
                                (:flags         .   6)
                                (:mailing-list  . 10)
                                (:from          .  22)
                                (:subject       .  nil)))

    :config
    (defun mu4e-eaf-wrapper (msg)
      "Wrapper to be able to add `eaf-open-mail-as-html' in `mu4e-view-actions'."
      (eaf-open-mail-as-html))

    (add-to-list 'mu4e-view-actions
                 '("ViewHTML" . mu4e-eaf-wrapper) t)

    ;; use imagemagick, if available
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))

    (defun format-hook-message ()
      "Specify some formatting rules for email message writing."
      ;; (set-fill-column 100)
      (auto-fill-mode 0)
      (visual-fill-column-mode)
      (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
      (visual-line-mode))

    (defun mu4e~headers-line-apply-flag-face (msg line)
      line)

    (defun mu4e~headers-field-apply-basic-properties (msg field val width)
      (case field
        (:subject
         (propertize
          (concat
           (mu4e~headers-thread-prefix (mu4e-message-field msg :thread))
           (truncate-string-to-width val 600))
          'face
          (let ((flags (mu4e-message-field msg :flags)))
            (cond
             ((memq 'trashed flags) 'mu4e-trashed-face)
             ((memq 'draft flags) 'mu4e-draft-face)
             ((or (memq 'unread flags) (memq 'new flags))
              'mu4e-unread-face)
             ((memq 'flagged flags) 'mu4e-flagged-face)
             ((memq 'replied flags) 'mu4e-replied-face)
             ((memq 'passed flags) 'mu4e-forwarded-face)
             (t 'mu4e-header-face)))))
        (:thread-subject
         (propertize
          (mu4e~headers-thread-subject msg)
          'face 'font-lock-doc-face))
        ((:maildir :path :message-id) val)
        ((:to :from :cc :bcc)
         (propertize
          (mu4e~headers-contact-str val)
          'face 'font-lock-function-name-face))
        (:from-or-to (mu4e~headers-from-or-to msg))
        (:date
         (propertize
          (format-time-string mu4e-headers-date-format val)
          'face 'font-lock-string-face))
        (:mailing-list (mu4e~headers-mailing-list val))
        (:human-date
         (propertize
          (mu4e~headers-human-date msg)
          'help-echo (format-time-string
                      mu4e-headers-long-date-format
                      (mu4e-msg-field msg :date))
          'face 'font-lock-string-face))
        (:flags
         (propertize (mu4e~headers-flags-str val)
                     'help-echo (format "%S" val)
                     'face 'font-lock-type-face))
        (:tags
         (propertize
          (mapconcat 'identity val ", ")
          'face 'font-lock-builtin-face))
        (:size (mu4e-display-size val))
        (t (mu4e~headers-custom-field msg field))))
    )
#+end_src

***** Context (mailboxes separation)
#+begin_src emacs-lisp
  (use-package mu4e-context
    :after mu4e
    :tags '("REQUIRES_CONNECTION" "MAIL")
    :config
    ;; Define the contexts (configuration defined in a private file)
    (when (fboundp 'set-mu4e-contexts)
      (set-mu4e-contexts))

    ;; Adapt the environment
    (setq mu4e-context-policy 'pick-first
          ;; mu4e-compose-context-policy nil

          mu4e-user-mail-address-list (delq nil
                                            (mapcar (lambda (context)
                                                      (when (mu4e-context-vars context)
                                                        (cdr (assq 'user-mail-address (mu4e-context-vars context)))))
                                                    mu4e-contexts))))
#+end_src

***** Notification
#+begin_src emacs-lisp
  (use-package mu4e-alert
    :ensure t
    :after (sauron-mode-line)
    :tags '("REQUIRES_CONNECTION" "MAIL" "NOTIFICATION")
    :config
    ;; Just notify the counting
    (setq mu4e-alert-email-notification-types '(count))

    ;; Set the style to sauron
    (mu4e-alert-set-default-style 'sauron-mode-line-style)

    ;; Enable everything!
    (mu4e-alert-enable-notifications)
    (mu4e-alert-enable-mode-line-display))
#+end_src

***** Integration with org-mode
#+begin_src emacs-lisp
  (use-package org-mu4e
    :after mu4e
    :tags '("REQUIRES_CONNECTION" "MAIL"))
#+end_src

*** Chat
**** IRC
***** Global
#+begin_src emacs-lisp
  (use-package erc
    :ensure t
    :tags '("CONNECTED" "CHAT" "ERC")
    :commands (erc)
    :hook
    (erc-mode . erc-format-buffer)

    :preface
    (defun my-irc-password (server)
      "Return the password for the `SERVER'."
      (my:auth-source-get-passwd :host server))

    (defun erc-format-buffer ()
      "Function to be hooked with any erc buffer to apply a dedicated format"
      (erc-truncate-mode t)
      (erc-fill-disable)
      (set (make-local-variable 'scroll-conservatively) 1000)
      (visual-line-mode))

    :custom
    (erc-autojoin-channels-alist '(
                                   ;; ("freenode.net" "#emacs" "#latex" "#org-mode")
                                   ("gitter.im"
                                    "#linux-surface/support" "#linux-surface/community"
                                    "#magit/magit" "#scimax/community" "#emacs-lsp/lsp-mode")))
    (erc-autojoin-timing 'ident)
    (erc-prompt-for-nickserv-password nil)

    ;; Reconnection
    (erc-server-reconnect-attempts 5)
    (erc-server-reconnect-timeout 3)
    (erc-lurker-threshold-time 43200)

    ;; Exclusion
    (erc-hide-list '("JOIN" "PART" "QUIT"))
    (erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
    (erc-track-exclude-types '("JOIN" "MODE" "NICK" "PART" "QUIT"
                               "324" "329" "332" "333" "353" "477"))

    ;; Formatting
    (erc-interpret-mirc-color t)
    (erc-timestamp-format "[%H:%M] ")
    (erc-fill-prefix "      ")
    (erc-insert-timestamp-function 'erc-insert-timestamp-left)

    :config
    (erc-track-minor-mode 1)
    (erc-track-mode 1)
    (erc-services-mode 1)

    ;; Reload plugins
    (erc-update-modules)
    )
#+end_src

***** Some useful plugins
#+begin_src emacs-lisp
  (use-package erc-gitter
    :straight (erc-gitter :type git :host github :repo "jleechpe/erc-gitter")
    :tags '("CONNECTED" "CHAT" "ERC"))

  (use-package erc-colorize
    :ensure t
    :tags '("CONNECTED" "CHAT" "ERC"))

  (use-package erc-hl-nicks
    :ensure t
    :tags '("CONNECTED" "CHAT" "ERC"))

  (use-package erc-youtube
    :ensure t
    :tags '("CONNECTED" "CHAT" "ERC"))

  (use-package erc-image
    :ensure t
    :tags '("CONNECTED" "CHAT" "ERC"))
#+end_src

***** Notification activation
#+begin_src emacs-lisp
  (use-package sauron-erc
    :ensure sauron
    :tags '("CONNECT" "CHAT" "ERC" "NOTIFICATION")
    :commands (sauron-erc-start)
    :custom
    (sauron-prio-erc-default           1)
    (sauron-prio-erc-privmsg-root      1)
    (sauron-prio-erc-privmsg-default   1)
    (sauron-prio-erc-privmsg-for-me    2)
    (sauron-prio-erc-privmsg-mentioned 2))
#+end_src

**** Slack
***** Global
#+begin_src emacs-lisp
  (use-package slack
    :ensure t
    :tags '("CONNECTED")
    :commands (slack-start)
    :no-require t
    :defines (url-http-method url-http-data url-http-extra-headers url-callback-function url-callback-arguments oauth--token-data)

    :custom
    (slack-profile-image-file-directory (format "%s/slack/profile_pictures" user-emacs-directory))
    (slack-image-file-directory         (format "%s/slack/images" user-emacs-directory))
    (slack-buffer-emojify               t)

    :hook
    (slack-mode . slack-set-timestamp-margin)
    (slack-mode . company-slack-hook)

    :config

    (defun company-slack-hook ()
      (make-local-variable 'company-backends)
      (setq company-backends (copy-tree company-backends))
      (set 'company-backends (append '(company-slack-backend) company-backends)))

    ;; Create directory in case of
    (make-directory slack-profile-image-file-directory t)
    (make-directory slack-image-file-directory t)

    ;; Register the teams (configuration defined in a private file)
    (when (fboundp 'slack-register-teams)
      (slack-register-teams))

    ;; Define formatting time!
    (defun slack-set-timestamp-margin ()
      "Hook function to define the timestamp in the margins"
      (interactive)
      (setq lui-time-stamp-position 'right-margin
            lui-time-stamp-format "[%H:%M - %a %d %b %Y ]"
            right-margin-width (length (format-time-string lui-time-stamp-format))))
    )
#+end_src

***** Helm-slack
#+begin_src emacs-lisp
  (use-package helm-slack
    :straight (helm-slack :type git :host github :repo "yuya373/helm-slack")
    :tags '("CONNECTED")
    :after (slack))
#+end_src
**** Global helpers
#+begin_src emacs-lisp
  (defun communication-start ()
    "Routine to start all chats."
    (interactive)

    ;; ERC
    (erc-start)

    ;; Slack
    (slack-start)

    ;; Matrix
    (matrix-connect)
    )

  (defun communication-shutdown ()
    "Routine to shutdown all chats"
    (interactive)

    ;; Erc
    (dolist (erc-buf list-erc-servers)
      (when (get-buffer erc-buf)
        (with-current-buffer erc-buf
          (erc-quit-server "time to go back to the real life"))))

    ;; Slack
    (slack-ws-close)

    ;; Matrix
    (matrix-client-disconnect)

    ;; Clean buffers
    (dolist (buf (buffer-list))
      (cond ((string-prefix-p "*Slack " (buffer-name buf))
             (kill-buffer buf))
            ((string= (with-current-buffer buf major-mode) "erc-mode")
             (kill-buffer buf))
            )))

  (defun communication-start-or-switch ()
    (interactive)
    (if (get-buffer (car list-erc-servers))
        (erc-track-switch-buffer 1)
      (communication-start)))

  (global-set-key (kbd "S-<f2>") 'communication-start-or-switch)
  (global-set-key (kbd "C-<f2>") 'communication-shutdown)
#+end_src

** Music
*** Global
#+begin_src emacs-lisp
  (use-package emms
    :ensure t
    :tags '("MULTIMEDIA")
    :commands (emms emms-browse-by-artist)
    :bind
    (("<f5>"            . emms-browse-by-artist)
     ("S-<f5>"          . emms-playlist-mode-go)
     ("<XF86AudioPlay>" . emms-pause)
     ("<XF86AudioStop>" . emms-stop)
     ("<XF86AudioPrev>" . emms-previous)
     ("<XF86AudioNext>" . emms-next))

    :config

    (emms-all)

    ;; Use mpv player
    (setq emms-player-list '(emms-player-mpv))

    ;; A minor macos adaptation
    (when (eq system-type 'darwin)
      (setq emms-source-file-gnu-find "/usr/local/bin/gfind"))

    ;; Some behaviour definition
    (setq later-do-interval 0.0001
          emms-directory "~/.emacs.d/emms"
          emms-playlist-buffer-name "*Music*"
          emms-source-file-default-directory (expand-file-name "~/Music")
          emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find
          emms-show-format "NP: %s"
          emms-playlist-default-major-mode 'emms-playlist-mode
          emms-repeat-playlist t
          emms-mode-line-mode-line-function nil  ;; Don't want any info in the mode line
          emms-mode-line-titlebar-function 'emms-mode-line-playlist-current) ;; Put info in the titlebar

    ;; Visualisation activation/deactivation
    (emms-mode-line nil)
    (setq emms-playing-time-display-format " [âª %s]")
    ;; (emms-playing-time-disable-display)

    ;; Enable cache
    (when (fboundp 'emms-cache)
      (emms-cache 1))

    ;; Adapt track description format
    (defun track-description (track)
      "Return a description of the current TRACK."
      (if (and (emms-track-get track 'info-artist)
               (emms-track-get track 'info-title))
          (let ((pmin (emms-track-get track 'info-playing-time-min))
                (psec (emms-track-get track 'info-playing-time-sec))
                (ptot (emms-track-get track 'info-playing-time))
                (art  (emms-track-get track 'info-artist))
                (tit  (emms-track-get track 'info-title))
                (alb  (emms-track-get track 'info-album)))
            (cond ((and pmin psec) (format "%s - %s - %s [%02d:%02d]" art alb tit pmin psec))
                  (ptot (format  "%s - %s - %s [%02d:%02d]" art alb tit (/ ptot 60) (% ptot 60)))
                  (t (emms-track-simple-description track))))
        (emms-track-simple-description track)))
    (setq emms-track-description-function 'track-description)

    ;; taken from http://emacs.stackexchange.com/questions/21747/emms-how-can-i-have-a-progress-bar?rq=1
    (defun emms-indicate-seek (_sec)
      "Show the progress bar when seek."
      (let* ((total-playing-time (emms-track-get
                                  (emms-playlist-current-selected-track)
                                  'info-playing-time))
             (elapsed/total (/ (* 100 emms-playing-time) total-playing-time)))
        (with-temp-message (format "[%-100s] %2d%% ([%02d:%02d]/[%02d:%02d])"
                                   (make-string elapsed/total ?=)
                                   elapsed/total
                                   (/ emms-playing-time 60) (% emms-playing-time 60)
                                   (/ total-playing-time 60) (% total-playing-time 60))
          (sit-for 2))))
    (add-hook 'emms-player-seeked-functions #'emms-indicate-seek 'append))

  (use-package emms-info-libtag
    :after emms
    :config

    (setq emms-info-asynchronously nil
          emms-info-functions '(emms-info-libtag)))
#+end_src

*** Tagging using emms
I actually use this part for minor correction. The tags are done when abcde is converting the cd
#+begin_src emacs-lisp
  (use-package emms-mark-ext
    :ensure t
    :disabled t
    :tags '("MULTIMEDIA")
    :hook
    (emms-playlist-mode . emms-mark-ext-hook)
    :commands (emms-mark-ext-hook))
#+end_src

*** Browser
#+begin_src emacs-lisp
  (use-package emms-browser
    :after emms
    :tags '("MULTIMEDIA")
    :hook
    (emms-browser-show-display . (lambda () (hl-line-mode 1)))

    :config
    (emms-browser-make-filter "all-files" (emms-browser-filter-only-type 'file))

    (setq emms-browser-info-artist-format "%iâ¢ %n"
          emms-browser-info-album-format "%i%cS [%y] %n"
          emms-browser-info-title-format "%iâª %T. %t [%d]"
          emms-browser-playlist-info-album-format "%cS %a - %A : "
          emms-browser-playlist-info-title-format "%T. %t [%d]"))
#+end_src

*** Release
#+begin_src emacs-lisp
  (use-package metal-archives
    :straight (metal-archives :type git :host github :repo "seblemaguer/metal-archives.el")
    :tags '("REQUIRES_CONNECTION" "USER")
    :commands (metal-archives-shopping-list-update
               metal-archives-retrieve-next-releases
               metal-archives-load-artists-map)
    :hook
    (kill-emacs . metal-archives-shopping-list-update)
    (after-init . metal-archives-load-artists-map)

    :custom
    (metal-archives-shopping-list-target-file "~/shared/pCloudDrive/org/organisation/shopping_list.org")
    (metal-archives-shopping-list-root-node "CD")

    :init
    (add-to-list 'org-agenda-files metal-archives-shopping-list-target-file)

    :config
    (setq metal-archives-favorite-handle 'metal-archives-shopping-list-add-release-and-alert))
#+end_src

** RSS
*** Global
#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t
    :tags '("REQUIRES_CONNECTION" "RSS")
    :commands (elfeed elfeed-update)
    :no-require t
    :bind (([f9] . elfeed))

    :config
    ;; Change the storage directory
    (setq elfeed-db-directory "~/shared/pCloudDrive/emacs/elfeed"

          ;; Formatting dates
          elfeed-search-date-format '("%Y-%m-%d %H:%M" 17 :left)))
#+end_src

*** Org connection
#+begin_src emacs-lisp
  (use-package elfeed-org
    :ensure t
    :tags '("REQUIRES_CONNECTION" "RSS")
    :hook (after-init . loading-elfeed)
    :commands (elfeed-org)
    :init
    (defun loading-elfeed ()
      (when (file-exists-p "~/shared/pCloudDrive/org/organisation/rss.org")
        (progn
          (elfeed-org)
          (setq rmh-elfeed-org-files (list "~/shared/pCloudDrive/org/organisation/rss.org"))
          (rmh-elfeed-org-process rmh-elfeed-org-files rmh-elfeed-org-tree-id)))

      (elfeed-update-background-start))
    )
#+end_src

*** Goodies
#+begin_src emacs-lisp
  (use-package elfeed-goodies
    :ensure t
    :tags '("REQUIRES_CONNECTION" "RSS")
    :disabled t
    :config
    (elfeed-goodies/setup))
#+end_src

*** Youtube specificities
#+begin_src emacs-lisp
  (use-package youtube-dl
    :straight (youtube-dl :repo "skeeto/youtube-dl-emacs" :type git :host github)
    :tags '("CONNECTED")
    :bind ("C-x y" . youtube-dl-list)
    :config
    (setq youtube-dl-directory "~/Downloads")

    ;; FIXME: should be moved !
    (defun expose (function &rest args)
      "Return an interactive version of FUNCTION, 'exposing' it to the user."
      (lambda ()
        (interactive)
        (apply function args)))

    (defun elfeed-show-youtube-dl ()
      "Download the current entry with youtube-dl."
      (interactive)
      (pop-to-buffer (youtube-dl (elfeed-entry-link elfeed-show-entry))))

    (cl-defun elfeed-search-youtube-dl (&key slow)
      "Download the current entry with youtube-dl."
      (interactive)
      (let ((entries (elfeed-search-selected)))
        (dolist (entry entries)
          (if (null (youtube-dl (elfeed-entry-link entry)
                                :title (elfeed-entry-title entry)
                                :slow slow))
              (message "Entry is not a YouTube link!")
            (message "Downloading %s" (elfeed-entry-title entry)))
          (elfeed-untag entry 'unread)
          (elfeed-search-update-entry entry)
          (unless (use-region-p) (forward-line)))))

    (defalias 'elfeed-search-youtube-dl-slow
      (expose #'elfeed-search-youtube-dl :slow t))

    (define-key elfeed-show-mode-map "d" 'elfeed-show-youtube-dl)
    (define-key elfeed-search-mode-map "d" 'elfeed-search-youtube-dl)
    (define-key elfeed-search-mode-map "D" 'elfeed-search-youtube-dl-slow)
    (define-key elfeed-search-mode-map "L" 'youtube-dl-list))
#+end_src

*** Notification part
#+begin_src emacs-lisp
  (use-package sauron-elfeed
    :tags '("REQUIRES_CONNECTION" "RSS")
    :commands (elfeed-update-background-start sauron-elfeed-start)
    :hook (after-init . sauron-elfeed-start)
    :config
    (cl-loop for feed in elfeed-feeds
             do (when (member 'mustread (cdr feed))
                  (puthash (car feed) 3 sauron-elfeed-prio-hash))))

#+end_src

* Web
** Globalize clickable url
#+begin_src emacs-lisp
  ;; Activate clickage everywhere
  (use-package goto-addr
    :tags '("CONNECTED")
    :config
    (define-globalized-minor-mode global-goto-address-mode
      goto-address-mode goto-address-mode :group 'goto-address)

    (global-goto-address-mode)

    (define-globalized-minor-mode global-goto-address-prog-mode
      goto-address-prog-mode goto-address-prog-mode :group 'goto-address))
#+end_src

** Searching
*** Google
#+begin_src emacs-lisp
  (use-package google
    :ensure t
    :tags '("CONNECTED"))

  (use-package google-maps
    :ensure t
    :tags '("CONNECTED"))
#+end_src

*** Youtube
#+begin_src emacs-lisp
  (use-package ytel
    :ensure t
    :tags '("CONNECTED" "MULTIMEDIA")
    :commands (ytel)
    :bind (("<C-f9>" . ytel)
           :map ytel-mode-map
           ("<return>" . ytel-watch)
           ("d"        . ytel-download))
    :custom (ytel-sort-criterion 'upload_date)
    :config
    (defun ytel-download ()
      "Download video at point"
      (interactive)
      (let* ((video (ytel-get-current-video))
             (id    (ytel-video-id video)))
        (youtube-dl (concat "https://www.youtube.com/watch?v=" id))))

    (defun ytel-watch ()
      "Stream video at point in mpv."
      (interactive)
      (let* ((video (ytel-get-current-video))
             (id    (ytel-video-id video)))
        (start-process "ytel mpv" nil
                       "mpv"
                       (concat "https://www.youtube.com/watch?v=" id)))))
        ;; "--ytdl-format=bestvideo[height<=?720]+bestaudio/best")))
#+end_src

*** Codesearch
#+begin_src emacs-lisp
  (use-package counsel-codesearch
    :ensure t
    :tags '("CONNECTED"))
#+end_src

** Stackexchange
#+begin_src emacs-lisp
  (use-package sx
    :ensure t
    :tags '("CONNECTED")
    :functions (sx-open-link)
    :config
    (bind-keys :prefix "C-c s"
               :prefix-map my-sx-map
               :prefix-docstring "Global keymap for SX."
               ("q" . sx-tab-all-questions)
               ("i" . sx-inbox)
               ("o" . sx-open-link)
               ("u" . sx-tab-unanswered-my-tags)
               ("a" . sx-ask)
               ("s" . sx-search)))
#+end_src

** Reddit
#+begin_src emacs-lisp
  (use-package md4rd
    :ensure t
    :tags '("CONNECTED")
    :pretty-hydra
    ((:color blue :hint none)
     ("Basic"
      (("o" md4rd-open "Open")
       ("t" md4rd-widget-toggle-line "Toggle line"))

      "Voting"
      (("u" md4rd-upvote "Upvote")
       ("d" md4rd-downvote "Downvote"))

      "Expanding"
      (("e" md4rd-widget-expand-all "Expand all")
       ("c" md4rd-widget-collapse-all "Collapse all"))))

    :bind (:map md4rd-mode-map
                ("u" . md4rd-upvote)
                ("d" . md4rd-downvote)
                ("o" . md4rd-open)
                ("t" . md4rd-widget-toggle-line)
                ("e" . md4rd-widget-expand-all)
                ("c" . md4rd-widget-collapse-all)
                ("TAB" . widget-forward)
                ("<backtab>" . widget-backward)
                ("/" . md4rd-hydra/body))

    :config
    (setq md4rd-subs-active '(lisp+Common_Lisp emacs)))
#+end_src

* TODO Planification
** Calendar / Agenda
*** Org-mode part
**** Global
#+begin_src emacs-lisp
  (use-package org-agenda
    :tags '("ORG" "USER")
    :commands (org-agenda)
    :init
    (defun color-org-header (tag backcolor)
      "Highlight the line in org-agenda in the given BACKCOLOR if TAG is present on the line."
      (interactive)
      (goto-char (point-min))
      (while (re-search-forward tag nil t)
        (add-text-properties (line-beginning-position) (+ (line-end-position) 1)
                             `(face (:background, backcolor)))))

    ;; Agenda is used at startup, it is better
    (setq initial-buffer-choice '(lambda () (get-buffer org-agenda-buffer-name)))

    :hook
    (org-agenda-finalize . (lambda ()
                             (save-excursion
                               (color-org-header "CalendarMe:" "RosyBrown1")
                               (color-org-header "CalendarAdapt:" "PaleGreen1"))))
    :mode-hydra
    (org-agenda-mode
     (:color blue)
     ("Time window"
      (("d" org-agenda-day-view "Day")
       ;; (if (eq 'day (org-agenda-cts)) "[x]" "[ ]"))
       ("w" org-agenda-week-view "Week")
       ;; (if (eq 'week (org-agenda-cts)) "[x]" "[ ]"))
       ("t" org-agenda-fortnight-view "Fortnight")
       ;; (if (eq 'fortnight (org-agenda-cts)) "[x]" "[ ]"))
       ("m" org-agenda-month-view "Month")
       ;; (if (eq 'month (org-agenda-cts)) "[x]" "[ ]"))
       ("y" org-agenda-year-view "Year")
        ;; (if (eq 'year (org-agenda-cts)) "[x]" "[ ]")))
      )))


  :bind
  (([f12] . org-agenda)

   :map org-agenda-mode-map
   ("v"  . org-agenda-hydra/body))

  :config

  ;; Agenda files
  (when (file-exists-p "~/shared/pCloudDrive/org/todo/todo.org")
    (add-to-list 'org-agenda-files "~/shared/pCloudDrive/org/todo/todo.org"))

  ;; (when (file-exists-p "~/shared/pCloudDrive/org/organisation/bookmarks.org")
  ;;   (add-to-list 'org-agenda-files "~/shared/pCloudDrive/org/organisation/bookmarks.org"))

  (when (file-exists-p "~/Calendars")
    (setq org-agenda-files (append org-agenda-files (directory-files "~/Calendars/" t "^.*\\.org$"))))

  ;; Deadline management
  (setq org-agenda-include-diary nil
        org-deadline-warning-days 7
        org-timeline-show-empty-dates t
        org-agenda-span 'day
        org-agenda-prefix-format '((agenda . " %i %-15:c%?-15t% s")
                                   (todo . " %i %-15:c")
                                   (tags . " %i %-15:c")
                                   (search . " %i %-15:c"))

        org-agenda-category-icon-alist `(
                                         ;; Tools / utils
                                         ("[Ee]macs"
                                          ,(format "%s/third_parties/icons/emacs24.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("[Oo]rg"
                                          ,(format "%s/third_parties/icons/org.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("^[Hh][Tt][Ss]$"
                                          ,(format "%s/third_parties/icons/hts.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("^[Mm]ary[tT]\\{2\\}[sS]$"
                                          ,(format "%s/third_parties/icons/marytts.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("^SFB$"
                                          ,(format "%s/third_parties/icons/sfb.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("[Ss]ystem"
                                          ,(format "%s/third_parties/icons/debian.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("[Tt]ools?"
                                          ,(format "%s/third_parties/icons/wrench.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("[Ex]pe\\(riment\\)s?"
                                          ,(format "%s/third_parties/icons/expes.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ;; Admin / meeting
                                         ("[Aa]dmin"
                                          ,(format "%s/third_parties/icons/admin.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("[Mm]eeting"
                                          ,(format "%s/third_parties/icons/meeting.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("[Aa]ppointments?"
                                          ,(format "%s/third_parties/icons/appointment.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("[Vv]isitors"
                                          ,(format "%s/third_parties/icons/visitors.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("synsig"
                                          ,(format "%s/third_parties/icons/isca.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("\\([Tt]rip\\|[Dd]eplacement\\)"
                                          ,(format "%s/third_parties/icons/trip.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("Train"
                                          ,(format "%s/third_parties/icons/train.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ;; Deadlines / dates
                                         ("\\([Pp]resentations?\\)"
                                          ,(format "%s/third_parties/icons/meeting.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("\\([Pp]apers?\\|[Bb]lio\\|[Aa]rticles?\\|[Rr]eading\\|[Ww]riting\\)"
                                          ,(format "%s/third_parties/icons/book.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("[Mm]ails?"
                                          ,(format "%s/third_parties/icons/gnus.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("[Rr]eview?"
                                          ,(format "%s/third_parties/icons/review.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ;; Personnal dates
                                         ("Medical"
                                          ,(format "%s/third_parties/icons/medical.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("\\(Party\\|Celeb\\)"
                                          ,(format "%s/third_parties/icons/party.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("Anniv"
                                          ,(format "%s/third_parties/icons/anniversary.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("\\([Hh]olidays\\|[Vv]acations?\\)"
                                          ,(format "%s/third_parties/icons/holidays.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("Concert"
                                          ,(format "%s/third_parties/icons/music.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ;; Personnal diverse
                                         ("CD"
                                          ,(format "%s/third_parties/icons/cd.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("Book"
                                          ,(format "%s/third_parties/icons/book.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         ("[Pp]rojects?"
                                          ,(format "%s/third_parties/icons/project.png" user-emacs-directory)
                                          nil nil :ascent center)

                                         (".*" '(space . (:width (16))))))

  (defun org-agenda-cts ()
    (let ((args (get-text-property
                 (min (1- (point-max)) (point))
                 'org-last-args)))
      (nth 2 args)))
  )
#+end_src

**** Super agenda
#+begin_src emacs-lisp
  (use-package org-super-agenda
    :ensure t
    :tags '("ORG")
    :config

    ;; Create groups
    (setq org-super-agenda-groups
          '(
            ;; CD part
            (:name "Interesting releases"
                   :and (:todo "RELEASE" :date t )
                   :order 8)

            (:name "Ordered Releases"
                   :and (:category "Release" :todo "WAITING")
                   :order 8)

            (:name "Releases"
                   :and (:category "Release" :not (:todo "WAITING"))
                   :order 9)

            (:name "Today"  ; Optionally specify section name
                   :time-grid t  ; Items that appear on the time grid
                   )

            ;; Important thing
            (:name "Important"
                   :and (:priority "A" :date t)
                   :order 2)

            ;; Some standby thingy
            (:name "In process"
                   :todo "PAUSED"
                   :order 7)

            ;; Deadlines
            (:name "Overdue"
                   :deadline past
                   :order 3)
            (:name "Due Today"
                   :deadline today
                   :order 3)
            (:name "Due Soon"
                   :deadline future
                   :order 4)

            ;; Schedule
            (:name "Scheduled, past but opened"
                   :and (:scheduled past :not (:todo "PAUSED") :not (:todo "WAITING") :not (:todo "RELEASE"))
                   :order 5)
            (:name "Scheduled in the next couple of days"
                   :and (:scheduled future :not (:todo "PAUSED") :not (:todo "WAITING") :not (:todo "RELEASE"))
                   :order 6)
            ))

    ;; Activate mode
    (org-super-agenda-mode t)
    (org-agenda nil "a"))
#+end_src

*** Excorporate
 #+begin_src emacs-lisp
   (use-package calfw
     :ensure t
     :tags '("CALENDAR" "REQUIRES_CONNECTION"))

   (use-package excorporate
     :ensure t
     :tags '("CALENDAR" "REQUIRES_CONNECTION")

     :init
     (setq excorporate-configuration '("lemagues@tcd.ie" . "https://outlook.office365.com/EWS/Exchange.asmx")
           excorporate-calendar-show-day-function 'exco-calfw-show-day)

     :config
     (excorporate))
 #+end_src

** GTD
*** Clock management
:PROPERTIES:
:FROM:     https://sachachua.com/blog/2007/12/clocking-time-with-emacs-org/
:END:
#+begin_src emacs-lisp
  (use-package org-mru-clock
    :ensure t
    :tags '("ORG")
    :bind* (("C-c C-x i" . org-mru-clock-in)
            ("C-c C-x C-j" . org-mru-clock-select-recent-task))
    :init
    (setq org-mru-clock-how-many 100
          org-mru-clock-keep-formatting t
          org-mru-clock-completing-read #'ivy-completing-read
          org-clock-persist t)

    (defun sacha/org-clock-in-if-starting ()
      "Clock in when the task is marked IN PROCESS."
      (when (and (string= org-state "IN PROCESS")
                 (not (string= org-last-state org-state)))
        (org-clock-in)))

    (defadvice org-clock-in (after sacha activate)
      "Set this task's status to 'IN PROCESS'."
      (org-todo "IN PROCESS"))

    (defun sacha/org-clock-out-if-waiting-or-pausing ()
      "Clock in when the task is marked STARTED."
      (when (and (or (string= org-state "TODO")
                     (string= org-state "WAITING")
                     (string= org-state "PAUSED")
                     (string= org-state "EXEC_STARTED"))
                 (not (string= org-last-state org-state))
                 (org-clock-is-active))
        (org-clock-out)))

    :hook
    (org-after-todo-state-change . sacha/org-clock-out-if-waiting-or-pausing)
    (org-after-todo-state-change . sacha/org-clock-in-if-starting)

    :config
    (org-clock-persistence-insinuate))
#+end_src

**** Webpage overview
#+begin_src emacs-lisp
  (use-package org-analyzer
    :ensure t
    :custom (org-analyzer-org-directory  "~/shared/pCloudDrive/org/todo")
    :commands (org-analyzer-start))
#+end_src

*** Archiving
I prefer to keep the architecture, so for the archiving I am based on the discussion here: https://gist.github.com/Fuco1/e86fb5e0a5bb71ceafccedb5ca22fcfb

#+begin_src emacs-lisp
  (use-package org-archive
    :config
    (setq org-archive-default-command 'org-archive-subtree)

    (defadvice org-archive-subtree (around fix-hierarchy activate)
      (let* ((fix-archive-p (and (not current-prefix-arg)
                                 (not (use-region-p))))
             (location (org-archive--compute-location org-archive-location))
             (afile (car location))
             (offset (if (= 0 (length (cdr location)))
                         1
                       (1+ (string-match "[^*]" (cdr location)))))
             (buffer (or (find-buffer-visiting afile) (find-file-noselect afile))))
        ad-do-it
        (when fix-archive-p
          (with-current-buffer buffer
            (goto-char (point-max))
            (while (> (org-current-level) offset) (org-up-heading-safe))
            (let* ((olpath (org-entry-get (point) "ARCHIVE_OLPATH"))
                   (path (and olpath (split-string olpath "/")))
                   (level offset)
                   tree-text)
              (when olpath
                (org-mark-subtree)
                (setq tree-text (buffer-substring (region-beginning) (region-end)))
                (let (this-command) (org-cut-subtree))
                (goto-char (point-min))
                (save-restriction
                  (widen)
                  (-each path
                    (lambda (heading)
                      (if (re-search-forward
                           (rx-to-string
                            `(: bol (repeat ,level "*") (1+ " ") ,heading)) nil t)
                          (org-narrow-to-subtree)
                        (goto-char (point-max))
                        (unless (looking-at "^")
                          (insert "\n"))
                        (insert (make-string level ?*)
                                " "
                                heading
                                "\n"))
                      (cl-incf level)))
                  (widen)
                  (org-end-of-subtree t t)
                  (org-paste-subtree level tree-text)))))))))
#+end_src

**** Cleaning helper
:PROPERTIES:
:FROM:     https://www.emacswiki.org/emacs/org-extension.el
:END:

#+begin_src emacs-lisp
  (defun org-archive-all-done-item ()
    "Archive all item that have with prefix DONE."
    (interactive)
    (save-excursion
      (outline-show-all)
      (goto-char (point-min))
      (if (search-forward-regexp "^[\\*]+ \\(DONE\\|CANCELLED\\)" nil t)
          (progn
            (goto-char (point-min))
            (while (search-forward-regexp "^[\\*]+ \\(DONE\\|CANCELLED\\)" nil t)
              (org-advertized-archive-subtree))
            (message "Archive finished"))
        (message "No need to archive"))))

  (defun org-clean-done-item ()
    "Delete all item that have with prefix DONE."
    (interactive)
    (save-excursion
      (outline-show-all)
      (goto-char (point-min))
      (if (search-forward-regexp "^[\\*]+ \\(DONE\\|CANCELLED\\)" nil t)
          (progn
            (goto-char (point-min))
            (while (search-forward-regexp "^[\\*]+ \\(DONE\\|CANCELLED\\)" nil t)
              (org-cut-subtree))
            (message "Cleaning DONE tasks finished"))
        (message "No need to clean"))))
#+end_src

*** Monitoring
**** Dashboard
#+begin_src emacs-lisp
  (use-package org-dashboard
    :ensure t
    :commands (org-dashboard))
#+end_src

**** Sidebar
#+begin_src emacs-lisp
  (use-package org-sidebar
    :ensure t
    :commands (org-sidebar))
#+end_src

** Helpers
#+begin_src emacs-lisp
  (defun calendar-insert-date ()
    "Capture the date at point, exit the Calendar, insert the date."
    (interactive)
    (seq-let (month day year) (save-match-data (calendar-cursor-to-date))
      (calendar-exit)
      (insert (format "%02d-%02d-%02d" year month day))))

  (define-key calendar-mode-map (kbd "RET") 'calendar-insert-date)
#+end_src

* Shell
** Global
The key configuration is mainly coming from https://github.com/jcf/emacs.d the rest is coming from http://www.modernemacs.com/post/custom-eshell/ with some adaptation
#+begin_src emacs-lisp
  (use-package eshell
    :demand
    :tags '("SHELL")
    :hook
    (eshell-mode .  (lambda ()
                      (define-key eshell-mode-map
                        [remap eshell-pcomplete]
                        'helm-esh-pcomplete)
                      (define-key eshell-mode-map
                        (kbd "M-p")
                        'helm-eshell-history)
                      (eshell/export "NODE_NO_READLINE=1")))
    (eshell-exit . (lambda () (setq esh-prompt-num 0)))

    :functions (eshell/pwd)

    :config
    ;; Define helpers for prompts
    (defmacro with-face (STR &rest PROPS)
      "Return STR propertized with PROPS."
      `(propertize ,STR 'face (list ,@PROPS)))

    (defmacro esh-section (NAME ICON FORM &rest PROPS)
      "Build eshell section NAME with ICON prepended to evaled FORM with PROPS."
      `(setq ,NAME
             (lambda () (when ,FORM
                          (-> ,ICON
                              (concat esh-section-delim ,FORM)
                              (with-face ,@PROPS))))))

    (defun esh-acc (acc x)
      "Accumulator for evaluating and concatenating esh-sections."
      (--if-let (funcall x)
          (if (s-blank? acc)
              it
            (concat acc esh-sep it))
        acc))

    (defun esh-prompt-func ()
      "Build `eshell-prompt-function'"
      (concat esh-header
              (-reduce-from 'esh-acc "" eshell-funcs)
              "\n"
              eshell-prompt-string))

    (esh-section esh-dir
                 "\xf07c"  ; ï¼ (faicon folder)
                 (abbreviate-file-name (eshell/pwd))
                 '(:foreground "blue" :weight ultra-bold :underline t))

    (esh-section esh-git
                 "\xe907"  ; î¤ (git icon)
                 (magit-get-current-branch)
                 '(:foreground "red"))

    (esh-section esh-clock
                 "\xf017"  ; ï (clock icon)
                 (format-time-string "%H:%M" (current-time))
                 '(:foreground "forest green"))

    ;; Below I implement a "prompt number" section
    (setq esh-prompt-num 0)
    (advice-add 'eshell-send-input :before
                (lambda (&rest args) (setq esh-prompt-num (incf esh-prompt-num))))

    (esh-section esh-num
                 "\xf0c9"  ; ï (list icon)
                 (number-to-string esh-prompt-num)
                 '(:foreground "brown"))

    (setq esh-sep " | " ; "  "  or " | " ;; Separator between esh-sections
          esh-section-delim " " ;; Separator between an esh-section icon and form
          esh-header "\n " ;; Eshell prompt header

          ;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.
          ;; your login, these can be the same.
          eshell-prompt-regexp "[^â]ââ> "
          eshell-prompt-string "ââ> "

          eshell-funcs (list esh-dir esh-git esh-clock esh-num) ;; Choose which eshell-funcs to enable
          eshell-prompt-function 'esh-prompt-func ;; Enable the new eshell prompt
          )

    ;; ;; If I ever want my own eshell/foo commands overwrite real commands ...
    ;; (setq eshell-prefer-lisp-functions t)

    ;; Helpers
    (defun eshell/clear ()
      "Clear the eshell buffer."
      (let ((inhibit-read-only t))
        (erase-buffer)
        (eshell-send-input)))

    (defun clipboard/set (astring)
      "Copy a string to clipboard"
      (with-temp-buffer
        (insert astring)
        (clipboard-kill-region (point-min) (point-max))))

    (defun eshell/copy-pwd ()
      "Copy current directory to clipboard "
      (clipboard/set (eshell/pwd)))

    (defun eshell/copy-fpath (fname)
      "Copy file name with full path to clipboard "
      (let ((fpath (concat (eshell/pwd) "/" fname)))
        (clipboard/set fpath)
        (concat "Copied path: " fpath)))
    )
#+end_src

** Status in the fringe
#+begin_src emacs-lisp
  (use-package eshell-fringe-status
    :ensure t
    :tags '("SHELL")
    :hook
    (eshell-mode . eshell-fringe-status-mode))
#+end_src

** Fish completion
#+begin_src emacs-lisp
  (use-package fish-completion
    :ensure t
    :tags '("SHELL")
    :config
    (global-fish-completion-mode))
#+end_src

** Some toggling
#+begin_src emacs-lisp
  (use-package eshell-toggle
    :straight
    (eshell-toggle :repo "4DA/eshell-toggle" :type git :host github :version original)
    :tags '("SHELL")

    :functions (eshell-toggle-init-eshell)
    :custom
    (eshell-toggle-size-fraction 3)
    (eshell-toggle-use-projectile-root t)
    (eshell-toggle-run-command nil)
    (eshell-toggle-init-function #'eshell-toggle-init-eshell)

    :bind
    ("<f6>" . eshell-toggle))
#+end_src

** Outline-mode helpers
#+begin_src emacs-lisp
  (use-package eshell-outline
    :ensure t
    :hook (eshell-mode . eshell-outline-mode))
#+end_src

** Syntax highlighting
#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :ensure t
  :after esh-mode
  :tags '("SHELL")
  :config
  ;; Enable in all Eshell buffers.
  (eshell-syntax-highlighting-global-mode +1))
#+end_src

* System manager
** TODO Desktop environment control
Thanks to desktop environement, I can control the keyboard and the screen brightness.

#+begin_src emacs-lisp
  (use-package desktop-environment
    :ensure t
    :tags '("CORE" "DESKTOP")
    :config
    (setq desktop-environment-brightness-normal-increment "-inc 10"
          desktop-environment-brightness-normal-decrement "-dec 10"
          desktop-environment-brightness-small-increment "-inc 5"
          desktop-environment-brightness-small-decrement "-dec 5"
          desktop-environment-brightness-get-command "xbacklight -get"
          desktop-environment-brightness-set-command "xbacklight")
    (desktop-environment-mode))
#+end_src

** Pulseaudio
Thanks to pulseaudio-control, I can control my soundcard.

#+begin_src emacs-lisp
  (use-package pulseaudio-control
    :ensure t
    :tags '("CORE" "DESKTOP")
    :config
    (setq pulseaudio-control--current-sink "@DEFAULT_SINK@"))
#+end_src

** TODO Bluetooth
#+begin_src emacs-lisp
  (use-package bluetooth
    :ensure t
    :tags '("SYSTEM" "DESKTOP"))
#+end_src

** Docker
#+begin_src emacs-lisp
  (use-package docker
    :ensure t
    :commands (docker)
    :tags '("SYSTEM"))

  (use-package docker-api
    :ensure t
    :tags '("SYSTEM"))

  (use-package docker-tramp
    :ensure t
    :tags '("SYSTEM"))

  (use-package dockerfile-mode
    :ensure t
    :tags '("SYSTEM"))
#+end_src

** SSH
#+begin_src emacs-lisp
  (use-package ssh
    :ensure t
    :tags '("SYSTEM"))

  (use-package ssh-deploy
    :ensure t
    :tags '("SYSTEM"))
#+end_src

** Slurm
#+begin_src emacs-lisp
 (use-package slurm-mode
    :straight (slurm :repo "ffevotte/slurm.el" :type git :host github))
#+end_src

** Cron
#+begin_src emacs-lisp
  (use-package crontab-mode
    :ensure t)
#+end_src

** Monitoring
#+begin_src emacs-lisp
  (use-package symon
    :ensure t
    :tags '("SYSTEM"))
#+end_src

** Clipboard
#+begin_src emacs-lisp
  (use-package cliphist
    :ensure t
    :tags '("SYSTEM"))
#+end_src

** Execute with shell environment
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :tags '("SYSTEM")
    :config
    (setq exec-path-from-shell-arguments nil)
    (exec-path-from-shell-initialize))
#+end_src

** systctl
#+begin_src emacs-lisp
  (use-package sysctl
    :ensure t
    :tags '("SYSTEM")
    :commands (sysctl))
#+end_src

** Password generation
:PROPERTIES:
:FROM:     https://github.com/munen/emacs.d
:END:
Through pwgen.

Thanks to @branch14 of 200ok fame for the function!

#+begin_src emacs-lisp
(defun generate-password ()
  "Generates and inserts a new password"
  (interactive)
  (insert
   (shell-command-to-string
    (concat "pwgen -A " (read-string "Length: " "24") " 1"))))
#+end_src

** System package
#+begin_src emacs-lisp
  (use-package system-packages
      :ensure t
      :tags '("CORE")
      :config
      (setq system-packages-supported-package-managers
            '(
              (trizen .
                      ((default-sudo . nil)
                       (install . "trizen -S --noconfirm")
                       (search . "trizen -Ss")
                       (uninstall . "trizen -Rns")
                       (update . "trizen -Syu --noconfirm")
                       (clean-cache . "trizen -Sc")
                       (log . "cat /var/log/trizen.log")
                       (get-info . "trizen -Qi")
                       (get-info-remote . "trizen -Si")
                       (list-files-provided-by . "trizen -Ql")
                       (verify-all-packages . "trizen -Qkk")
                       (verify-all-dependencies . "trizen -Dk")
                       (remove-orphaned . "trizen -Rns $(trizen -Qtdq)")
                       (list-installed-packages . "trizen -Qe")
                       (list-installed-packages-all . "trizen -Q")
                       (list-dependencies-of . "trizen -Qi")
                       (noconfirm . "--noconfirm")))
              )

            system-packages-use-sudo nil
            system-packages-package-manager 'trizen)
      )
#+end_src

* Scratch
#+begin_src emacs-lisp
  (use-package scratch-ext
    :ensure t
    :tags '("REQUIRES_CONNECTION" "USER")
    :hook (after-init . scratch-ext-restore-last-scratch)
    :config
    ;; Org-mode + start folded buffer
    (setq initial-major-mode 'org-mode)
    (set-buffer (get-buffer-create "*scratch*"))
    (set (make-local-variable 'org-startup-folded) t))
#+end_src

* Provide
It is not super necessary but it makes travis happy

#+begin_src emacs-lisp
  (provide 'init)
#+end_src
