#+TITLE: Emacs configuration file
#+AUTHOR: SÃ©bastien Le Maguer
#+EMAIL: slemaguer@coli.uni-saarland.de
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  fr
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.coli.uni-saarland.de/~slemaguer/css/default.css" />

This is my emacs configuration file. It is under version control and available, among other
configurations, at this repository: https://github.com/seblemaguer/dotfiles

This configuration relies mainly on melpa and repository named "local-melpa". This local-melpa
repository is corresponding to the branch "personal" of my fork of melpa (see here: https://github.com/seblemaguer/melpa/tree/personal )

* Prerequisite
** COMMENT Activate debugging
#+begin_src emacs-lisp
  (toggle-debug-on-error)
#+end_src
** Daemon mode
#+begin_src emacs-lisp
  (server-start)
#+end_src
* Packages
** Global
This section focuses on the package management configuration.

We want to be able to have 4 things:
- Adapt the system package manager (for archlinux tool trizen) + enable use-package-ensure-system-package
#+begin_src emacs-lisp
  (use-package system-packages
      :ensure t
      :config
      (setq system-packages-supported-package-managers
            '(
              (trizen .
                      ((default-sudo . nil)
                       (install . "trizen -S")
                       (search . "trizen -Ss")
                       (uninstall . "trizen -Rns")
                       (update . "trizen -Syu")
                       (clean-cache . "trizen -Sc")
                       (log . "cat /var/log/trizen.log")
                       (get-info . "trizen -Qi")
                       (get-info-remote . "trizen -Si")
                       (list-files-provided-by . "trizen -Ql")
                       (verify-all-packages . "trizen -Qkk")
                       (verify-all-dependencies . "trizen -Dk")
                       (remove-orphaned . "trizen -Rns $(trizen -Qtdq)")
                       (list-installed-packages . "trizen -Qe")
                       (list-installed-packages-all . "trizen -Q")
                       (list-dependencies-of . "trizen -Qi")
                       (noconfirm . "--noconfirm")))
              )

            system-packages-use-sudo nil
            system-packages-package-manager 'trizen)
      )


  (use-package use-package-ensure-system-package
    :ensure t)
#+end_src
- Use an enhanced package list visualizer (paradox)
#+begin_src emacs-lisp
  (use-package paradox
    :ensure t
    :defer t
    :config
    (setq paradox-spinner-type 'progress-bar
          paradox-execute-asynchronously t))
#+end_src
- Dealing with key-chord support
#+begin_src emacs-lisp
(use-package use-package-chords
  :ensure t
  :config (key-chord-mode 1))
#+end_src
- Update all packages on one shot. This part is copied from https://emacs.stackexchange.com/questions/16398/noninteractively-upgrade-all-packages
#+begin_src emacs-lisp
  (defun package-upgrade-all ()
    "Upgrade all packages automatically without showing *Packages* buffer."
    (interactive)
    (package-refresh-contents)
    (let (upgrades)
      (cl-flet ((get-version (name where)
                  (let ((pkg (cadr (assq name where))))
                    (when pkg
                      (package-desc-version pkg)))))
        (dolist (package (mapcar #'car package-alist))
          (let ((in-archive (get-version package package-archive-contents)))
            (when (and in-archive
                       (version-list-< (get-version package package-alist)
                                       in-archive))
              (push (cadr (assq package package-archive-contents))
                    upgrades)))))
      (if upgrades
          (when (yes-or-no-p
                 (message "Upgrade %d package%s (%s)? "
                          (length upgrades)
                          (if (= (length upgrades) 1) "" "s")
                          (mapconcat #'package-desc-full-name upgrades ", ")))
            (save-window-excursion
              (dolist (package-desc upgrades)
                (let ((old-package (cadr (assq (package-desc-name package-desc)
                                               package-alist))))
                  (package-install package-desc)
                  (package-delete  old-package)))))
        (message "All packages are up to date"))))
#+end_src
** Quelpa
Quelpa is super useful for developer package management. Adding the adaptation for the use-package
makes it configuration file proof.
#+begin_src emacs-lisp
  (use-package quelpa
      :ensure t)
  (use-package quelpa-use-package
      :ensure t
      :init
      (setq quelpa-update-melpa-p nil))
#+end_src
* Global
** Undo
In order to have a better and more visual control of undoing, I use undo-tree.
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure quelpa
    :quelpa (undo-tree :fetcher git :url "http://www.dr-qubit.org/git/undo-tree.git")
    :defer t
    :init

    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/tmp/undo"))
          undo-tree-auto-save-history t
          undo-tree-visualizer-timestamps t
          undo-tree-visualizer-diff t)

    (global-undo-tree-mode))
#+end_src
** Minor-mode activation
#+begin_src emacs-lisp
  (use-package auto-minor-mode
    :ensure t
    :defer t)
#+end_src
** Helpers
I define here some global helpers used either in the rest of the file, either available to use at runtime
*** Authentification
Easy use wrapper around auth-* authentification emacs utils
#+begin_src emacs-lisp
(defun* my:auth-source-get-passwd (&rest spec &allow-other-keys)
  (let ((founds (apply 'auth-source-search spec)))
    (when founds
      (funcall (plist-get (nth 0 founds) :secret)))))

(defun* my:auth-source-get-user (&rest spec &allow-other-keys)
  (let ((founds (apply 'auth-source-search spec)))
    (when founds
      (plist-get (nth 0 founds) :user))))
#+end_src
*** Editing as root
Defining a simple helper to edit file as root using tramp
#+begin_src emacs-lisp
(defun edit-current-file-as-root ()
  "Edit the file that is associated with the current buffer as root"
  (interactive)
  (if (buffer-file-name)
      (progn
        (setq file (concat "/sudo:localhost:" (buffer-file-name)))
        (find-file file))
    (message "Current buffer does not have an associated file.")))
#+end_src
** Accent problem
#+begin_src emacs-lisp
(load-library "iso-transl")
#+end_src
** Message buffer
The main idea here is to add a timestamp to the messages as it helps to understand the sequence of
problems.
#+begin_src emacs-lisp
  (defvar debug-messages nil)

  (defun current-time-microseconds ()
    (let* ((nowtime (current-time))
           (now-ms (nth 2 nowtime)))
      (concat (format-time-string "[%Y-%m-%d %T" nowtime) (format ".%d] " now-ms))))

  (defadvice message (before who-said-that activate)
    "Find out who said that thing. and say so."
    (let ((trace nil) (n 1) (frame nil))
      (when debug-messages
          (progn
            (while (setq frame (backtrace-frame n))
              (setq n     (1+ n)
                    trace (cons (cadr frame) trace)) )

            (ad-set-arg 0 (concat (format-time-string "[%Y-%m-%d %T %Z] ") "<<%S>>:\n" (ad-get-arg 0)))
            (ad-set-args 1 (cons trace (ad-get-args 1)))))))
#+end_src
** Encoding
Define the global encoding as utf-8 english US related. Of course, it is possible de locally change
this information per buffer
#+begin_src emacs-lisp
(setq system-time-locale "en_US.utf8")
(prefer-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
#+end_src

** Folding
In order to have a unify folding support, I use origami in couple with hydra. The advantage of hydra
is to see all the alternatives more easily. Also inspire from
https://github.com/Schnouki/dotfiles/blob/master/emacs/init-20-dev.el
#+begin_src emacs-lisp
  (use-package origami
    :ensure quelpa
    :quelpa (origami :repo "seblemaguer/origami.el" :fetcher github)
    :custom
    (origami-show-fold-header t)

    :custom-face
    (origami-fold-replacement-face ((t (:inherit magit-diff-context-highlight))))
    (origami-fold-fringe-face ((t (:inherit magit-diff-context-highlight))))

    :init
    (defhydra origami-hydra (:color blue :hint none)
      "
        _:_: recursively toggle node       _a_: toggle all nodes    _t_: toggle node
        _o_: show only current node        _u_: undo                _r_: redo
        _R_: reset
        "
      (":" origami-recursively-toggle-node)
      ("a" origami-toggle-all-nodes)
      ("t" origami-toggle-node)
      ("o" origami-show-only-node)
      ("u" origami-undo)
      ("r" origami-redo)
      ("R" origami-reset))

    :bind (:map origami-mode-map
                ("C-:" . origami-hydra/body))
    :config
    (face-spec-reset-face 'origami-fold-header-face))
#+end_src
** Edition
*** Edit simultanously multiple region
#+begin_src emacs-lisp
  (use-package iedit
    :ensure t
    :config
    (delete-selection-mode t))
#+end_src
*** Alignment
#+begin_src emacs-lisp
(defun align-to-equals (begin end)
  "Align region to equal signs"
   (interactive "r")
   (align-regexp begin end "\\(\\s-*\\)=" 1 1 ))
#+end_src
** Recent file
Opening recent files is always an easy and fast shortcut. Some files should be ignored though. That
leads to this configuration
#+begin_src emacs-lisp
  (use-package recentf
    :init
    (recentf-mode 1)

    :config

    ;; Increase limit
    (setq recentf-max-menu-items 100)

    ;; Emacs
    (add-to-list 'recentf-exclude (format "%s/.orhc-bibtex-cache" (getenv "HOME")))
    (add-to-list 'recentf-exclude (format "%s/configuration/emacs\\.d/\\(?!\\(main.*\\)\\)" (getenv "HOME")))
    (add-to-list 'recentf-exclude (format "%s/\\.emacs\\.d/.*" (getenv "HOME")))

    ;; Some caches
    (add-to-list 'recentf-exclude (format "%s/\\.ido\\.last" (getenv "HOME")))
    (add-to-list 'recentf-exclude (format "%s/\\.recentf" (getenv "HOME")))


    ;; elfeed
    (add-to-list 'recentf-exclude (format "%s/\\.elfeed/.*" (getenv "HOME")))
    (add-to-list 'recentf-exclude (format "%s/Dropbox/emacs/elfeed/.*" (getenv "HOME")))

    ;; Org-mode organisation
    (add-to-list 'recentf-exclude (format "%s/Dropbox/org/organisation/.*" (getenv "HOME")))

    ;; Org/todo/calendars
    (add-to-list 'recentf-exclude ".*todo.org")
    (add-to-list 'recentf-exclude (format "%s/Calendars/.*" (getenv "HOME")))

    ;; Maildir
    (add-to-list 'recentf-exclude (format "%s/maildir.*" (getenv "HOME"))))
#+end_src
** Backup files
*** Global backup configuration
This the global backup configuration. For that I adapted a little bit the wonderful snapshot-timemachine package.
#+begin_src emacs-lisp
  (use-package snapshot-timemachine
    :ensure t
    :init

    ;; Default Backup directory
    (defvar backup-directory "~/.emacs.d/backups/")
    (setq backup-directory-alist `((".*" . ,backup-directory)))

    (when (not (file-exists-p backup-directory))
      (make-directory backup-directory t))

    ;; Auto-save
    (defvar auto-save-directory "~/.emacs.d/auto-save/")
    (setq auto-save-file-name-transforms `((".*" ,auto-save-directory t)))

    (when (not (file-exists-p auto-save-directory))
      (make-directory auto-save-directory t))

    ;; Tramp backup
    (defvar tramp-backup-directory "~/.emacs.d/tramp-backups/")
    (setq tramp-backup-directory-alist `((".*" . ,tramp-backup-directory)))

    (when (not (file-exists-p tramp-backup-directory))
      (make-directory tramp-backup-directory t))

    (setq make-backup-files t               ; backup of a file the first time it is saved.
          backup-by-copying t               ; don't clobber symlinks
          version-control t                 ; version numbers for backup files
          delete-old-versions t             ; delete excess backup files silently
          delete-by-moving-to-trash t
          kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
          kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
          auto-save-default t               ; auto-save every buffer that visits a file
          auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
          auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
          )

    :config

    (defun snapshot-timemachine-backup-finder (file)
      "Find snapshots of FILE in rsnapshot backups."
      (let* ((file (expand-file-name file))
             (file-adapted (replace-regexp-in-string "/" "!" file))
             (backup-files(directory-files backup-directory t (format "%s.*" file-adapted))))
        (seq-map-indexed (lambda (backup-file index)
                           (make-snapshot :id index
                                          :name (format "%d" index)
                                          :file backup-file
                                          :date (nth 5 (file-attributes backup-file))))
                         backup-files)))

    (setq snapshot-timemachine-snapshot-finder #'snapshot-timemachine-backup-finder))
#+end_src
*** Sensitive mode
There are some files which are not desired to be backed up. This part goal is to setup this
"avoiding saving" spÃ©cificities.
#+begin_src emacs-lisp
  (define-minor-mode sensitive-mode
    "For sensitive files like password lists.
  It disables backup creation and auto saving.

  With no argument, this command toggles the mode.
  Non-null prefix argument turns on the mode.
  Null prefix argument turns off the mode."
    ;; The initial value.
    nil
    ;; The indicator for the mode line.
    " Sensitive"
    ;; The minor mode bindings.
    nil
    (if (symbol-value sensitive-mode)
        (progn
          ;; disable backups
          (set (make-local-variable 'backup-inhibited) t)
          ;; disable auto-save
          (if auto-save-default
              (auto-save-mode -1)))
                                          ;resort to default value of backup-inhibited
      (kill-local-variable 'backup-inhibited)
                                          ;resort to default auto save setting
      (if auto-save-default
          (auto-save-mode 1))))


  (add-to-list 'auto-minor-mode-alist '("\\.git/.*\\'" . sensitive-mode))
  (add-to-list 'auto-minor-mode-alist '("emacs\\.d/.*\\'" . sensitive-mode))
  (add-to-list 'auto-minor-mode-alist '("emacs\\.d/emms/.*\\'" . sensitive-mode))
  (add-to-list 'auto-minor-mode-alist '("Calendars/.*.org\\'" . sensitive-mode))
  (add-to-list 'auto-minor-mode-alist '("\\.gpg\\'" . sensitive-mode))
#+end_src
** Copy/Pasted
Baseline configuration for copy/pasting
#+begin_src emacs-lisp
  (setq mouse-drag-copy-region nil
        x-select-enable-primary nil
        x-select-enable-clipboard t
        select-active-regions t)
#+end_src
** Spell
Configuration of the (fly) spelling for emacs. For spelling, we are using aspell.
#+begin_src emacs-lisp
  (use-package flyspell
    :ensure t
    :config

    ;; Set programms
    (setq-default ispell-program-name "aspell")
    (setq-default ispell-list-command "--list")

    ;; Refresh flyspell after directory change
    (defun flyspell-buffer-after-pdict-save (&rest _)
      (flyspell-buffer))
    (advice-add 'ispell-pdict-save :after #'flyspell-buffer-after-pdict-save)

    ;; Popup
    (defun flyspell-emacs-popup-textual (event poss word)
      "A textual flyspell popup menu."
      (require 'popup)
      (let* ((corrects (if flyspell-sort-corrections
                           (sort (car (cdr (cdr poss))) 'string<)
                         (car (cdr (cdr poss)))))
             (cor-menu (if (consp corrects)
                           (mapcar (lambda (correct)
                                     (list correct correct))
                                   corrects)
                         '()))
             (affix (car (cdr (cdr (cdr poss)))))
             show-affix-info
             (base-menu  (let ((save (if (and (consp affix) show-affix-info)
                                         (list
                                          (list (concat "Save affix: " (car affix))
                                                'save)
                                          '("Accept (session)" session)
                                          '("Accept (buffer)" buffer))
                                       '(("Save word" save)
                                         ("Accept (session)" session)
                                         ("Accept (buffer)" buffer)))))
                           (if (consp cor-menu)
                               (append cor-menu (cons "" save))
                             save)))
             (menu (mapcar
                    (lambda (arg) (if (consp arg) (car arg) arg))
                    base-menu)))
        (cadr (assoc (popup-menu* menu :scroll-bar t) base-menu))))


    (defun flyspell-emacs-popup-choose (org-fun event poss word)
      (if (window-system)
          (funcall org-fun event poss word)
        (flyspell-emacs-popup-textual event poss word)))

    (eval-after-load "flyspell"
      '(progn
         (advice-add 'flyspell-emacs-popup :around #'flyspell-emacs-popup-choose)))
    )
#+end_src
** Fixme
#+begin_src emacs-lisp
  (use-package fic-mode
    :commands fic-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'fic-mode)
    :config

    (defun fic-view-listing ()
      "Use occur to list related FIXME keywords"
      (interactive)
      (occur "\\<\\(FIXME\\|WRITEME\\|WRITEME!\\|TODO\\|BUG\\):?"))
    )
#+end_src
** Minibuffer
Minibuffer configuration part. Nothing really outstanding, just the classical stuff.
#+begin_src emacs-lisp
  (use-package minibuffer
    :config
    (setq read-file-name-completion-ignore-case t
          completion-ignore-case t
          resize-mini-windows t)
    (file-name-shadow-mode 1)

    (add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode))
#+end_src
** Buffers
Some buffer specificities configuration like how to deal with trailing whitespaces or the
fill-column for example.
#+begin_src emacs-lisp
  ;; Open Large file
  (use-package vlf
    :ensure t
    :config
    (require 'vlf-setup))

  ;; Delete trailing-whitespace
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Unify the buffer name style
  (eval-after-load "uniquify"
    '(progn
       (setq uniquify-buffer-name-style 'forward)))

  ;;
  (setq-default fill-column 100)
#+end_src
** Productivity behavior
This part is dedicated to ensure productivity configuration. This involves mainly isolating,
capturing and bibliography.
*** Dark room
Sometimes I just want to ignore everything except the current document. Darkroom is exactly designed for that
#+begin_src emacs-lisp
(use-package darkroom :ensure t)
#+end_src
*** ORG/Web tools
Org-web-tools is a nice package which allows to sniff a webpage and convert it into org-mode
format. This is really useful to homogeneise documentation.
#+begin_src emacs-lisp
(use-package org-web-tools :ensure t)
#+end_src
*** Biblio
This part focus on bibliography/library configuration. The goal is to have a global configuration to
organize read papers or "to read" papers. This is mainly based on https://codearsonist.com/reading-for-programmers
#+begin_src emacs-lisp
  (use-package ivy-bibtex
    :ensure t
    :config
    (setq ivy-bibtex-bibliography "~/Dropbox/org/work/biblio/index.bib" ;; where your references are stored
          ivy-bibtex-library-path "~/Dropbox/org/work/biblio/lib/" ;; where your pdfs etc are stored
          ivy-bibtex-notes-path "~/Dropbox/org/work/biblio/index.org" ;; where your notes are stored
          bibtex-completion-bibliography "~/Dropbox/org/work/biblio/index.bib" ;; writing completion
          bibtex-completion-notes-path "~/Dropbox/org/work/biblio/index.org"))

  (use-package org-ref
    :after org
    :ensure t
    :chords
    (("uu"  . org-ref-cite-hydra/body))
    :init
    (setq org-ref-completion-library 'org-ref-ivy-cite
          org-ref-notes-directory "~/Dropbox/org/work/biblio"
          org-ref-bibliography-notes "~/Dropbox/org/work/biblio/index.org"
          org-ref-default-bibliography '("~/Dropbox/org/work/biblio/index.bib")
          org-ref-pdf-directory "~/Dropbox/org/work/biblio/lib/")

    :config
    (add-hook 'org-export-before-parsing-hook 'orcp-citeproc))

  (use-package interleave
    :ensure t
    :bind ("C-x i" . interleave-mode)
    :config
    (setq interleave-split-direction 'horizontal
          interleave-split-lines 20
          interleave-disable-narrowing t))
#+end_src
*** Paper
As I write papers, it is useful to have some helper to start to have the inspiration.
#+begin_src emacs-lisp
  (use-package academic-phrases :ensure t)
  (use-package powerthesaurus :ensure t)
#+end_src
** Process management
I want to have some services and processes managed directly in emacs. This services/processes are
closely related to my emacs use and there have to be shutdown when emacs is stopping.
*** Services
The main use case (actually the only for now) is the imap notification system. To do so I use the
couple prodigy (to start the process in emacs) and imapnotify to actually activate the push
service. Internally, imapnotify is going to call emacsclient to notify the user about a new mail.
#+begin_src emacs-lisp
  (use-package prodigy
    :ensure t
    :config

    (prodigy-define-service
      :name "Saarland imap notify"
      :command "imapnotify"
      :args '("-c" "~/configuration/imapnotify/saarland.js")
      :tags '(work mail)
      :stop-signal 'sigterm
      :auto-start t
      :kill-process-buffer-on-stop t)

    (prodigy-define-service
      :name "hikoseb imap notify"
      :command "imapnotify"
      :args '("-c" "~/configuration/imapnotify/hikoseb.js")
      :tags '(perso mail)
      :stop-signal 'sigterm
      :auto-start t
      :kill-process-buffer-on-stop t)

    (prodigy-define-service
      :name "sebgmail imap notify"
      :command "imapnotify"
      :args '("-c" "~/configuration/imapnotify/sebgmail.js")
      :tags '(perso mail)
      :stop-signal 'sigterm
      :auto-start t
      :kill-process-buffer-on-stop t)

    (prodigy-define-service
      :name "DFKI imap notify"
      :command "imapnotify"
      :args '("-c" "~/configuration/imapnotify/dfki.js")
      :tags '(work mail)
      :stop-signal 'sigterm
      :auto-start t
      :kill-process-buffer-on-stop t)

    (prodigy-define-service
      :name "MMCI imap notify"
      :command "imapnotify"
      :args '("-c" "~/configuration/imapnotify/mmci.js")
      :tags '(work mail)
      :stop-signal 'sigterm
      :auto-start t
      :kill-process-buffer-on-stop t)
    )
#+end_src
*** System daemons
With this package I can also manage my system services (tried on archlinux).
#+begin_src emacs-lisp
  (use-package daemons :ensure t)
#+end_src
*** Background process configuration
Starting process in background is really nice to avoid being spammed. So let's make it available
#+begin_src emacs-lisp
  (defun my-bpr-on-start (process)
    "Routine to allow colors in commint buffer"
    (set-process-filter process 'comint-output-filter))

  (use-package bpr
    :ensure t
    :after projectile
    :config
    (setq bpr-colorize-output t
          bpr-close-after-success t
          bpr-use-projectile t
          bpr-process-mode #'comint-mode
          bpr-window-creator #'split-window-vertically
          bpr-on-start 'my-bpr-on-start))
#+end_src
** Environment control helpers
*** desktop environment
#+begin_src emacs-lisp
  (use-package desktop-environment
    :ensure t
    :config
    (setq desktop-environment-brightness-normal-increment "-inc 10"
          desktop-environment-brightness-normal-decrement "-dec 10"
          desktop-environment-brightness-small-increment "-inc 5"
          desktop-environment-brightness-small-decrement "-dec 5"
          desktop-environment-brightness-get-command "xbacklight -get"
          desktop-environment-brightness-set-command "xbacklight"
          )
    (desktop-environment-mode))
#+end_src
*** pulseaudio
#+begin_src emacs-lisp
  (use-package pulseaudio-control
    :ensure t
    :config
    (setq pulseaudio-control--current-sink "@DEFAULT_SINK@"))
#+end_src
** Language interaction (LSP)
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init (setq lsp-inhibit-message t
                lsp-eldoc-render-all nil
                lsp-highlight-symbol-at-point nil))

  (use-package company-lsp
    :after  company
    :ensure t
    :hook
    (java-mode . (lambda () (push 'company-lsp company-backends)))
    :config
    (setq company-lsp-enable-snippet t
          company-lsp-cache-candidates t))

  (use-package lsp-ui
    :ensure t
    :config
    (setq lsp-ui-sideline-enable t
          lsp-ui-sideline-show-symbol t
          lsp-ui-sideline-show-hover t
          lsp-ui-sideline-show-code-actions t
          lsp-ui-sideline-update-mode 'point))
#+end_src
* Completion
This part focuses on completion configuration. Language specific configurations are not done here
but in the dedicate language configuration part. This section is just for global configuration.
** Ivy/swipper/counsel
I do prefer vertical completion, which is why I use extensively Ivy and extensions.
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode)
    (setq ivy-display-style 'fancy
          ivy-use-virtual-buffers t
          enable-recursive-minibuffers t
          ivy-use-selectable-prompt t))


  (use-package counsel
    :ensure t
    :config
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file))
#+end_src
** Company
In order to have inline completion, really important for coding, I use company. However I adapted
some facing attributes. Each language is also adding its backend when needed. Therefore, only global
configuration here.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    ;; Global
    (setq company-idle-delay 1
          company-minimum-prefix-length 1
          company-show-numbers t
          company-tooltip-limit 20)


    ;; Facing
    (unless (face-attribute 'company-tooltip :background)
      (set-face-attribute 'company-tooltip nil :background "black" :foreground "gray40")
      (set-face-attribute 'company-tooltip-selection nil :inherit 'company-tooltip :background "gray15")
      (set-face-attribute 'company-preview nil :background "black")
      (set-face-attribute 'company-preview-common nil :inherit 'company-preview :foreground "gray40")
      (set-face-attribute 'company-scrollbar-bg nil :inherit 'company-tooltip :background "gray20")
      (set-face-attribute 'company-scrollbar-fg nil :background "gray40"))

    ;; Default backends
    (setq company-backends '((company-files)))

    ;; Activating globally
    (global-company-mode t))


  (use-package company-quickhelp
    :ensure t
    :after company
    :config
    (company-quickhelp-mode 1))
#+end_src
** Templating
I use templates for 2 use cases: the buffer edition and the file specific templates. Both are relying on *yasnippet*.
*** Edition templates
The default configuration of yasnippet consists of activating it and plugging it with company.
Ivy-yasnippet is used for snippet discovery.
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :after company
    :config

    ;; Adding yasnippet support to company
    (add-to-list 'company-backends '(company-yasnippet))

    ;; Activate global
    (yas-global-mode))

  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet
    )

  (use-package ivy-yasnippet
    :ensure t
    :after yasnippet)
#+end_src
*** Filetype templates
This part is using yatemplate (an over-layer of yasnippet) coupled with auto-insert to have a set of
file type dedicated templates. The templates are available in =third_parties/templates= directory.
#+begin_src emacs-lisp
  (use-package yatemplate
    :ensure t
    :after yasnippet
    :config

    ;; Define template directory
    (setq yatemplate-dir (concat config-basedir "/third_parties/templates"))

    ;; Coupling with auto-insert
    (setq auto-insert-alist nil)
    (yatemplate-fill-alist)
    ;; (add-hook 'find-file-hook 'auto-insert)
    )
#+end_src
* Filetype
Now that we have achieved the global configuration, we are going to focus on the language specific
configuration.
** C/C++
C and C++ configuration is mainly relying on irony. Some minor adaptations, like the compilation
part, are also integrated.
*** Irony main configuration
We just load irony add support for c derivative mode.
#+begin_src emacs-lisp
  (use-package irony
    :ensure t
    :defer t
    :hook ((c-mode . irony-mode)
           (objc-mode . irony-mode)
           (c++-mode .irony-mode)))
#+end_src
*** Checking/documentation
#+begin_src emacs-lisp
  (use-package flycheck-irony
    :ensure t
    :after (flycheck irony)
    :defer t)

  (use-package irony-eldoc
    :ensure t
    :after (irony)
    :defer t)

#+end_src
*** Completion
For the completion, we are relying on company and irony. The configuration consists of add irony
into company backend.
#+begin_src emacs-lisp
  (use-package company-irony
    :ensure t
    :hook (irony-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-irony)))))

  (use-package company-irony-c-headers
    :ensure t
    :hook (irony-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-irony-c-headers)))))
#+end_src
*** Adapt compilation
Sometimes, I don't want to have a makefile or any complicated project compilation. So I just use
gcc/g++. Therefore, here, either there is a makefile and use it, either there is none and I use
gcc/++ directly.
#+begin_src emacs-lisp
  (add-hook 'c-mode-hook
            (lambda ()
              (unless (or (file-exists-p "Makefile") (boundp 'buffer-file-name))
                (set (make-local-variable 'compile-command)
                     (let ((file (file-name-nondirectory buffer-file-name)))
                       (concat "gcc -g -Wall -Wextra -o " (file-name-sans-extension file) " " file))))))


  (add-hook 'c++-mode-hook
            (lambda ()
              (unless (file-exists-p "Makefile")
                (set (make-local-variable 'compile-command)
                     (let ((file (file-name-nondirectory buffer-file-name)))
                       (concat "g++ -g -Wall -Wextra -o " (file-name-sans-extension file) " " file))))))
#+END_SRC
*** C++ specificities
For C++, I use a dedicated font lock.
#+begin_src emacs-lisp
(use-package modern-cpp-font-lock :ensure t)
#+end_src
** Configuration and log files
This part is dedicated to unix and more general configuration files as well as logs.
*** Default unix configuration
Config-general-mode is applied for all unix configuration files.
#+begin_src emacs-lisp
  (use-package config-general-mode
    :ensure t
    :mode ("\\.conf$" "\\.*rc$"))
#+end_src
*** Authinfo
#+begin_src emacs-lisp
  (use-package authinfo-mode
    :ensure quelpa
    :quelpa (authinfo-mode :repo "seblemaguer/authinfo-mode" :fetcher github)
    :mode ("\\.authinfo\\(?:\\.gpg\\)\\'" . authinfo-mode))
#+end_src
*** Apache
#+begin_src emacs-lisp
  (use-package apache-mode
    :ensure t
    :mode ("\\.htaccess\\'" "httpd\\.conf\\'" "srm\\.conf\\'"
           "access\\.conf\\'" "sites-\\(available\\|enabled\\)/"))
#+end_src
*** SSH configuration
#+begin_src emacs-lisp
  (use-package ssh-config-mode
    :ensure t
    :mode ("/\\.ssh/config\\'" "/system/ssh\\'" "/sshd?_config\\'" "/known_hosts\\'" "/authorized_keys2?\\'")
    :hook (ssh-config-mode . turn-on-font-lock)

    :config
    (autoload 'ssh-config-mode "ssh-config-mode" t))
#+end_src
*** Logview
#+begin_src emacs-lisp
  (use-package logview
    :ensure t
    :mode ("syslog\\(?:\\.[0-9]+\\)" "\\.log\\(?:\\.[0-9]+\\)?\\'"))
#+end_src
*** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode (".yaml$"))

  (use-package yaml-tomato
    :ensure t)
#+end_src
*** vimrc
#+begin_src emacs-lisp
    (use-package vimrc-mode
      :ensure t
      :mode ("^\\.vimrc\\'"))
#+end_src
** CSS
#+BEGIN_SRC emacs-lisp
  (use-package scss
    :defer t
    :mode ("\\.scss\\'")
    :config
    (autoload 'scss-mode "scss-mode")
    (setq scss-compile-at-save 'nil))
#+END_SRC
** CSV
 #+begin_src emacs-lisp
   (use-package csv-mode
     :ensure t
     :defer t
     :config

     ;; Define separators
     (setq csv-separators '("," ";" ":" " ")))


     ;; Subpackages
   (use-package csv-nav
     :ensure t
     :disabled t)
 #+end_src
** Cue
#+begin_src emacs-lisp
  (use-package cue-mode
    :ensure quelpa
    :quelpa (cue-mode :repo "seblemaguer/cue-mode" :fetcher github)
    :mode ("\\.cue$"))

#+end_src
** Graphviz
#+begin_src emacs-lisp
  (use-package graphviz-dot-mode
    :ensure t
    :init
    (defvar default-tab-width nil)

    :mode ("\\.dot\\'"))
#+end_src

** Java based
*** Global (lsp-java)
#+begin_src emacs-lisp
  (use-package lsp-java
    :ensure t
    :requires (lsp-ui-flycheck lsp-ui-sideline)
    :hook
    (java-mode . lsp-java-enable)
    (java-mode . flycheck-mode)
    (java-mode . (lambda () (lsp-ui-flycheck-enable t)))
    (java-mode . lsp-ui-sideline-mode)
    :config
    (setq lsp-java-save-action-organize-imports nil))
#+end_src
*** Snippets
#+begin_src emacs-lisp
  (use-package java-snippets
    :ensure t
    :after yasnippet)
#+end_src
*** Javadoc
#+begin_src emacs-lisp
  (use-package javadoc-lookup
    :ensure t
    :config
    (when (file-exists-p "/usr/share/doc/openjdk-8-jdk/api")
      (javadoc-add-roots "/usr/share/doc/openjdk-8-jdk/api"))

    (javadoc-add-artifacts [org.lwjgl.lwjgl lwjgl "2.8.2"]
                           [com.nullprogram native-guide "0.2"]
                           [org.apache.commons commons-math3 "3.0"]
                           ;; [de.dfki.lt.jtok jtok-core "1.9.3"]
                           ))

#+end_src
*** Groovy
**** Global groovy
#+begin_src emacs-lisp
  (use-package groovy-mode
    :ensure t
    :mode ("\.groovy$" "\.gradle$")
    :interpreter ("gradle" "groovy")
    :config
    (autoload 'run-groovy "inf-groovy" "Run an inferior Groovy process")
    (autoload 'inf-groovy-keys "inf-groovy" "Set local key defs for inf-groovy in groovy-mode")

    ;; Some keys for
    (add-hook 'groovy-mode-hook
              '(lambda ()
                 (inf-groovy-keys))))

  ;; Subpackages
  (use-package groovy-imports :ensure t)
#+end_src
**** Gradle specificities
#+begin_src emacs-lisp
  (use-package flycheck-gradle
    :ensure t
    :defer t
    :after (gradle flycheck))
#+end_src
** Latex
*** Global
#+begin_src emacs-lisp
  (use-package tex-site
    :ensure auctex
    :defer t
    :after (tex latex)
    :config

    ;; Spelling
    (setq ispell-tex-skip-alists
          '((
             ;;("%\\[" . "%\\]") ; AMStex block comment...
             ;; All the standard LaTeX keywords from L. Lamport's guide:
             ;; \cite, \hspace, \hspace*, \hyphenation, \include, \includeonly
             ;; \input, \label, \nocite, \rule (in ispell - rest included here)
             ("\\\\addcontentsline"              ispell-tex-arg-end 2)
             ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end)
             ("\\\\\\([aA]lph\\|arabic\\)"   ispell-tex-arg-end)
             ("\\\\author"                         ispell-tex-arg-end)
             ;; New regexps here --- kjh
             ("\\\\\\(text\\|paren\\)cite" ispell-tex-arg-end)
             ("\\\\cite\\(t\\|p\\|year\\|yearpar\\)" ispell-tex-arg-end)
             ("\\\\bibliographystyle"                ispell-tex-arg-end)
             ("\\\\makebox"                  ispell-tex-arg-end 0)
             ("\\\\e?psfig"                  ispell-tex-arg-end)
             ("\\\\document\\(class\\|style\\)" .
              "\\\\begin[ \t\n]*{[ \t\n]*document[ \t\n]*}"))
            (
             ;; delimited with \begin.  In ispell: displaymath, eqnarray,
             ;; eqnarray*, equation, minipage, picture, tabular,
             ;; tabular* (ispell)
             ("\\(figure\\|table\\)\\*?"     ispell-tex-arg-end 0)
             ("\\(equation\\|eqnarray\\)\\*?"     ispell-tex-arg-end 0)
             ("list"                                 ispell-tex-arg-end 2)
             ("program" . "\\\\end[ \t\n]*{[ \t\n]*program[ \t\n]*}")
             ("verbatim\\*?"."\\\\end[ \t\n]*{[ \t\n]*verbatim\\*?[ \t\n]*}")
             ("lstlisting\\*?"."\\\\end[ \t\n]*{[ \t\n]*lstlisting\\*?[ \t\n]*}"))))

    ;; Pdf activated by default
    (TeX-global-PDF-mode 1)

    ;; Diverse
    (setq-default TeX-master nil)
    (setq TeX-parse-self t
          TeX-auto-save t)

    ;; Filling
    (add-hook 'LaTeX-mode-hook 'turn-off-auto-fill)
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (TeX-fold-mode t)))

    ;; Minor helpers for comment and quotes
    (add-to-list 'LaTeX-verbatim-environments "comment")
    (setq TeX-open-quote "\enquote{"
          TeX-close-quote "}")

    ;; Indentation
    (setq LaTeX-indent-level 4
          LaTeX-item-indent 0
          TeX-brace-indent-level 4
          TeX-newline-function 'newline-and-indent)


    ;; Some usefull hooks
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook 'outline-minor-mode)

    (defadvice LaTeX-fill-region-as-paragraph (around LaTeX-sentence-filling)
      "Start each sentence on a new line."
      (let ((from (ad-get-arg 0))
            (to-marker (set-marker (make-marker) (ad-get-arg 1)))
            tmp-end)
        (while (< from (marker-position to-marker))
          (forward-sentence)
          ;; might have gone beyond to-marker --- use whichever is smaller:
          (ad-set-arg 1 (setq tmp-end (min (point) (marker-position to-marker))))
          ad-do-it
          (ad-set-arg 0 (setq from (point)))
          (unless (or
                   (bolp)
                   (looking-at "\\s *$"))
            (LaTeX-newline)))
        (set-marker to-marker nil)))
    (ad-activate 'LaTeX-fill-region-as-paragraph)



    ;; PDF/Tex correlation
    (setq TeX-source-correlate-method 'synctex)
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)

    ;; Keys
    (define-key LaTeX-mode-map (kbd "C-c C-=") 'align-current))
#+end_src
*** Bibtex
#+begin_src emacs-lisp
  (use-package bibtex
    :defer t
    :config
    (defun bibtex-generate-autokey ()
      (let* ((bibtex-autokey-names nil)
             (bibtex-autokey-year-length 2)
             (bibtex-autokey-name-separator "\0")
             (names (split-string (bibtex-autokey-get-names) "\0"))
             (year (bibtex-autokey-get-year))
             (name-char (cond ((= (length names) 1) 4)
                              ((= (length names) 2) 2)
                              (t 1)))
             (existing-keys (bibtex-parse-keys))
             key)
        (setq names (mapconcat (lambda (x)
                                 (substring x 0 name-char))
                               names
                               ""))
        (setq key (format "%s%s" names year))
        (let ((ret key))
          (loop for c from ?a to ?z
                while (assoc ret existing-keys)
                do (setq ret (format "%s%c" key c)))
          ret)))

    (setq bibtex-align-at-equal-sign t
          bibtex-autokey-name-year-separator ""
          bibtex-autokey-year-title-separator ""
          bibtex-autokey-titleword-first-ignore '("the" "a" "if" "and" "an")
          bibtex-autokey-titleword-length 100
          bibtex-autokey-titlewords 1))
#+end_src
*** Completion
#+begin_src emacs-lisp
  ;; Completion
  (setq TeX-auto-global (format "%s/auctex/style" generated-basedir))
  ;; (add-to-list 'TeX-style-path TeX-auto-global) ;; FIXME: what is this variable


  (use-package company-auctex
    :ensure t
    :hook
    (latex-mode . (company-auctex-init)))


  (use-package company-bibtex
    :ensure t
    :hook
    (latex-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-bibtex))))
    (org-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-bibtex)))))

  (use-package company-reftex
    :ensure t
    :hook
    (latex-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-reftex-labels company-reftex-citations))))
    (org-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-reftex-labels company-reftex-citations)))))

  (use-package company-math
    :ensure t
    :hook
    (latex-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-math-symbols-unicode))))
    (org-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-math-symbols-unicode)))))
#+end_src
*** Compilation
#+begin_src emacs-lisp
  ;; Escape mode
  (defun TeX-toggle-escape nil
    (interactive)
    "Toggle Shell Escape"
    (setq LaTeX-command
          (if (string= LaTeX-command "latex")
              "latex -shell-escape"
            "latex"))
    (message (concat "shell escape "
                     (if (string= LaTeX-command "latex -shell-escape")
                         "enabled"
                       "disabled"))
             )
    )

  (use-package auctex-latexmk
    :ensure t
    :config
    (setq auctex-latexmk-inherit-TeX-PDF-mode t)
    (auctex-latexmk-setup))

  (setq TeX-show-compilation nil)

  ;; Redine TeX-output-mode to get the color !
  (define-derived-mode TeX-output-mode TeX-special-mode "LaTeX Output"
    "Major mode for viewing TeX output.
    \\{TeX-output-mode-map} "
    :syntax-table nil
    (set (make-local-variable 'revert-buffer-function)
	 #'TeX-output-revert-buffer)

    (set (make-local-variable 'font-lock-defaults)
	 '((("^!.*" . font-lock-warning-face) ; LaTeX error
	    ("^-+$" . font-lock-builtin-face) ; latexmk divider
	    ("^\\(?:Overfull\\|Underfull\\|Tight\\|Loose\\).*" . font-lock-builtin-face)
	    ;; .....
	    )))

    ;; special-mode makes it read-only which prevents input from TeX.
    (setq buffer-read-only nil))
#+end_src
*** Reftex
#+begin_src emacs-lisp
  (use-package reftex
    :defer t
    :init
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
    :config
    (setq reftex-save-parse-info t
          reftex-enable-partial-scans t
          reftex-use-multiple-selection-buffers t
          reftex-plug-into-AUCTeX t
          reftex-vref-is-default t
          reftex-cite-format
          '((?\C-m . "\\cite[]{%l}")
            (?t . "\\textcite{%l}")
            (?a . "\\autocite[]{%l}")
            (?p . "\\parencite{%l}")
            (?f . "\\footcite[][]{%l}")
            (?F . "\\fullcite[]{%l}")
            (?x . "[]{%l}")
            (?X . "{%l}"))

          font-latex-match-reference-keywords
          '(("cite" "[{")
            ("cites" "[{}]")
            ("footcite" "[{")
            ("footcites" "[{")
            ("parencite" "[{")
            ("textcite" "[{")
            ("fullcite" "[{")
            ("citetitle" "[{")
            ("citetitles" "[{")
            ("headlessfullcite" "[{"))

          reftex-cite-prompt-optional-args nil
          reftex-cite-cleanup-optional-args t))
#+end_src
*** Preview
#+begin_src emacs-lisp
  (use-package latex-math-preview
    :ensure t
    :config
    (autoload 'LaTeX-preview-setup "preview")
    (setq preview-scale-function 1.2)
    (add-hook 'LaTeX-mode-hook 'LaTeX-preview-setup))
#+end_src
** Ledger
 #+begin_src emacs-lisp
   (use-package ledger-mode
     :ensure t
     :defer t
     :mode ("\\.ledger$"))

   (use-package flycheck-ledger
     :ensure t
     :after (flycheck ledger-mode))
 #+end_src
** TODO (E)Lisp
#+begin_src emacs-lisp
  ;; Disable checking doc
  (use-package flycheck
    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

  ;; Package lint
  (use-package package-lint :ensure t)

  ;; Pretty print for lisp
  (use-package ipretty :ensure t)
#+end_src
** Lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :ensure t)

  (use-package company-lua
    :after lua-mode
    :after company
    :ensure t)
#+end_src
** Matlab
#+begin_src emacs-lisp
  (use-package matlab-load
    :ensure matlab-mode
    :mode ("\\.m\\'" . matlab-mode)
    :config

    ;; Command defines
    (setq matlab-shell-command-switches '("-nodesktop -nosplash")
          mlint-programs '("mlint" "glnxa64/mlint")))
#+end_src
** Markdown
*** Global
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("\\.md$"))


  (use-package markdown-mode+
    :ensure t
    :after markdown-mode
    :defer t)
#+end_src
*** Syntax highlight in block
#+begin_src emacs-lisp
  (use-package polymode
    :ensure t
    :config
    (require 'poly-markdown))
#+end_src
** PDF
*** Global
  #+begin_src emacs-lisp
    (use-package pdf-tools
      :ensure t
      :after hydra
      :config

      ;; Install what need to be installed !
      (pdf-tools-install t t t)
      ;; open pdfs scaled to fit page
      (setq-default pdf-view-display-size 'fit-page)
      ;; automatically annotate highlights
      (setq pdf-annot-activate-created-annotations t)
      ;; use normal isearch
      (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
      ;; more fine-grained zooming
      (setq pdf-view-resize-factor 1.1)

      ;;
      (add-hook 'pdf-view-mode-hook
                (lambda ()
                  (pdf-misc-size-indication-minor-mode)
                  (pdf-links-minor-mode)
                  (pdf-isearch-minor-mode)
                  (cua-mode 0)
                  ))

      (add-to-list 'auto-mode-alist (cons "\\.pdf$" 'pdf-view-mode))

      ;; Keys
      (bind-keys :map pdf-view-mode-map
                 ("/" . hydra-pdftools/body)
                 ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
                 ("g"  . pdf-view-first-page)
                 ("G"  . pdf-view-last-page)
                 ("l"  . image-forward-hscroll)
                 ("h"  . image-backward-hscroll)
                 ("j"  . pdf-view-next-page)
                 ("k"  . pdf-view-previous-page)
                 ("e"  . pdf-view-goto-page)
                 ("u"  . pdf-view-revert-buffer)
                 ("al" . pdf-annot-list-annotations)
                 ("ad" . pdf-annot-delete)
                 ("aa" . pdf-annot-attachment-dired)
                 ("am" . pdf-annot-add-markup-annotation)
                 ("at" . pdf-annot-add-text-annotation)
                 ("y"  . pdf-view-kill-ring-save)
                 ("i"  . pdf-misc-display-metadata)
                 ("s"  . pdf-occur)
                 ("b"  . pdf-view-set-slice-from-bounding-box)
                 ("r"  . pdf-view-reset-slice))

      (defhydra hydra-pdftools (:color blue :hint nil)
        "
          PDF tools

       Move  History   Scale/Fit                  Annotations     Search/Link     Do
    ------------------------------------------------------------------------------------------------
         ^^_g_^^      _B_    ^â§^    _+_    ^ ^     _al_: list    _s_: search    _u_: revert buffer
         ^^^â^^^      ^â^    _H_    ^â^  â¦ _W_ â¤   _am_: markup  _o_: outline   _i_: info
         ^^_p_^^      ^ ^    ^â¥^    _0_    ^ ^     _at_: text    _F_: link      _d_: dark mode
         ^^^â^^^      ^â^  â­â^â^ââ  ^â^  â­â^ ^ââ   _ad_: delete  _f_: search link
    _h_ âpag_e_â _l_  _N_  â _P_ â  _-_    _b_     _aa_: dired
         ^^^â^^^      ^ ^  â°â^â^ââ¯  ^ ^  â°â^ ^ââ¯   _y_:  yank
         ^^_n_^^      ^ ^  _r_eset slice box
         ^^^â^^^
         ^^_G_^^
    "
              ("\\" hydra-master/body "back")
              ("<ESC>" nil "quit")
              ("al" pdf-annot-list-annotations)
              ("ad" pdf-annot-delete)
              ("aa" pdf-annot-attachment-dired)
              ("am" pdf-annot-add-markup-annotation)
              ("at" pdf-annot-add-text-annotation)
              ("y"  pdf-view-kill-ring-save)
              ("+" pdf-view-enlarge :color red)
              ("-" pdf-view-shrink :color red)
              ("0" pdf-view-scale-reset)
              ("H" pdf-view-fit-height-to-window)
              ("W" pdf-view-fit-width-to-window)
              ("P" pdf-view-fit-page-to-window)
              ("n" pdf-view-next-page-command :color red)
              ("p" pdf-view-previous-page-command :color red)
              ("d" pdf-view-dark-minor-mode)
              ("b" pdf-view-set-slice-from-bounding-box)
              ("r" pdf-view-reset-slice)
              ("g" pdf-view-first-page)
              ("G" pdf-view-last-page)
              ("e" pdf-view-goto-page)
              ("o" pdf-outline)
              ("s" pdf-occur)
              ("i" pdf-misc-display-metadata)
              ("u" pdf-view-revert-buffer)
              ("F" pdf-links-action-perfom)
              ("f" pdf-links-isearch-link)
              ("B" pdf-history-backward :color red)
              ("N" pdf-history-forward :color red)
              ("l" image-forward-hscroll :color red)
              ("h" image-backward-hscroll :color red)))
  #+end_src
*** Org specific
  #+begin_src emacs-lisp
    (use-package org-pdfview
      :ensure t
      :config

      (add-to-list 'org-file-apps
		   '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link)))))
  #+end_src
** Perl
#+BEGIN_SRC emacs-lisp
  (use-package cperl-mode
    :config
    (defalias 'perl-mode 'cperl-mode)
    (cperl-set-style "BSD")

    ;; Documentation
    (cperl-lazy-install)
    (setq cperl-lazy-help-time 2)

    ;; Folding
    (add-hook 'cperl-mode-hook 'hs-minor-mode)


    ;; Interactive shell
    (autoload 'run-perl "inf-perl" "Start perl interactive shell" t)

    ;; Debugger
    (autoload 'perldb-ui "perldb-ui" "perl debugger" t)

    ;; Executable perl
    (when (and buffer-file-name
               (not (string-match "\\.\\(pm\\|pod\\)$" (buffer-file-name))))
      (add-hook 'after-save-hook 'executable-chmod nil t))
    (set (make-local-variable 'compile-dwim-check-tools) nil))
#+END_SRC

** Praat
#+BEGIN_SRC emacs-lisp
  (use-package praat-mode
    :mode ("\\.praat" "\\.[tT][Gg]"))
#+END_SRC
** Python
*** Global configuration
#+begin_src emacs-lisp
  (use-package python
    :mode
    ("\\.py\\'" . python-mode)
    ("\\.wsgi$" . python-mode)

    :init
    (setq-default indent-tabs-mode nil)

    :config
    (setq python-indent-offset 4))
#+end_src
*** Anaconda configuration
#+begin_src emacs-lisp
  (use-package anaconda-mode
    :ensure t
    :after python
    :hook
    (python-mode . anaconda-mode)
    (python-mode . anaconda-eldoc-mode))

  (use-package company-anaconda
    :ensure t
    :hook (python-mode . (lambda () (add-to-list (make-local-variable 'company-backends)'(company-anaconda :with company-capf)))))
#+end_src
*** Pipenv
#+begin_src emacs-lisp
  (use-package pipenv
    :ensure t
    :hook
    ((python-mode . pipenv-mode))

    :init
    (setq pipenv-projectile-after-switch-function
          #'pipenv-projectile-after-switch-extended))
#+end_src
*** Interpreter configuration
#+begin_src emacs-lisp
  (use-package ein
    :ensure t
    :config

    (setq ein:complete-on-dot -1)

    (cond
     ((eq system-type 'darwin) (setq ein:console-args '("--gui=osx" "--matplotlib=osx" "--colors=Linux")))
     ((eq system-type 'gnu/linux) (setq ein:console-args '("--gui=gtk3" "--matplotlib=gtk3" "--colors=Linux"))))

    (setq ein:query-timeout 1000)

    (defun load-ein ()
      (ein:notebooklist-load)
      (interactive)
      (ein:notebooklist-open)))
#+end_src
*** Sphinx documentation
#+begin_src emacs-lisp
  (use-package sphinx-doc
    :ensure t
    :config
    (add-hook 'python-mode-hook
              (lambda ()
                (sphinx-doc-mode t))))
#+end_src
** R
*** ESS configuration
#+begin_src emacs-lisp
  (use-package ess
    :ensure t)

  (use-package ess-smart-equals
    :ensure t
    :disabled t %% FIXME: problem at loading: (void-variable ess-S-assign) !
    :after ess)

  (use-package ess-smart-underscore
    :ensure t
    :after ess)

  (use-package ess-view
    :ensure t
    :after ess)

  (use-package ess-R-data-view
    :ensure t
    :after ess)
#+end_src
*** Support drag & drop
#+begin_src emacs-lisp
(use-package extend-dnd
  :ensure t
  :config
  (extend-dnd-activate))
#+end_src
*** completing
#+begin_src emacs-lisp
  (use-package company-statistics
    :ensure t
    :after company
    :hook (after-init . company-statistics-mode))
#+end_src
** Shell
#+begin_src emacs-lisp
  (use-package company-shell
    :ensure t
    :hook
    (eshell-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-shell company-shell-env company-fish-shell))))
    (sh-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-shell company-shell-env company-fish-shell))))
    )
#+end_src
** PlantUML
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :ensure t
    :after org
    :mode ("\\.plantuml\\'")
    :config
    (setq plantuml-jar-path "/opt/plantuml/plantuml.jar"
          org-plantuml-jar-path plantuml-jar-path))
#+end_src
** Web configuration
*** Global web configuration
#+begin_src emacs-lisp
    (use-package web-mode
      :ensure t
      :mode
      ("\\.phtml\\'" "\\.tpl\\.php\\'" "\\.[agj]sp\\'" "\\.as[cp]x\\'"
      "\\.erb\\'" "\\.mustache\\'" "\\.djhtml\\'" "\\.html?\\'")

      :init
      (setq web-mode-markup-indent-offset 2
            web-mode-code-indent-offset 2
            web-mode-css-indent-offset 2

            web-mode-enable-auto-pairing t
            web-mode-enable-auto-expanding t
            web-mode-enable-css-colorization t)

      :config
      ;; Template
      (setq web-mode-engines-alist
            '(("php"    . "\\.phtml\\'")
              ("blade"  . "\\.blade\\."))
            )

      )

    (use-package web-beautify
      :ensure t
      :commands (web-beautify-css
                 web-beautify-css-buffer
                 web-beautify-html
                 web-beautify-html-buffer
                 web-beautify-js
                 web-beautify-js-buffer))

    (use-package web-completion-data :ensure t)
    (use-package web-mode-edit-element :ensure t)
#+end_src
*** EMMET
#+begin_src emacs-lisp
  (use-package emmet-mode
    :ensure t
    :diminish (emmet-mode . "Îµ")
    :bind* (("C-)" . emmet-next-edit-point)
            ("C-(" . emmet-prev-edit-point))
    :commands (emmet-mode
               emmet-next-edit-point
               emmet-prev-edit-point)
    :hook
    ((sgml-mode-hook . emmet-mode)
     (html-mode . emmet-mode)
     (web-mode . emmet-mode))
    :init
    (setq emmet-indentation 2
          emmet-move-cursor-between-quotes t))
#+end_src
*** Completion
#+begin_src emacs-lisp
  (use-package company-web
    :ensure t
    :hook (web-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-web-html)))))
#+end_src
*** Javascript
**** Global
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode
    ("\\.js\\'")
    :config

    ;; Better imenu
    (add-hook 'js2-mode-hook #'js2-imenu-extras-mode))

  (use-package js2-refactor
    :ensure t
    :after (js2-mode hydra)
    :hook
    (js2-mode . js2-refactor-mode)

    :config

    (js2r-add-keybindings-with-prefix "C-c C-r")
    (define-key js2-mode-map (kbd "C-k") #'js2r-kill)

    ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
    ;; unbind it.
    (define-key js-mode-map (kbd "M-.") nil)


    ;; Hydra / js2
    (defhydra js2-refactor-hydra (:color blue :hint nil)
      "
        Javascript

    ^Functions^                    ^Variables^               ^Buffer^                      ^sexp^               ^Debugging^
    ------------------------------------------------------------------------------------------------------------------------------
    _lp_: Localize Parameter      _ev_: Extract variable   _wi_: Wrap buffer in IIFE    _k_:  js2 kill      _lt_: log this
    _ef_: Extract function        _iv_: Inline variable    _ig_: Inject global in IIFE  _ss_: split string  _dt_: debug this
    _ip_: Introduce parameter     _rv_: Rename variable    _ee_: Expand node at point   _sl_: forward slurp
    _em_: Extract method          _vt_: Var to this        _cc_: Contract node at point _ba_: forward barf
    _ao_: Arguments to object     _sv_: Split var decl.    _uw_: unwrap
    _tf_: Toggle fun exp and decl _ag_: Add var to globals
    _ta_: Toggle fun expr and =>  _ti_: Ternary to if
  "
      ("ee" js2r-expand-node-at-point)
      ("cc" js2r-contract-node-at-point)
      ("ef" js2r-extract-function)
      ("em" js2r-extract-method)
      ("tf" js2r-toggle-function-expression-and-declaration)
      ("ta" js2r-toggle-arrow-function-and-expression)
      ("ip" js2r-introduce-parameter)
      ("lp" js2r-localize-parameter)
      ("wi" js2r-wrap-buffer-in-iife)
      ("ig" js2r-inject-global-in-iife)
      ("ag" js2r-add-to-globals-annotation)
      ("ev" js2r-extract-var)
      ("iv" js2r-inline-var)
      ("rv" js2r-rename-var)
      ("vt" js2r-var-to-this)
      ("ao" js2r-arguments-to-object)
      ("ti" js2r-ternary-to-if)
      ("sv" js2r-split-var-declaration)
      ("ss" js2r-split-string)
      ("uw" js2r-unwrap)
      ("lt" js2r-log-this)
      ("dt" js2r-debug-this)
      ("sl" js2r-forward-slurp)
      ("ba" js2r-forward-barf)
      ("k" js2r-kill)
      ("q" nil)))

  (use-package xref-js2
    :ensure t
    :after js2-mode
    :config

    (add-hook 'js2-mode-hook
              (lambda ()
                (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))

  (use-package indium
    :ensure t
    :diminish indium-interaction-mode
    :init
    (setq indium-update-script-on-save t))
  ;; (setq indium-workspace-file (no-littering-expand-var-file-name "indium-workspaces.el"))))


  (use-package gulp-task-runner
    :commands (gulp))

  (use-package js-auto-beautify
    :ensure t)

  (use-package js-import
    :ensure t)

  (use-package company-tern
    :ensure t
    :after (company tern xref-js2)
    :hook
    (js2-mode . tern-mode)
    (js2-mode . company-mode)

    :config
    (add-to-list 'company-backends 'company-tern)

    ;; Disable completion keybindings, as we use xref-js2 instead
    (define-key tern-mode-keymap (kbd "M-.") nil)
    (define-key tern-mode-keymap (kbd "M-,") nil)

    (setq company-tern-property-marker " <p>"
          company-tern-property-marker nil
          company-tern-meta-as-single-line t
          company-tooltip-align-annotations t))
#+END_SRC
**** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t
    :mode
    ("\\.json$"))


  ;; Subpackage
  (use-package json-reformat :ensure t)
#+end_src
**** AngularJS
Extracted from https://github.com/zakame/emacs-for-javascript
#+begin_src emacs-lisp
  (use-package react-snippets
    :ensure t)

  (use-package angular-mode
    :ensure t
    )

  (use-package angular-snippets
    :ensure t
    :config
    (eval-after-load "web-mode"
      '(bind-key "C-c C-d" 'ng-snip-show-docs-at-point web-mode-map)))
#+end_src
**** Some helpers
#+begin_src emacs-lisp
  (defun grunt-serve ()
    "Spawns 'grunt serve' process"
    (interactive)
    ;; Set dynamic config for process.
    ;; Variables below are applied only to particular process
    (let* ((bpr-scroll-direction 1) (bpr-show-progress nil))
      (bpr-spawn "$(npm bin)/grunt serve --color")
      (bpr-open-last-buffer)))
#+end_src
** XML
#+BEGIN_SRC emacs-lisp
  (use-package nxml-mode
    :mode ("\\.xml$" . nxml-mode)
    :commands (pretty-print-xml-region)
    :defer t
    :init
    ;; Mapping xml to nxml
    (fset 'xml-mode 'nxml-mode)

    :config

    ;; Global configuration
    (setq nxml-child-indent 2
          nxml-auto-insert-xml-declaration-flag t
          nxml-slash-auto-complete-flag t
          nxml-bind-meta-tab-to-complete-flag t)

    ;; Outline hook
    (add-hook 'nxml-mode-hook
              (lambda ()
                (outline-minor-mode)
                (setq outline-regexp "^[ \t]*\<[a-zA-Z]+")))

    ;; Helper to format
    (defun pretty-print-xml-region (begin end)
    "Pretty format XML markup in region. You need to have nxml-mode
  http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
  this.  The function inserts linebreaks to separate tags that have
  nothing but whitespace between them.  It then indents the markup
  by using nxml's indentation rules."
    (interactive "r")
    (save-excursion
        (nxml-mode)
        (goto-char begin)
        (while (search-forward-regexp "\>[ \\t]*\<" nil t)
          (backward-char) (insert "\n"))
        (indent-region begin end))))
#+END_SRC
* Org
** Global part
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :after flyspell
    :config

    ;; Global
    (setq org-startup-indented t
          org-enforce-todo-dependencies t
          org-cycle-separator-lines 2
          org-blank-before-new-entry '((heading) (plain-list-item . auto))
          org-insert-heading-respect-content nil
          org-reverse-note-order nil
          org-show-following-heading t
          org-show-hierarchy-above t
          org-show-siblings '((default))
          org-id-method 'uuidgen
          org-deadline-warning-days 30
          org-table-export-default-format "orgtbl-to-csv"
          org-src-window-setup 'other-window
          org-clone-delete-id t
          org-cycle-include-plain-lists t
          org-src-fontify-natively t
          org-hide-emphasis-markers t)

    ;; Activate spelling
    (add-hook 'org-mode 'flyspell-mode)
    (add-to-list 'ispell-skip-region-alist '("^#+begin_src" . "^#+end_src"))


    ;; TODO to sort
    (use-package ob-async :ensure t)
    (use-package org-checklist)
    (use-package ob-exp)
    (use-package ox-bibtex)
    (use-package org-protocol)
    (use-package org-dashboard :ensure t)

    ;; Todo part
    (setq org-todo-keywords '((sequence
                               "TODO(t)" "REVIEW(r)" "NEXT(N)" "STARTED(s)"
                               "WAITING(w)" "DELEGATED(e)" "MAYBE(m)" "|"
                               "DONE(d)" "NOTE(n)" "DEFERRED(f)" "CANCELLED(c@/!)"))

          org-todo-state-tags-triggers '(("CANCELLED" ("CANCELLED" . t))
                                         ("WAITING" ("WAITING" . t))
                                         ("HOLD" ("WAITING" . t) ("HOLD" . t))
                                         (done ("WAITING") ("HOLD"))
                                         ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                                         ("IN PROGRESS" ("NEXT") ("WAITING") ("CANCELLED") ("HOLD"))
                                         ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                                         ("DONE" ("WAITING") ("CANCELLED") ("HOLD"))))

    ;; Priority definition
    (setq org-highest-priority ?A
          org-lowest-priority ?E
          org-default-priority ?C)

    ;; Archiving
    (setq org-archive-mark-done t
          org-log-done 'time
          org-archive-location "%s_archive::* Archived Tasks")

    ;; Refiling
    (setq org-refile-targets '((org-agenda-files . (:maxlevel . 3)))
          org-completion-use-ido nil
          org-refile-use-outline-path 'file
          org-outline-path-complete-in-steps nil
          org-refile-allow-creating-parent-nodes 'confirm))
#+end_src
** Todo management - some helpers
Extracted from https://www.emacswiki.org/emacs/org-extension.el
#+begin_src emacs-lisp
  (defun org-archive-all-done-item ()
    "Archive all item that have with prefix DONE."
    (interactive)
    (save-excursion
      (show-all)
      (goto-char (point-min))
      (if (search-forward-regexp "^[\\*]+ \\(DONE\\|CANCELLED\\)" nil t)
          (progn
            (goto-char (point-min))
            (while (search-forward-regexp "^[\\*]+ \\(DONE\\|CANCELLED\\)" nil t)
              (org-advertized-archive-subtree))
            (message "Archive finished"))
        (message "No need to archive"))))


  (defun org-clean-done-item ()
    "Delete all item that have with prefix DONE."
    (interactive)
    (save-excursion
      (show-all)
      (goto-char (point-min))
      (if (search-forward-regexp "^[\\*]+ \\(DONE\\|CANCELLED\\)" nil t)
          (progn
            (goto-char (point-min))
            (while (search-forward-regexp "^[\\*]+ \\(DONE\\|CANCELLED\\)" nil t)
              (org-cut-subtree))
            (message "Cleaning DONE tasks finished"))
        (message "No need to clean"))))
#+end_src
** Calendar / Agenda
*** Global
#+begin_src emacs-lisp
  (use-package org-agenda
    :after (hydra org)
    :config

    ;; Todo part
    (setq org-agenda-files '())
    (when (file-exists-p "~/Dropbox/org/todo/todo.org")
      (setq org-agenda-files
            (append org-agenda-files '("~/Dropbox/org/todo/todo.org"))))

    (when (file-exists-p "~/Dropbox/org/organisation/bookmarks.org")
      (setq org-agenda-files
            (append org-agenda-files '("~/Dropbox/org/organisation/bookmarks.org"))))

    (when (file-exists-p "~/Calendars")
      (setq org-agenda-files
            (append org-agenda-files (directory-files "~/Calendars/" t "^.*\\.org$"))))


    ;; Deadline management
    (setq org-agenda-include-diary nil
          org-deadline-warning-days 7
          org-timeline-show-empty-dates t

          ;;
          org-agenda-category-icon-alist `(
                                           ;; Tools / utils
                                           ("[Ee]macs" ,(format "%s/third_parties/icons/emacs24.png" config-basedir) nil nil :ascent center)
                                           ("[Oo]rg" ,(format "%s/third_parties/icons/org.png" config-basedir) nil nil :ascent center)
                                           ("^[Hh][Tt][Ss]$" ,(format "%s/third_parties/icons/hts.png" config-basedir) nil nil :ascent center)
                                           ("^[Mm]ary[tT]\\{2\\}[sS]$" ,(format "%s/third_parties/icons/marytts.png" config-basedir) nil nil :ascent center)
                                           ("^SFB$" ,(format "%s/third_parties/icons/sfb.png" config-basedir) nil nil :ascent center)
                                           ("[Ss]ystem" ,(format "%s/third_parties/icons/debian.png" config-basedir) nil nil :ascent center)
                                           ("[Tt]ools?" ,(format "%s/third_parties/icons/wrench.png" config-basedir) nil nil :ascent center)
                                           ("[Ex]pe\\(riment\\)s?" ,(format "%s/third_parties/icons/expes.png" config-basedir) nil nil :ascent center)

                                           ;; Admin / meeting
                                           ("[Aa]dmin" ,(format "%s/third_parties/icons/admin.png" config-basedir) nil nil :ascent center)
                                           ("[Mm]eeting" ,(format "%s/third_parties/icons/meeting.png" config-basedir) nil nil :ascent center)
                                           ("[Aa]ppointments?" ,(format "%s/third_parties/icons/appointment.png" config-basedir) nil nil :ascent center)
                                           ("[Vv]isitors" ,(format "%s/third_parties/icons/visitors.png" config-basedir) nil nil :ascent center)
                                           ("synsig" ,(format "%s/third_parties/icons/isca.png" config-basedir) nil nil :ascent center)
                                           ("\\([Tt]rip\\|[Dd]eplacement\\)" ,(format "%s/third_parties/icons/trip.png" config-basedir) nil nil :ascent center)
                                           ("Train" ,(format "%s/third_parties/icons/train.png" config-basedir) nil nil :ascent center)

                                           ;; Deadlines / dates
                                           ("\\([Pp]resentations?\\)" ,(format "%s/third_parties/icons/meeting.png" config-basedir) nil nil :ascent center)
                                           ("\\([Pp]apers?\\|[Bb]lio?\\|[Aa]rticles?\\)" ,(format "%s/third_parties/icons/book.png" config-basedir) nil nil :ascent center)
                                           ("[Mm]ails?" ,(format "%s/third_parties/icons/gnus.png" config-basedir) nil nil :ascent center)
                                           ("[Rr]eview?" ,(format "%s/third_parties/icons/review.png" config-basedir) nil nil :ascent center)

                                           ;; Personnal dates
                                           ("Medical" ,(format "%s/third_parties/icons/medical.png" config-basedir) nil nil :ascent center)
                                           ("\\(Party\\|Celeb\\)" ,(format "%s/third_parties/icons/party.png" config-basedir) nil nil :ascent center)
                                           ("Anniv" ,(format "%s/third_parties/icons/anniversary.png" config-basedir) nil nil :ascent center)
                                           ("\\([Hh]olidays\\|[Vv]acations?\\)" ,(format "%s/third_parties/icons/holidays.png" config-basedir) nil nil :ascent center)

                                           ;; Personnal diverse
                                           ("Music" ,(format "%s/third_parties/icons/music.png" config-basedir) nil nil :ascent center)
                                           ("Book" ,(format "%s/third_parties/icons/book.png" config-basedir) nil nil :ascent center)
                                           ("[Pp]rojects?" ,(format "%s/third_parties/icons/project.png" config-basedir) nil nil :ascent center)
                                           (".*" '(space . (:width (16)))))

          ;; Some commands
          org-agenda-custom-commands '(
                                       ("D" todo "DONE")

                                       ("w" "Work and administrative"
                                        ((agenda)
                                         (tags-todo "WORK")
                                         (tags-todo "OFFICE")
                                         (tags-todo "ADMIN")))

                                       ("p" "personnal"
                                        ((agenda)
                                         (tags-todo "PERSONNAL")))

                                       ("d" "Daily Action List"
                                        ((agenda "" ((org-agenda-ndays 1)
                                                     (org-agenda-sorting-strategy
                                                      '((agenda time-up priority-down tag-up) ))
                                                     (org-deadline-warning-days 0)))))))

    ;; Agenda view shortcuts
    (define-key org-agenda-mode-map "v" 'hydra-org-agenda-view/body)

    (defun org-agenda-cts ()
      (let ((args (get-text-property
                   (min (1- (point-max)) (point))
                   'org-last-args)))
        (nth 2 args)))


    (defhydra hydra-org-agenda-view (:color blue :hint none)
      "
      _d_: ?d? day        _g_: time grid=?g? _a_: arch-trees
      _w_: ?w? week       _[_: inactive      _A_: arch-files
      _t_: ?t? fortnight  _f_: follow=?f?    _r_: report=?r?
      _m_: ?m? month      _e_: entry =?e?    _D_: diary=?D?
      _y_: ?y? year       _q_: quit          _L__l__c_: ?l?
         "

      ("SPC" org-agenda-reset-view)
      ("d" org-agenda-day-view
       (if (eq 'day (org-agenda-cts))
           "[x]" "[ ]"))
      ("w" org-agenda-week-view
       (if (eq 'week (org-agenda-cts))
           "[x]" "[ ]"))
      ("t" org-agenda-fortnight-view
       (if (eq 'fortnight (org-agenda-cts))
           "[x]" "[ ]"))
      ("m" org-agenda-month-view
       (if (eq 'month (org-agenda-cts)) "[x]" "[ ]"))
      ("y" org-agenda-year-view
       (if (eq 'year (org-agenda-cts)) "[x]" "[ ]"))
      ("l" org-agenda-log-mode
       (format "% -3S" org-agenda-show-log))
      ("L" (org-agenda-log-mode '(4)))
      ("c" (org-agenda-log-mode 'clockcheck))
      ("f" org-agenda-follow-mode
       (format "% -3S" org-agenda-follow-mode))
      ("a" org-agenda-archives-mode)
      ("A" (org-agenda-archives-mode 'files))
      ("r" org-agenda-clockreport-mode
       (format "% -3S" org-agenda-clockreport-mode))
      ("e" org-agenda-entry-text-mode
       (format "% -3S" org-agenda-entry-text-mode))
      ("g" org-agenda-toggle-time-grid
       (format "% -3S" org-agenda-use-time-grid))
      ("D" org-agenda-toggle-diary
       (format "% -3S" org-agenda-include-diary))
      ("!" org-agenda-toggle-deadlines)
      ("["
       (let ((org-agenda-include-inactive-timestamps t))
         (org-agenda-check-type t 'timeline 'agenda)
         (org-agenda-redo)))
      ("q" (message "Abort") :exit t)))

  ;; Global shortcut to call org agenda
  (global-set-key (kbd "<f12>") 'org-agenda)
#+end_src
*** Super agenda
#+begin_src emacs-lisp
  (use-package org-super-agenda
    :ensure t
    :after (org org-agenda)
    :config
    (org-super-agenda-mode)
    (setq org-super-agenda-groups

          '((:name "Important tasks ":priority "A")
            (:name "SynSIG" :tag "SynSIG")
            (:auto-category t)
           )))
#+end_src
** Capturing
*** Global
#+begin_src emacs-lisp
  (use-package org-capture
    :config

    ;; Capture
    (setq org-capture-templates
          `(("b" "Adding book" entry
             (file+headline "~/Dropbox/org/todo/todo.org" "To read")
             (file ,(format "%s/third_parties/org-capture-templates/book.org" config-basedir)))

            ("L" "Bookmark" entry
             (file+olp "~/Dropbox/org/todo/todo.org" "To review" "Bookmarks")
             (file ,(format "%s/third_parties/org-capture-templates/bookmark.org" config-basedir)))

            ("m" "mail" entry
             (file+headline "~/Dropbox/org/todo/todo.org" "Mailing")
             (file ,(format "%s/third_parties/org-capture-templates/mail.org" config-basedir)))

            ("M" "MSP calendar" entry
             (file "~/Calendars/Calendar-MSP.org")
             (file ,(format "%s/third_parties/org-capture-templates/calendar.org" config-basedir)))

            ("P" "Personnal calendar" entry
             (file "~/Calendars/Calendar-Personal.org")
             (file ,(format "%s/third_parties/org-capture-templates/calendar.org" config-basedir)))

            ("r" "RSS" entry
             (file+olp "~/Dropbox/org/todo/todo.org" "To review" "RSS")
             (file ,(format "%s/third_parties/org-capture-templates/rss.org" config-basedir)))

            ("t" "ToDo Entry" entry
             (file+headline "~/Dropbox/org/todo/todo.org" "To sort")
             (file ,(format "%s/third_parties/org-capture-templates/default.org" config-basedir))
             :empty-lines-before 1)))
    )
#+end_src
*** Cooking
#+begin_src emacs-lisp
  (use-package org-chef
    :ensure t
    :config
    (add-to-list 'org-capture-templates
                 '("c" "Cookbook" entry (file "~/Dropbox/recipes/cookbook.org")
                   "%(org-chef-get-recipe-from-url)"
                   :empty-lines 1)))
#+end_src
** Editing
#+begin_src emacs-lisp
  (setq org-list-allow-alphabetical t ;; FIXME quoi qu'est ce?
        org-highlight-latex-and-related '(latex)
        org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar"
        org-babel-results-keyword "results" ;; Display images directly in the buffer
        org-confirm-babel-evaluate nil
        org-startup-with-inline-images t)

  (use-package org-notebook :ensure t)

  ;; Add languages
  (use-package ob-ipython :ensure t)
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((emacs-lisp . t)
                                 (dot . t)
                                 (ditaa . t)
                                 (R . t)
                                 (ipython . t)
                                 (ruby . t)
                                 (gnuplot . t)
                                 (clojure . t)
                                 (shell . t)
                                 (ledger . t)
                                 (org . t)
                                 (plantuml . t)
                                 (latex . t)))

  ; Define specific modes for specific tools
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))

#+end_src
*** Block template
#+begin_src emacs-lisp
  (use-package hydra :ensure t
    :config
    ;; Define the templates
    (setq org-structure-template-alist
          '(("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
            ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
            ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
            ("v" "#+begin_verse\n?\n#+end_verse" "<verse>\n?\n/verse>")
            ("c" "#+begin_center\n?\n#+end_center" "<center>\n?\n/center>")
            ("l" "#+begin_export latex\n?\n#+end_export" "<literal style=\"latex\">\n?\n</literal>")
            ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
            ("h" "#+begin_export html\n?\n#+end_exrt" "<literal style=\"html\">\n?\n</literal>")
            ("H" "#+html: " "<literal style=\"html\">?</literal>")
            ("a" "#+begin_export ascii\n?\n#+end_export")
            ("A" "#+ascii: ")
            ("i" "#+index: ?" "#+index: ?")
            ("I" "#+include: %file ?" "<include file=%file markup=\"?\">")))

    ;; Shortcuts
    (defun hot-expand (str &optional mod)
      "Expand org template."
      (let (text)
        (when (region-active-p)
          (setq text (buffer-substring (region-beginning) (region-end)))
          (delete-region (region-beginning) (region-end)))
        (insert str)
        (org-try-structure-completion)
        (when mod (insert mod) (forward-line))
        (when text (insert text))))

    (defhydra hydra-org-template (:color blue :hint nil)
      "
       Org template

   block               src block         structure
  --------------------------------------------------------------------------------------
  _c_: center        _s_: src         _L_: LATEX:
  _q_: quote         _e_: emacs lisp  _i_: index:
  _E_: example       _p_: python      _I_: INCLUDE:
  _v_: verse         _P_: perl        _H_: HTML:
  _a_: ascii         _u_: Plantuml    _A_: ASCII:
  _l_: latex         _d_: ditaa
  _h_: html          _S_: shell
  "
      ("s" (hot-expand "<s"))
      ("E" (hot-expand "<e"))
      ("q" (hot-expand "<q"))
      ("v" (hot-expand "<v"))
      ("c" (hot-expand "<c"))
      ("l" (hot-expand "<l"))
      ("h" (hot-expand "<h"))
      ("a" (hot-expand "<a"))
      ("L" (hot-expand "<L"))
      ("i" (hot-expand "<i"))
      ("e" (hot-expand "<s" "emacs-lisp"))
      ("p" (hot-expand "<s" "python"))
      ("P" (hot-expand "<s" "perl"))
      ("S" (hot-expand "<s" "sh"))
      ("d" (hot-expand "<s" "ditaa :file CHANGE.png :cache yes"))
      ("u" (hot-expand "<s" "plantuml :file CHANGE.svg :cache yes"))
      ("I" (hot-expand "<I"))
      ("H" (hot-expand "<H"))
      ("A" (hot-expand "<A"))
      ("<" self-insert-command "ins")
      ("ESC" nil "quit"))

    (define-key org-mode-map "<"
      (lambda () (interactive)
        (if (or (region-active-p) (looking-back "^"))
            (hydra-org-template/body)
          (self-insert-command 1)))))
#+end_src
*** Id generations
#+begin_src emacs-lisp
  (use-package org-id+
    :ensure quelpa
    :quelpa (org-id+ :repo "seblemaguer/org-id-plus" :fetcher github))
#+end_src
** Exporting
*** HTML
#+begin_src emacs-lisp
  (use-package htmlize :ensure t)

  (use-package ox-html
    :after ox
    :requires (htmlize)
    :config
    (setq org-html-xml-declaration '(("html" . "")
                                   ("was-html" . "<?xml version=\"1.0\" encoding=\"%s\"?>")
                                   ("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>"))
        org-export-html-inline-images t
        org-export-with-sub-superscripts nil
        org-export-html-style-extra "<link rel=\"stylesheet\" href=\"org.css\" type=\"text/css\" />"
        org-export-html-style-include-default nil
        org-export-htmlize-output-type 'css ; Do not generate internal css formatting for HTML exports
        )

    (defun endless/export-audio-link (path desc format)
      "Export org audio links to hmtl."
      (cl-case format
        (html (format "<audio src=\"%s\" controls>%s</audio>" path (or desc "")))))
    (org-add-link-type "audio" #'ignore #'endless/export-audio-link)


    (defun endless/export-video-link (path desc format)
      "Export org video links to hmtl."
      (cl-case format
        (html (format "<video controls src=\"%s\"></video>" path (or desc "")))))
    (org-add-link-type "video" #'ignore #'endless/export-video-link)

    (add-to-list 'org-file-apps '("\\.x?html?\\'" . "/usr/bin/vivaldi-stable %s")))

  (use-package ox-reveal
    :ensure t
    :requires (ox-html htmlize))
#+end_src
*** LaTeX
#+begin_src emacs-lisp
  (use-package ox-latex
    :after ox
    :defer t
    :config
    (setq org-latex-listings t
          org-export-with-LaTeX-fragments t
          org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f")))
#+end_src
*** Beamer
#+begin_src emacs-lisp
  (use-package ox-beamer
    :after ox
    :config
    (defun my-beamer-bold (contents backend info)
      (when (eq backend 'beamer)
        (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\textbf" contents)))
    (add-to-list 'org-export-filter-bold-functions 'my-beamer-bold))
#+end_src
*** Docbook
#+begin_src emacs-lisp
(setq org-export-docbook-xsl-fo-proc-command "fop %s %s"
      org-export-docbook-xslt-proc-command "xsltproc --output %s /usr/share/xml/docbook/stylesheet/nwalsh/fo/docbook.xsl %s")
#+end_src
*** Markdown
#+begin_src emacs-lisp
  (use-package ox-gfm
      :ensure t
      :after ox
      :config (require 'ox-gfm))
#+end_src
*** Pandoc
#+begin_src emacs-lisp
  (use-package ox-pandoc
    :ensure t
    :after ox
    :defer t
    :config
    ;; default options for all output formats
    (setq org-pandoc-options '((standalone . t))
          ;; cancel above settings only for 'docx' format
          org-pandoc-options-for-docx '((standalone . nil))
          ;; special settings for beamer-pdf and latex-pdf exporters
          org-pandoc-options-for-beamer-pdf '((pdf-engine . "xelatex"))
          org-pandoc-options-for-latex-pdf '((pdf-engine . "xelatex"))))
#+end_src
** COMMENT Async
#+begin_src emacs-lisp
  ;; Setup the part for asynchronous
  (setq org-export-in-background t
        org-export-async-debug t
        org-export-async-init-file (expand-file-name (format "%s/org-export.el" config-basedir)))
#+end_src
* Documentation
** Help
#+begin_src emacs-lisp
  (use-package helpful :ensure t)
#+end_src
** Apropos
#+begin_src emacs-lisp
  (use-package apropos-fn+var
    :ensure t
    :disabled
    :config
    (setq apropos-do-all t))
#+end_src
** Info
#+begin_src emacs-lisp
  (use-package info-buffer :ensure t)
  (use-package info+ :ensure t :disabled)
#+end_src
** Man
#+begin_src emacs-lisp
  (use-package man
    :ensure t
    :config
    (setq Man-notify-method 'pushy)
    (setq woman-manpath
          `(
            "/usr/share/man/" "/usr/local/man/" ;; System
            ,(format "%s/local/man" config-basedir) ;; Private environment
            )))
#+end_src

* Shell
** Global
The key configuration is mainly coming from https://github.com/jcf/emacs.d the rest is coming from http://www.modernemacs.com/post/custom-eshell/ with some adaptation
#+begin_src emacs-lisp
  (use-package eshell
    :init
    (add-hook 'eshell-mode-hook
              (lambda ()
                (eshell/export "NODE_NO_READLINE=1")))

    :config
    (defmacro with-face (STR &rest PROPS)
      "Return STR propertized with PROPS."
      `(propertize ,STR 'face (list ,@PROPS)))

    (defmacro esh-section (NAME ICON FORM &rest PROPS)
      "Build eshell section NAME with ICON prepended to evaled FORM with PROPS."
      `(setq ,NAME
             (lambda () (when ,FORM
                          (-> ,ICON
                              (concat esh-section-delim ,FORM)
                              (with-face ,@PROPS))))))

    (defun esh-acc (acc x)
      "Accumulator for evaluating and concatenating esh-sections."
      (--if-let (funcall x)
          (if (s-blank? acc)
              it
            (concat acc esh-sep it))
        acc))

    (defun esh-prompt-func ()
      "Build `eshell-prompt-function'"
      (concat esh-header
              (-reduce-from 'esh-acc "" eshell-funcs)
              "\n"
              eshell-prompt-string))

    (esh-section esh-dir
                 "\xf07c"  ; ï¼ (faicon folder)
                 (abbreviate-file-name (eshell/pwd))
                 '(:foreground "blue" :bold ultra-bold :underline t))

    (esh-section esh-git
                 "\xe907"  ; î¤ (git icon)
                 (magit-get-current-branch)
                 '(:foreground "red"))

    ;; (esh-section esh-python
    ;;              "\xe928"  ; î¤¨ (python icon)
    ;;              pyvenv-virtual-env-name)

    (esh-section esh-clock
                 "\xf017"  ; ï (clock icon)
                 (format-time-string "%H:%M" (current-time))
                 '(:foreground "forest green"))

    ;; Below I implement a "prompt number" section
    (setq esh-prompt-num 0)
    (add-hook 'eshell-exit-hook (lambda () (setq esh-prompt-num 0)))
    (advice-add 'eshell-send-input :before
                (lambda (&rest args) (setq esh-prompt-num (incf esh-prompt-num))))

    (esh-section esh-num
                 "\xf0c9"  ; ï (list icon)
                 (number-to-string esh-prompt-num)
                 '(:foreground "brown"))


    (setq esh-sep "  "  ; or " | " ;; Separator between esh-sections
          esh-section-delim " " ;; Separator between an esh-section icon and form
          esh-header "\n " ;; Eshell prompt header

          ;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.
          ;; your login, these can be the same.
          eshell-prompt-regexp "[^â]ââ> "
          eshell-prompt-string "ââ> "

          ;; eshell-funcs (list esh-dir esh-git esh-python esh-clock esh-num) ;; Choose which eshell-funcs to enable
          eshell-funcs (list esh-dir esh-git  esh-clock esh-num) ;; Choose which eshell-funcs to enable
          eshell-prompt-function 'esh-prompt-func ;; Enable the new eshell prompt
          )

    (defun pcomplete/sudo ()
      (let ((prec (pcomplete-arg 'last -1)))
        (cond ((string= "sudo" prec)
               (while (pcomplete-here*
                       (funcall pcomplete-command-completion-function)
                       (pcomplete-arg 'last) t))))))

    (defun eshell-mode-some-config ()
      (define-key eshell-mode-map (kbd "<tab>") 'completion-at-point)
      (define-key eshell-mode-map (kbd "M-p") 'helm-eshell-history)
      (eshell/export "NODE_NO_READLINE=1"))

    (add-hook 'eshell-mode-hook
              'eshell-mode-some-config)


    ;; If I ever want my own eshell/foo commands overwrite real commands ...
    (setq eshell-prefer-lisp-functions t)

    ;; Helpers
    (defun eshell/clear ()
      "Clear the eshell buffer."
      (let ((inhibit-read-only t))
        (erase-buffer)
        (eshell-send-input)))

    (defun clipboard/set (astring)
      "Copy a string to clipboard"
      (with-temp-buffer
        (insert astring)
        (clipboard-kill-region (point-min) (point-max))))

    (defun eshell/copy-pwd ()
      "Copy current directory to clipboard "
      (clipboard/set (eshell/pwd)))

    (defun eshell/copy-fpath (fname)
      "Copy file name with full path to clipboard "
      (let ((fpath (concat (eshell/pwd) "/" fname)))
        (clipboard/set fpath)
        (concat "Copied path: " fpath)))
    )
#+end_src
** Completion
For now, it seems that auto suggest blocks company
#+begin_src emacs-lisp
  (use-package esh-autosuggest
    :hook (eshell-mode . esh-autosuggest-mode)
    :ensure t
    :disabled t)
#+end_src
** Status in the fringe
#+begin_src emacs-lisp
  (use-package eshell-fringe-status
    :ensure t
    :config
    (add-hook 'eshell-mode-hook 'eshell-fringe-status-mode))
#+end_src
** Some helpers
#+begin_src emacs-lisp
  (defun eshell/clear ()
    "Clear the eshell buffer."
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input)))

  (defun clipboard/set (astring)
    "Copy a string to clipboard"
    (with-temp-buffer
      (insert astring)
      (clipboard-kill-region (point-min) (point-max))))

  (defun eshell/copy-pwd ()
    "Copy current directory to clipboard "
    (clipboard/set (eshell/pwd)))

  (defun eshell/copy-fpath (fname)
    "Copy file name with full path to clipboard "
    (let ((fpath (concat (eshell/pwd) "/" fname)))
      (clipboard/set fpath)
      (concat "Copied path: " fpath)))
#+end_src
* Compilation
** TODO some requires to check
#+begin_src emacs-lisp
  (require 'compile-)
  (require 'compile)
  (require 'compile+)
#+end_src
** Flychecking
#+begin_src emacs-lisp
  (use-package flycheck-stack
    :ensure t
    :after flycheck)
#+end_src
** Gradle global support
#+begin_src emacs-lisp
  (use-package gradle-mode
    :ensure quelpa
    :quelpa (gradle-mode :repo "seblemaguer/emacs-gradle-mode" :fetcher github)
    :config
    (setq gradle-gradlew-executable "./gradlew"
          gradle-use-gradlew t)
    (gradle-mode))
#+end_src

** Compilation
#+begin_src emacs-lisp
  (use-package winnow
    :ensure t
    :init
    (add-hook 'compilation-mode-hook 'winnow-mode)
    (add-hook 'ag-mode-hook 'winnow-mode))
#+end_src

* Project management
** Configuration projectile
The commands are based on http://endlessparentheses.com/improving-projectile-with-extra-commands.html?source=rss
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config

    ;; Global configuration
    (setq projectile-switch-project-action 'neotree-projectile-action
          projectile-enable-caching t
          projectile-create-missing-test-files t
          projectile-switch-project-action #'projectile-commander
          projectile-ignored-project-function 'file-remote-p)

    ;; Defining some helpers
    (def-projectile-commander-method ?s
      "Open a *shell* buffer for the project."
      ;; This requires a snapshot version of Projectile.
      (projectile-run-shell))

    (def-projectile-commander-method ?c
      "Run `compile' in the project."
      (projectile-compile-project nil))

    (def-projectile-commander-method ?\C-?
      "Go back to project selection."
      (projectile-switch-project))

    ;; Keys
    (setq projectile-keymap-prefix (kbd "C-x p"))

    ;; Activate globally
    (projectile-mode)
)
#+end_src
** Todos/projectile
#+begin_src emacs-lisp
  (use-package org-projectile
    :ensure t
    :after org
    :after projectile
    :config
    (org-projectile-per-project)
    (setq org-projectile-per-project-filepath "todo.org"
          org-agenda-files
          (append org-agenda-files (org-projectile-todo-files))))
#+end_src
** Completion
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :after projectile)
#+end_src
* Version control
** Git
*** Magit
- Externally opening has been copied from https://gist.github.com/dotemacs/9a0433341e75e01461c9
- Pretty configuration is adapted from https://ekaschalk.github.io/post/pretty-magit/
**** Global
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config

    ;; Ignore recent commit
    (setq magit-status-sections-hook
          '(magit-insert-status-headers
            magit-insert-merge-log
            magit-insert-rebase-sequence
            magit-insert-am-sequence
            magit-insert-sequencer-sequence
            magit-insert-bisect-output
            magit-insert-bisect-rest
            magit-insert-bisect-log
            magit-insert-untracked-files
            magit-insert-unstaged-changes
            magit-insert-staged-changes
            magit-insert-stashes
            magit-insert-unpulled-from-upstream
            magit-insert-unpulled-from-pushremote
            magit-insert-unpushed-to-upstream
            magit-insert-unpushed-to-pushremote))


    ;; Update visualization
    (setq pretty-magit-alist nil
          pretty-magit-prompt nil)

    (defmacro pretty-magit (WORD ICON PROPS &optional NO-PROMPT?)
      "Replace sanitized WORD with ICON, PROPS and by default add to prompts."
      `(prog1
           (add-to-list 'pretty-magit-alist
                        (list (rx bow (group ,WORD (eval (if ,NO-PROMPT? "" ":"))))
                              ,ICON ',PROPS))
         (unless ,NO-PROMPT?
           (add-to-list 'pretty-magit-prompt (concat ,WORD ": ")))))

    (pretty-magit "Feature" ?ïµ (:foreground "slate gray" :height 1.2) pretty-magit-prompt)
    (pretty-magit ": add"   ?ï¶ (:foreground "#375E97" :height 1.2) pretty-magit-prompt)
    (pretty-magit ": fix"   ?ï (:foreground "#FB6542" :height 1.2) pretty-magit-prompt)
    (pretty-magit ": clean" ?ï (:foreground "#FFBB00" :height 1.2) pretty-magit-prompt)
    (pretty-magit ": docs"  ?ï (:foreground "#3F681C" :height 1.2) pretty-magit-prompt)
    (pretty-magit "master"  ?î¤ (:box t :height 1.2) t)
    (pretty-magit "origin"  ?ï (:box t :height 1.2) t)

    (defun add-magit-faces ()
      "Add face properties and compose symbols for buffer from pretty-magit."
      (interactive)
      (with-silent-modifications
        (--each pretty-magit-alist
          (-let (((rgx icon props) it))
            (save-excursion
              (goto-char (point-min))
              (while (search-forward-regexp rgx nil t)
                (compose-region
                 (match-beginning 1) (match-end 1) icon)
                (when props
                  (add-face-text-property
                   (match-beginning 1) (match-end 1) props))))))))

    (advice-add 'magit-status :after 'add-magit-faces)
    (advice-add 'magit-refresh-buffer :after 'add-magit-faces)


    ;; Opening repo externally
    (defun parse-url (url)
      "convert a git remote location as a HTTP URL"
      (if (string-match "^http" url)
          url
        (replace-regexp-in-string "\\(.*\\)@\\(.*\\):\\(.*\\)\\(\\.git?\\)"
                                  "https://\\2/\\3"
                                  url)))
    (defun magit-open-repo ()
      "open remote repo URL"
      (interactive)
      (let ((url (magit-get "remote" "origin" "url")))
        (progn
          (browse-url (parse-url url))
          (message "opening repo %s" url))))

    (add-hook 'magit-mode-hook
              (lambda ()
                (local-set-key (kbd "o") 'magit-open-repo))))
#+end_src
**** Diff
#+begin_src emacs-lisp
  (use-package magit-tbdiff
    :ensure t
    :after magit)
#+end_src
**** Todo
#+begin_src emacs-lisp
  (use-package magit-todos
    :ensure t
    :commands (magit-todos-mode)
    :hook (magit-mode . magit-todos-mode)
    :config
    (setq magit-todos-recursive t
          magit-todos-depth 100)
    :custom (magit-todos-keywords (list "TODO" "FIXME")))
#+end_src
*** Git ignore
#+begin_src emacs-lisp
  (use-package gitignore-mode
    :ensure t)

  (use-package helm-gitignore
    :ensure t)
#+end_src
*** Config edition
#+begin_src emacs-lisp
  (use-package gitconfig-mode
    :ensure t
    :defer t
    :mode
    ("/\.gitconfig\'"    . gitconfig-mode)
    ("/vcs/gitconfig\'"    . gitconfig-mode))
#+end_src
*** Helpers for edition
#+begin_src emacs-lisp
  (use-package git-commit
    :ensure t
    :defer t)

  (use-package gitattributes-mode
    :ensure t
    :defer t)
#+end_src
*** Git prefix
#+begin_src emacs-lisp
  (use-package git-msg-prefix
    :ensure t
    :defer t
    :config
    (setq git-msg-prefix-log-flags " --since='1 week ago' "
          git-msg-prefix-regex "^\\([^:]*: \\)"
          git-msg-prefix-input-method 'ivy-read)
    ;; (add-hook 'git-commit-mode-hook 'git-msg-prefix)
    )
#+end_src
*** Commit navigation
#+begin_src emacs-lisp
(use-package git-timemachine :ensure t)
#+end_src
*** Send patch by email
#+begin_src emacs-lisp
  (use-package gitpatch
    :ensure t
    :config
    (setq gitpatch-mail-attach-patch-key "C-c i"))
#+end_src
** Mercurial
*** Monky
#+begin_src emacs-lisp
(use-package monky :ensure t)
#+end_src
*** Configuration
#+begin_src emacs-lisp
(use-package hgignore-mode :ensure t)
(use-package hgrc-mode :ensure t)
#+end_src
** Providers
*** Github
#+begin_src emacs-lisp
  ;; Github api
  (use-package gh :ensure t)
  (use-package gh-md :ensure t)

  ;; Search on github
  (use-package github-search :ensure t)

  ;; Mapping github with magit
  (use-package ghub :ensure t)
  (use-package ghub+ :ensure t)

  (use-package magithub
    :ensure t
    :after (:all magit ghub ghub+)
    :config (magithub-feature-autoinject t))
#+end_src
*** Gist
#+begin_src emacs-lisp
(use-package gist :ensure t)
#+end_src
*** Gitlab
#+begin_src emacs-lisp
(use-package gitlab :ensure t)
(use-package glab :ensure t)
(use-package ivy-gitlab :ensure t)
#+end_src
*** Browsing at remote
#+begin_src emacs-lisp
(use-package browse-at-remote :ensure t)
#+end_src
** Continuous building
#+begin_src emacs-lisp
  (use-package travis
    :ensure t
    :config

    (defun show-my-travis-projects ()
      (interactive)
      (travis-show-projects "seblemaguer")))
#+end_src
* File/Directory management
** Dired
*** Run associated application - define helpers
#+begin_src emacs-lisp
  (defun dired-open-native ()
    "Open marked files (or the file the cursor is on) from dired."
    (interactive)
    (let* ((files (dired-get-marked-files t current-prefix-arg))
           (n (length files)))
      (when (or (<= n 3)
                (y-or-n-p (format "Open %d files?" n)))
        (dolist (file files)
          (call-process "xdg-open" nil 0 nil file)))))

                                          ; The use of "gnome-open" here should probably be parameterized.
  (defun dired-open-current-directory-in-GUI-file-manager ()
    "Open the current directory in native GUI file namanger
  For those times when dired just wont do.
  "
    (interactive)
    (save-window-excursion
      (dired-do-async-shell-command
       "xdg-open .")))
#+end_src
*** Main configuration
#+begin_src emacs-lisp
  (use-package dired
    :config

    ;; Adapt ls for mac
    (when (eq system-type 'darwin)
      (require 'ls-lisp)
      (setq ls-lisp-use-insert-directory-program t
            insert-directory-program "/usr/local/bin/gls"))

    ;; Omitting
    (setq-default dired-omit-files "^\\.[^.]+"
                  dired-omit-mode t)

    ;; Adapt ls lisp format
    (if (boundp 'ls-lisp-ignore-case)
        (setq ls-lisp-ignore-case t))
    (if (boundp 'ls-lisp-dirs-first)
        (setq ls-lisp-dirs-first t))
    (if (boundp 'ls-lisp-use-localized-time-format)
        (setq ls-lisp-use-localized-time-format t))
    (if (boundp 'ls-lisp-format-time-list)
        (setq ls-lisp-format-time-list '("%Y-%m-%d %H:%M" "%Y-%m-%d %H:%M")))

    (put 'dired-find-alternate-file 'disabled nil)

    (setq dired-dwim-target t

          ;; Compression
          auto-compression-mode t

          ;; Recursive
          dired-recursive-deletes 'top
          dired-recursive-copies 'always

          ;; Details information
          dired-listing-switches "--group-directories-first -alh"
          dired-details-hidden-string "[...]")

    ;; Keys
    (define-key dired-mode-map (kbd "C-o") 'dired-omit-mode)
    (define-key dired-mode-map (kbd "<C-return>") 'dired-open-native)
    (define-key dired-mode-map (kbd "e") 'dired-open-externally)


    ;; Diff
    (defun ora-ediff-files ()
      (interactive)
      (let ((files (dired-get-marked-files))
            (wnd (current-window-configuration)))
        (if (<= (length files) 2)
            (let ((file1 (car files))
                  (file2 (if (cdr files)
                             (cadr files)
                           (read-file-name
                            "file: "
                            (dired-dwim-target-directory)))))
              (if (file-newer-than-file-p file1 file2)
                  (ediff-files file2 file1)
                (ediff-files file1 file2))
              (add-hook 'ediff-after-quit-hook-internal
                        (lambda ()
                          (setq ediff-after-quit-hook-internal nil)
                          (set-window-configuration wnd))))
          (error "no more than 2 files should be marked"))))
    (define-key dired-mode-map "E" 'ora-ediff-files)
    )
#+end_src
*** peep-dired
#+begin_src emacs-lisp
  (use-package peep-dired
    :ensure t
    :config
    (define-key dired-mode-map (kbd "P") 'peep-dired)
  )
#+end_src
*** dired-narrow
#+begin_src emacs-lisp
  (use-package dired-narrow
    :ensure t
    :config
    (define-key dired-mode-map (kbd "/") 'dired-narrow)
  )
#+end_src
*** dired-single
#+begin_src emacs-lisp
  (use-package dired-single
    :ensure t
    :config
    (define-key dired-mode-map [return] 'dired-single-buffer)
    (define-key dired-mode-map [mouse-1] 'dired-single-buffer-mouse)
    )
#+end_src
*** dired-collapse
#+begin_src emacs-lisp
  (use-package dired-collapse
    :ensure t
    :defer
    :init
    (add-hook 'dired-mode-hook 'dired-collapse-mode))
#+end_src
*** dired-filter
#+begin_src emacs-lisp
  (use-package dired-filter
    :ensure t
    :init
    (add-hook 'dired-mode-hook 'dired-filter-group-mode)

    :config
    (setq dired-filter-group-saved-groups
          '(("default"
             ("Directories" (directory))
             ("PDF"
              (extension . "pdf"))
             ("LaTeX"
              (extension "tex" "bib"))
             ("Org"
              (extension . "org"))
             ("Archives"
              (extension "zip" "rar" "gz" "bz2" "tar"))
             ("Multimedia"
              (extension "ogg" "flv" "mpg" "avi" "mp4" "mp3"))
             )))
    )
#+end_src
*** dired-subtree
#+begin_src emacs-lisp
  (use-package dired-subtree
    :ensure t
    :config
    (define-key dired-mode-map "i" 'dired-subtree-insert)
    (define-key dired-mode-map ";" 'dired-subtree-remove)
    )
#+end_src
*** Dired / images
#+begin_src emacs-lisp
  (use-package image-dired+
    :ensure t
    :config
    (setq auto-image-file-mode t)
    (eval-after-load 'image-dired+ '(image-diredx-async-mode 1)))
#+end_src
*** Async
#+begin_src emacs-lisp
  (use-package async
    :ensure t
    :after dired
    :config

    (when (require 'dired-aux)
      (progn
        (require 'dired-async))
      (dired-async-mode 1)))
#+end_src
*** Dired / Rsync
#+begin_src emacs-lisp
  (use-package dired-rsync
    :defer t
    :ensure t
    :config
    (bind-key "C-c C-r" 'dired-rsync dired-mode-map))
#+end_src
*** Hydra
Hydra mapping for dired taken from https://github.com/abo-abo/hydra/wiki/Dired and adapted.
#+begin_src emacs-lisp
  (defhydra hydra-dired (:hint nil :color pink)
    "
  _+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
  _C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
  _D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
  _R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
  _Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
  _S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
  _r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
  _z_ compress-file  _A_ find regexp
  _Z_ compress       _Q_ repl regexp

  T - tag prefix
  "
    ("\\" dired-do-ispell)
    ("(" dired-hide-details-mode)
    (")" dired-omit-mode)
    ("+" dired-create-directory)
    ("=" diredp-ediff)         ;; smart diff
    ("?" dired-summary)
    ("$" diredp-hide-subdir-nomove)
    ("A" dired-do-find-regexp)
    ("C" dired-do-copy)        ;; Copy all marked files
    ("D" dired-do-delete)
    ("E" dired-mark-extension)
    ("e" dired-ediff-files)
    ("F" dired-do-find-marked-files)
    ("G" dired-do-chgrp)
    ("g" revert-buffer)        ;; read all directories again (refresh)
    ("i" dired-maybe-insert-subdir)
    ("l" dired-do-redisplay)   ;; relist the marked or singel directory
    ("M" dired-do-chmod)
    ("m" dired-mark)
    ("O" dired-display-file)
    ("o" dired-find-file-other-window)
    ("Q" dired-do-find-regexp-and-replace)
    ("R" dired-do-rename)
    ("r" dired-do-rsynch)
    ("S" dired-do-symlink)
    ("s" dired-sort-toggle-or-edit)
    ("t" dired-toggle-marks)
    ("U" dired-unmark-all-marks)
    ("u" dired-unmark)
    ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
    ("w" dired-kill-subdir)
    ("Y" dired-do-relsymlink)
    ("z" diredp-compress-this-file)
    ("Z" dired-do-compress)
    ("q" nil)
    ("." nil :color blue))

  (define-key dired-mode-map "." 'hydra-dired/body)
#+end_src
** Images
#+begin_src emacs-lisp
  (use-package image+
    :ensure t
    :init
    (add-hook 'image-mode-hook
              '(lambda ()
                 (require 'image+)
                 (imagex-sticky-mode)))

    :bind (:map image-mode-map
                ("=" . imagex-sticky-zoom-in)
                ("-" . imagex-sticky-zoom-out)
                ("m" . imagex-sticky-maximize)
                ("g" . imagex-sticky-restore-original)
                ("S" . imagex-sticky-save-image)
                ("r" . imagex-sticky-rotate-right)
                ("l" . imagex-sticky-rotate-left)
                ("/" . imagex-sticky-binding/body))

    :config
      (defhydra imagex-sticky-binding () ;; global-map "C-x C-l")
      "Manipulating Image"
      ("+" imagex-sticky-zoom-in "zoom in")
      ("-" imagex-sticky-zoom-out "zoom out")
      ("M" imagex-sticky-maximize "maximize")
      ("O" imagex-sticky-restore-original "restore original")
      ("S" imagex-sticky-save-image "save file")
      ("r" imagex-sticky-rotate-right "rotate right")
      ("l" imagex-sticky-rotate-left "rotate left")))

#+end_src
** Diff
*** Global
#+begin_src emacs-lisp
  (use-package ediff
    :config
    (autoload 'diff-mode "diff-mode" "Diff major mode" t)
    (setq diff-switches "-u"
          ediff-auto-refine-limit (* 2 14000)
          ediff-window-setup-function 'ediff-setup-windows-plain
          ediff-split-window-function
          (lambda (&optional arg)
            (if (> (frame-width) 160)
                (split-window-horizontally arg)
              (split-window-vertically arg)))))
#+end_src
*** Helpers for region diff
#+begin_src emacs-lisp
  (defun diff-region ()
    "Select a region to compare"
    (interactive)
    (when (use-region-p) ; there is a region
      (let (buf)
        (setq buf (get-buffer-create "*Diff-regionA*"))
        (save-current-buffer
          (set-buffer buf)
          (erase-buffer))
        (append-to-buffer buf (region-beginning) (region-end)))
      )
    (message "Now select other region to compare and run `diff-region-now`"))

  (defun diff-region-now ()
    "Compare current region with region already selected by `diff-region`"
    (interactive)
    (when (use-region-p)
      (let (bufa bufb)
        (setq bufa (get-buffer-create "*Diff-regionA*"))
        (setq bufb (get-buffer-create "*Diff-regionB*"))
        (save-current-buffer
          (set-buffer bufb)
          (erase-buffer))
        (append-to-buffer bufb (region-beginning) (region-end))
        (ediff-buffers bufa bufb))
      ))
#+end_src
** Tramp
#+begin_src emacs-lisp
  ;; Global configuration
  (setq tramp-default-method "ssh")
  (setq password-cache-expiry 60)
  (setq tramp-auto-save-directory temporary-file-directory)

  ;; Debug
  ;;(setq tramp-verbose 9)
  (setq tramp-debug-buffer nil)
#+end_src
** Trash
#+begin_src emacs-lisp
  ;; Ask confirmation only once and move to trash
  (setq dired-recursive-deletes 'always)
  (setq delete-by-moving-to-trash t)

  (defun empty-trash()
    "Command to empty the trash (for now gnome/linux specific)"
    (interactive)
    (shell-command "rm -rf ~/.local/share/Trash/*"))

  (defun open-trash-dir()
    "Command to open the trash dir"
    (interactive)
    (find-file "~/.local/share/Trash/files"))
#+end_src
** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :after hl-line-mode
    :config
    (setq treemacs-follow-after-init          t
          treemacs-width                      35
          treemacs-indentation                2
          treemacs-git-integration            t
          treemacs-collapse-dirs              3
          treemacs-silent-refresh             nil
          treemacs-change-root-without-asking nil
          treemacs-sorting                    'alphabetic-desc
          treemacs-show-hidden-files          t
          treemacs-never-persist              nil
          treemacs-is-never-other-window      nil
          treemacs-goto-tag-strategy          'refetch-index)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    :bind
    (:map global-map
          ([f8]        . treemacs-toggle)))

  (use-package treemacs-projectile
    :ensure t
    :after treemacs
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header))
#+end_src
* Ibuffer
** Filter
#+begin_src emacs-lisp
  (defun my-own-ibuffer-hook ()
    ""
    (interactive)
    (setq ibuffer-saved-filter-groups
          (list
           (cons "default"
                 (append
                  (quote
                   (("Emacs"
                     (or
                      (name . "^[*]scratch[*]$")
                      (name . "^[*]Messages[*]$")))

                    ("Calendar"
                     (or
                      (name . "^[*]?[Cc]alendar.*$")
                      (name . "^diary$")
                      (mode . cfw:calendar-mode)
                      (mode . muse-mode)))

                    ("Todos"
                     (filename . "/todo.org"))

                    ("Emms"
                     (or
                      (mode . emms-mode)
                      (mode . emms-browser-mode)
                      (mode . emms-playlist-mode)))

                    ("RSS/Podcast"
                     (or
                      (name . "rss.org")
                      (name . "^[*]?[Ee]lfeed.*$")
                      (derived-mode . elfeed-search-mode)
                      (derived-mode . elfeed-show-mode)))

                    ("Help"
                     (or
                      (derived-mode . apropos-mode)
                      (derived-mode . help-mode)
                      (derived-mode . Info-mode)))

                    ("Mail"
                     (or
                      (mode . message-mode)
                      (mode . bbdb-mode)
                      (mode . mail-mode)
                      (mode . notmuch-show-mode)
                      (mode . notmuch-search-mode)
                      (mode . notmuch-hello-mode)
                      (name . "^\.bbdb$")
                      (name . "^\.newsrc-dribble")))))

                  (ibuffer-circe-generate-filter-groups-by-server)
                  (ibuffer-tramp-generate-filter-groups-by-tramp-connection)
                  (ibuffer-vc-generate-filter-groups-by-vc-root)

                  (quote
                   (("Dired" (mode . dired-mode))

                    ("Shell"
                     (or
                      (mode . sh-mode)))

                    ("Editing"
                     (or
                      (mode . tex-mode)
                      (mode . latex-mode)
                      (mode . bibtex-mode)
                      (mode . text-mode)))

                    ("Mathematics/Statistics"
                     (or
                      (mode . matlab-mode)
                      (name . "^[*]MATLAB[*]$")
                      (mode . ess-mode)
                      (mode . iESS)))


                    ("Configuration"
                     (or
                      (derived-mode . conf-mode)))

                    ("Web"
                     (or
                      (mode . php-mode)
                      (mode . css-mode)
                      (mode . html-mode)
                      (mode . js2-mode)
                      (mode . scss-mode)
                      (mode . web-mode)))

                    ("Programming"
                     (or
                      (mode . emacs-lisp-mode)
                      (mode . c-mode)
                      (mode . cperl-mode)
                      (mode . python-mode)
                      (mode . c++-mode)
                      (mode . java-mode)
                      (mode . jde-mode)))

                    ("Compiling"
                     (or
                      (mode . groovy-mode)
                      (derived-mode . makefile-mode)))

                    ("Data"
                     (or
                      (mode . csv-mode)
                      (mode . json-mode)
                      (mode . nxml-mode)
                      (mode . ledger-mode)
                      ))

                    ("Org"
                     (or
                      (mode . org-mode)))


                    ("Term"
                     (or
                      (mode . comint-mode)
                      (mode . eshell-mode)
                      (mode . term-mode)))

                    ("Prodigy"
                     (or
                      (name . "^[*]prodigy.*[*]$")))

                    ("Temp"
                     (or
                      (name ."^[*].*[*]$")))
                    )))))))
#+end_src
** Global
#+begin_src emacs-lisp
  (use-package ibuffer
    :after hydra
    :config

    ;; Sub packages
    (use-package ibuffer-git :ensure t)
    (use-package ibuffer-tramp :ensure t)
    (use-package ibuffer-vc :ensure t)
    (use-package ibuffer-circe
      :ensure quelpa
      :quelpa (ibuffer-circe :repo "seblemaguer/ibuffer-circe" :fetcher github)
      :after circe
      :config (require 'circe))

    ;; Use human readable Size column instead of original one
    (define-ibuffer-column size-h
      (:name "Size" :inline t)
      (cond
       ((> (buffer-size) 1000000) (format "%7.3fM" (/ (buffer-size) 1000000.0)))
       ((> (buffer-size) 1000) (format "%7.3fk" (/ (buffer-size) 1000.0)))
       (t (format "%8d" (buffer-size)))))


    ;; Modification time
    (defun get-modification-time-buffer(b)
      "Retrieve the savetime of the given buffer"
      (if (buffer-file-name b)
          (format-time-string "%Y-%m-%d %H:%M:%S"
                              (nth 5 (file-attributes (buffer-file-name b))))
        ""))

    (define-ibuffer-column last-modification
      (:name "Last modification time" )
      (get-modification-time-buffer buffer))

    ;; Ibuffer entry format
    (setq ibuffer-formats
          '((mark modified read-only
                  (name 30 30 :left :elide) " "
                  (size-h 9 -1 :right) " "
                  (mode 20 20 :left :elide) " "
                  ;; (eproject 16 16 :left :elide)      " "
                  (git-status 8 8 :left)" "
                  (last-modification 30 30 :left :elide)  " "
                  filename-and-process)))

    ;; Update
    (defadvice ibuffer-update (around ibuffer-preserve-prev-header activate)
      "Preserve line-header used before Ibuffer if it doesn't set one"
      (let ((prev-line-header header-line-format))
        ad-do-it
        (unless header-line-format
          (setq header-line-format prev-line-header))))


    (setq ibuffer-default-sorting-mode 'major-mode  ;; Sorting
          ibuffer-show-empty-filter-groups nil      ;; Ignore empty groups
          ibuffer-marked-char ?â               ;; Change the marking symbol
          )

    ;; Auto revert
    (add-hook 'ibuffer-mode-hook
              (lambda ()
                (my-own-ibuffer-hook)
                (ibuffer-switch-to-saved-filter-groups "default")
                (ibuffer-update nil t)))

    ;; Collapsing some buffer groups
    (setq mp/ibuffer-collapsed-groups
          (list "Calendar" "Todos"
                "Emms" "RSS/Podcast"
                "Temp" "Help" "*Tramp*"))

    (defadvice ibuffer (after collapse)
      (dolist (group mp/ibuffer-collapsed-groups)
        (progn
          (goto-char 1)
          (when (search-forward (concat "[ " group " ]") (point-max) t)
            (progn
              (move-beginning-of-line nil)
              (ibuffer-toggle-filter-group)
              )
            )
          )
        )
      (goto-char 1)
      (search-forward "[ " (point-max) t)
      )
    (ad-activate 'ibuffer)

    ;; Keys
    (defhydra hydra-ibuffer-main (:color pink :hint nil)
      "
         Ibuffer

   ^Navigation^     ^Mark^         ^Actions^          ^View^
  ------------------------------------------------------------------------
    _k_:    Ê     _m_: mark       _D_: delete        _g_: refresh
   _RET_: visit   _u_: unmark     _S_: save          _s_: sort
    _j_:    v     _*_: specific   _a_: all actions   _/_: filter
  "
      ("j" ibuffer-forward-line)
      ("RET" ibuffer-visit-buffer :color blue)
      ("k" ibuffer-backward-line)

      ("m" ibuffer-mark-forward)
      ("u" ibuffer-unmark-forward)
      ("*" hydra-ibuffer-mark/body :color blue)

      ("D" ibuffer-do-delete)
      ("S" ibuffer-do-save)
      ("a" hydra-ibuffer-action/body :color blue)

      ("g" ibuffer-update)
      ("s" hydra-ibuffer-sort/body :color blue)
      ("/" hydra-ibuffer-filter/body :color blue)

      ("o" ibuffer-visit-buffer-other-window "other window" :color blue)
      ("q" ibuffer-quit "quit ibuffer" :color blue)
      ("." nil "toggle hydra" :color blue))

    (defhydra hydra-ibuffer-mark (:color teal :columns 5
                                         :after-exit (hydra-ibuffer-main/body))
      "Mark"
      ("*" ibuffer-unmark-all "unmark all")
      ("M" ibuffer-mark-by-mode "mode")
      ("m" ibuffer-mark-modified-buffers "modified")
      ("u" ibuffer-mark-unsaved-buffers "unsaved")
      ("s" ibuffer-mark-special-buffers "special")
      ("r" ibuffer-mark-read-only-buffers "read-only")
      ("/" ibuffer-mark-dired-buffers "dired")
      ("e" ibuffer-mark-dissociated-buffers "dissociated")
      ("h" ibuffer-mark-help-buffers "help")
      ("z" ibuffer-mark-compressed-file-buffers "compressed")
      ("b" hydra-ibuffer-main/body "back" :color blue))

    (defhydra hydra-ibuffer-action (:color teal :columns 4
                                           :after-exit
                                           (if (eq major-mode 'ibuffer-mode)
                                               (hydra-ibuffer-main/body)))
      "Action"
      ("A" ibuffer-do-view "view")
      ("E" ibuffer-do-eval "eval")
      ("F" ibuffer-do-shell-command-file "shell-command-file")
      ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
      ("H" ibuffer-do-view-other-frame "view-other-frame")
      ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
      ("M" ibuffer-do-toggle-modified "toggle-modified")
      ("O" ibuffer-do-occur "occur")
      ("P" ibuffer-do-print "print")
      ("Q" ibuffer-do-query-replace "query-replace")
      ("R" ibuffer-do-rename-uniquely "rename-uniquely")
      ("T" ibuffer-do-toggle-read-only "toggle-read-only")
      ("U" ibuffer-do-replace-regexp "replace-regexp")
      ("V" ibuffer-do-revert "revert")
      ("W" ibuffer-do-view-and-eval "view-and-eval")
      ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
      ("b" nil "back"))

    (defhydra hydra-ibuffer-sort (:color amaranth :columns 3)
      "Sort"
      ("i" ibuffer-invert-sorting "invert")
      ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
      ("v" ibuffer-do-sort-by-recency "recently used")
      ("s" ibuffer-do-sort-by-size "size")
      ("f" ibuffer-do-sort-by-filename/process "filename")
      ("m" ibuffer-do-sort-by-major-mode "mode")
      ("b" hydra-ibuffer-main/body "back" :color blue))

    (defhydra hydra-ibuffer-filter (:color amaranth :columns 4)
      "Filter"
      ("m" ibuffer-filter-by-used-mode "mode")
      ("M" ibuffer-filter-by-derived-mode "derived mode")
      ("n" ibuffer-filter-by-name "name")
      ("c" ibuffer-filter-by-content "content")
      ("e" ibuffer-filter-by-predicate "predicate")
      ("f" ibuffer-filter-by-filename "filename")
      (">" ibuffer-filter-by-size-gt "size")
      ("<" ibuffer-filter-by-size-lt "size")
      ("/" ibuffer-filter-disable "disable")
      ("b" hydra-ibuffer-main/body "back" :color blue))

    (define-key ibuffer-mode-map "." 'hydra-ibuffer-main/body)

    ;; Global access
    (global-set-key (kbd "C-x C-b") 'ibuffer))
#+end_src
** Helpers
#+BEGIN_SRC emacs-lisp
  (defun ibuffer-clean ()
    "Clean automatically created buffers"
    (interactive)
    (ibuffer-unmark-all ?*)
    (ibuffer-mark-by-mode 'help-mode)
    (ibuffer-mark-by-mode 'magit-mode)
    (ibuffer-mark-by-mode 'occur-mode)
    (ibuffer-mark-by-mode 'grep-mode)
    (ibuffer-mark-by-mode 'dired-mode)
    (ibuffer-mark-by-mode 'completion-list-mode)
    (ibuffer-mark-by-mode 'compilation-mode)
    (ibuffer-mark-by-mode 'Man-mode)
    (ibuffer-mark-by-mode 'browse-kill-ring-mode)
    (ibuffer-mark-by-name-regexp "*anything*")
    (ibuffer-mark-by-name-regexp "*ESS*")
    (ibuffer-mark-by-name-regexp "*Shell Command Output*")
    (ibuffer-mark-by-name-regexp "*Compile-Log*")
    (ibuffer-mark-by-name-regexp "*vc-diff*")
    (ibuffer-do-delete))
#+END_SRC
* Notification
** Sauron
#+begin_src emacs-lisp
  (use-package sauron
    :ensure t
    :config

    ;;
    (setq sauron-separate-frame nil ;; The notification is on the same window ?
          sauron-sticky-frame t
          sauron-max-line-length nil ;; No max. length for the line
          sauron-modules '(sauron-org sauron-elfeed)) ;; reduced the default modules
    (sauron-start-hidden))
#+end_src
** Alert
#+begin_src emacs-lisp
  (use-package alert
    :after sauron
    :config

    (defcustom alert-highlight-priorities
      '((urgent . 5)
        (high . 4)
        (moderate . 3)
        (normal . 2)
        (low . 1)
        (trivial . 0))
      "A mapping of alert severities onto Growl priority values."
      :type '(alist :key-type symbol :value-type integer)
      :group 'alert)

    (defvar alert-highlight-current-level 0)
    (defvar alert-highlight-threshold 1)

    (defun alert-adapt-mode-line (info)

      ;; First time => copy the current mode line face
      (when (<= alert-highlight-current-level alert-highlight-threshold)
        (copy-face 'mode-line 'backup-mode-line-face))

      ;; (message (format "%d >= (%d, %d, %s)"
      ;; 		     (cdr (assq (plist-get info :severity) alert-highlight-priorities))
      ;; 		     alert-highlight-current-level
      ;; 		     alert-highlight-threshold
      ;; 		     (cdr (assq (plist-get info :severity)
      ;; 				alert-severity-colors))))

      ;; Change the policy
      (when (and (> (cdr (assq (plist-get info :severity) alert-highlight-priorities))
                    alert-highlight-threshold)
                 (> (cdr (assq (plist-get info :severity) alert-highlight-priorities))
                    alert-highlight-current-level))
        (progn
          (set-face-attribute 'mode-line nil
                              :background (cdr (assq (plist-get info :severity)
                                                     alert-severity-colors)))
          ))

      ;; Change current level if this one is upper
      (when (> (cdr (assq (plist-get info :severity) alert-highlight-priorities))
               alert-highlight-current-level)
        (setq alert-highlight-current-level (cdr (assq (plist-get info :severity)
                                                       alert-highlight-priorities))))

      ;; Print the message everytime !
      (alert-message-notify info)

      ;; Removers are optional.  Their job is to remove
      ;; the visual or auditory effect of the alert.
      :remover  #'alert-message-remove)

    (alert-define-style
     'mode-line-alert
     :title "Mode-line alert"
     :notifier 'alert-adapt-mode-line)

    (setq alert-default-style 'mode-line-alert)

    ;; Link with sauron
    (add-hook 'sauron-event-added-functions 'sauron-alert-el-adapter)

    ;; Shortcuts part
    (defun sauron-alert-clear ()
      (interactive)
      (progn
        (when (> alert-highlight-current-level alert-highlight-threshold)
          (progn
            (copy-face 'backup-mode-line-face 'mode-line)
            (setq alert-highlight-current-level 0)))
        (sauron-clear)))

    (defun sauron-alert-toggle-hide-show ()
      (interactive)
      (progn
        (sauron-toggle-hide-show)
        (when (> alert-highlight-current-level alert-highlight-threshold)
          (progn
            (copy-face 'backup-mode-line-face 'mode-line)
            (setq alert-highlight-current-level 0)))))


    ;; Shortcuts
    (global-set-key (kbd "<f7>") 'sauron-alert-toggle-hide-show)
    (global-set-key (kbd "C-<f7>") 'sauron-alert-clear))
#+end_src
* System
** Docker
#+begin_src emacs-lisp
  (use-package docker :ensure t)
  (use-package docker-api :ensure t)
  (use-package docker-tramp :ensure t)
  (use-package dockerfile-mode :ensure t)
#+end_src
** SSH
#+begin_src emacs-lisp
  (use-package ssh :ensure t)
  (use-package ssh-deploy :ensure t)
#+end_src
** Monitoring
#+begin_src emacs-lisp
  (use-package symon
    :ensure t
    :defer t)
#+end_src
** COMMENT unison interaction
#+begin_src emacs-lisp
  (use-package unison :ensure t)
#+end_src
* Internet/network
** Globalize clickable url
#+begin_src emacs-lisp
  ;; Redefine the browser to add vivaldi
  (use-package browse-url
    :config
    (defcustom browse-url-vivaldi-program
      (let ((candidates '("vivaldi" "vivaldi-stable")))
        (while (and candidates (not (executable-find (car candidates))))
          (setq candidates (cdr candidates)))
        (or (car candidates) "vivaldi"))
      "The name by which to invoke Vivaldi."
      :type 'string
      :version "25.3"
      :group 'browse-url)


    (defcustom browse-url-vivaldi-arguments nil
      "A list of strings to pass to Vivaldi as arguments."
      :type '(repeat (string :tag "Argument"))
      :version "25.3"
      :group 'browse-url)

    (defun browse-url-vivaldi (url &optional _new-window)
      "Ask the Vivaldi WWW browser to load URL.
  Default to the URL around or before point.  The strings in
  variable `browse-url-vivaldi-arguments' are also passed to
  Vivaldi.
  The optional argument NEW-WINDOW is not used."
      (interactive (browse-url-interactive-arg "URL: "))
      (setq url (browse-url-encode-url url))
      (let* ((process-environment (browse-url-process-environment)))
        (apply 'start-process
               (concat "vivaldi " url) nil
               browse-url-vivaldi-program
               (append
                browse-url-vivaldi-arguments
                (list url)))))




    (defun browse-url-default-browser (url &rest args)
      "Find a suitable browser and ask it to load URL.
  Default to the URL around or before point.

  When called interactively, if variable `browse-url-new-window-flag' is
  non-nil, load the document in a new window, if possible, otherwise use
  a random existing one.  A non-nil interactive prefix argument reverses
  the effect of `browse-url-new-window-flag'.

  When called non-interactively, optional second argument ARGS is used
  instead of `browse-url-new-window-flag'."
      (apply
       (cond
        ((memq system-type '(windows-nt ms-dos cygwin))
         'browse-url-default-windows-browser)
        ((memq system-type '(darwin))
         'browse-url-default-macosx-browser)
        ((browse-url-can-use-xdg-open) 'browse-url-xdg-open)
  ;;;    ((executable-find browse-url-gnome-moz-program) 'browse-url-gnome-moz)
        ((executable-find browse-url-mozilla-program) 'browse-url-mozilla)
        ((executable-find browse-url-firefox-program) 'browse-url-firefox)
        ((executable-find browse-url-chromium-program) 'browse-url-chromium)
        ((executable-find browse-url-vivaldi-program) 'browse-url-vivaldi)
  ;;;    ((executable-find browse-url-galeon-program) 'browse-url-galeon)
        ((executable-find browse-url-kde-program) 'browse-url-kde)
  ;;;    ((executable-find browse-url-netscape-program) 'browse-url-netscape)
  ;;;    ((executable-find browse-url-mosaic-program) 'browse-url-mosaic)
        ((executable-find browse-url-conkeror-program) 'browse-url-conkeror)
        ((executable-find browse-url-chrome-program) 'browse-url-chrome)
        ((executable-find browse-url-xterm-program) 'browse-url-text-xterm)
        ((locate-library "w3") 'browse-url-w3)
        (t
         (lambda (&rest _ignore) (error "No usable browser found"))))
       url args)))

  ;; Activate clickage everywhere
  (use-package goto-addr
    :config
    (define-globalized-minor-mode global-goto-address-mode
      goto-address-mode goto-address-mode :group 'goto-address)

    (global-goto-address-mode)

    (define-globalized-minor-mode global-goto-address-prog-mode
      goto-address-prog-mode goto-address-prog-mode :group 'goto-address))
#+end_src
** Searching
*** Google
#+begin_src emacs-lisp
  (use-package google :ensure t)
  (use-package google-maps :ensure t)
  (use-package google-translate :ensure t)
#+end_src
*** Youtube
#+begin_src emacs-lisp
  (use-package ivy-youtube :ensure t)
#+end_src
*** Codesearch
#+begin_src emacs-lisp
(use-package counsel-codesearch :ensure t)
#+end_src
** IRC
*** Global
#+begin_src emacs-lisp
  (use-package circe
    :ensure t
    :bind ("<S-f2>" . circe-init)
    :init
    (add-hook 'circe-chat-mode-hook 'disable-global-facilities)

    :config

    ;; Defining the networks
    (setq circe-network-options
          '(("bitlbee"
             :nick "slemaguer"
             :server-buffer-name "â bitlbee"
             :nickserv-password my-irc-password
             :nickserv-mask "\\(bitlbee\\|root\\)!\\(bitlbee\\|root\\)@"
             :nickserv-identify-challenge "use the \x02identify\x02 command to identify yourself"
             :nickserv-identify-command "PRIVMSG NickServ :IDENTIFY {nick} {password}"
             :nickserv-identify-confirmation "Password accepted, settings and accounts loaded"
             :channels ("&bitlbee")
             :host "localhost"
             :service "6667")

            ("Freenode"
             :tls t
             :nick "slemaguer"
             :channels (:after-auth "#limsi")
             :nickserv-password my-irc-password
             :server-buffer-name "â freenode")

            ("gitter"
             :tls t
             :nick "seblemaguer"
             :sasl-username "seblemaguer"
             :sasl-password my-irc-password
             :server-buffer-name "â gitter"
             :host"irc.gitter.im"
             :service "6667")
            ))

    ;; Completion
    (setq circe-use-cycle-completion t)

    ;; Spam information reduction
    (setq circe-reduce-lurker-spam t)

    ;; Tracking
    (setq lui-track-bar-behavior 'before-switch-to-buffer)
    (enable-lui-track-bar)

    ;; spell checking
    (add-hook 'circe-channel-mode-hook 'turn-on-flyspell)
    (setq lui-max-buffer-size 30000
          lui-flyspell-p t
          lui-flyspell-alist '(("limsi" "francais")
                               ("IvanaDidirkova" "francais")
                               ("." "american")))

    ;; Formatting
    (enable-circe-color-nicks)

    (setq lui-time-stamp-position 'right-margin
          lui-time-stamp-format "%H:%M"
          lui-fill-type nil)

    (defun my-lui-setup ()
      (setq
       fringes-outside-margins t
       right-margin-width 5
       word-wrap t
       wrap-prefix "    "))
    (add-hook 'lui-mode-hook 'my-lui-setup)

    ;; Connection
    (defun circe-network-connected-p (network)
      "Return non-nil if there's any Circe server-buffer whose
    `circe-server-netwok' is NETWORK."
      (catch 'return
        (dolist (buffer (circe-server-buffers))
          (with-current-buffer buffer
            (if (string= network circe-server-network)
                (throw 'return t))))))

     (defun circe-maybe-connect (network)
       "Connect to NETWORK, but ask user for confirmation if it's
    already been connected to."
       (interactive "sNetwork: ")
       (if (or (not (circe-network-connected-p network))
               (y-or-n-p (format "Already connected to %s, reconnect?" network)))
           (circe network)))

     (defun my-irc-password (server)
       "Return the password for the `SERVER'."
       (my:auth-source-get-passwd :host server))

     ;; Shortcut
     (defun circe-init ()
       "Connect to IRC"
       (interactive)
       (if (circe-network-connected-p "bitlbee")
           (switch-to-buffer "&bitlbee")
         (progn
           (circe-maybe-connect "Freenode")
           (circe-maybe-connect "bitlbee"))))
    )
#+end_src
*** Logging
#+begin_src emacs-lisp
  (use-package lui-logging
    :commands enable-lui-logging)

#+end_src
*** Autopasting
#+begin_src emacs-lisp
  (use-package lui-autopaste
    :after circe
    :config
    (add-hook 'circe-channel-mode-hook 'enable-lui-autopaste)
    (defvar lui-autopaste-service-gist-url nil
      "The URL for the last gist.")

    (defun lui-autopaste-service-gist (text)
      "Paste TEXT to github using gist.el."
      ;; It's so great gist works with callbacks! It's so much fun to
      ;; work around that!
      (setq lui-autopaste-service-gist-url 'waiting)
      (with-temp-buffer
        (insert text)
        (gist-region (point-min) (point-max) nil
                     (lambda (gist)
                       (when (eq lui-autopaste-service-gist-url
                                 'waiting)
                         (setq lui-autopaste-service-gist-url
                               (oref gist :html-url))))))
      (let ((wait 0))
        (while (and (< wait 10)
                    (eq lui-autopaste-service-gist-url
                        'waiting))
          (sit-for 0.1 )
          (setq wait (1+ wait))))
      (if (eq lui-autopaste-service-gist-url 'waiting)
          (progn
            (setq lui-autopaste-service-gist-url nil)
            (error "Couldn't create gist"))
        (prog1 lui-autopaste-service-gist-url
          (setq lui-autopaste-service-gist-url nil))))


    (setq lui-autopaste-function 'lui-autopaste-service-gist))
#+end_src
*** Some coloring
#+begin_src emacs-lisp
  (use-package lui-irc-colors
    :after circe
    :config
    (add-to-list 'lui-pre-output-hook 'lui-irc-colors))
#+end_src
*** Notification
#+begin_src emacs-lisp
  (use-package sauron-circe
    :ensure quelpa
    :quelpa (sauron-circe :repo "seblemaguer/sauron-circe" :fetcher github)
    :after sauron
    :config
    (sauron-circe-start))
#+end_src
** Mail
*** TTLS
  #+begin_src emacs-lisp
    (use-package starttls
      :config
      (setq starttls-use-gnutls t
	    starttls-gnutls-program "gnutls-cli"
	    starttls-extra-arguments '("--insecure")
	    auth-sources '("~/.authinfo.gpg")))

  #+end_src
*** Message composition
#+begin_src emacs-lisp
  (use-package message
    :init
    (add-hook 'message-mode-hook 'flyspell-mode)
    (add-hook 'message-setup-hook '(lambda () (footnote-mode t)))
    (add-hook 'message-mode-hook 'disable-global-facilities)

    :config
    (setq message-auto-save-directory nil
          message-citation-line-function 'message-insert-formatted-citation-line
          message-citation-line-format "Le %e %B %Y Ã  %-H:%M %Z, %N a Ã©crit :"
          message-sendmail-f-is-evil nil
          message-signature-file (format "%s/third_parties/mail/signature" config-basedir)
          message-fill-column 100)
    )
#+end_src
*** Composing/Sending
  #+begin_src emacs-lisp
    (use-package smtpmail-multi
      :ensure t
      :after flyspell
      ;; :ensure-system-package msmtp
      :config

      (setq user-full-name "SÃ©bastien Le Maguer"
            smtpmail-multi-accounts
            '(
              (sebgmail . ("seb.lemaguer@gmail.com"
                           "smtp.gmail.com"
                           587
                           "seb.lemaguer@gmail.com"
                           starttls
                           nil nil nil))
              (coli . ("slemaguer"
                       "smtp.coli.uni-saarland.de"
                       587
                       "slemaguer@coli.uni-saarland.de"
                       starttls
                       nil nil nil))
              (mmci . ("lemaguer"
                       "mail.mmci.uni-saarland.de"
                       1025
                       "lemaguer@mmci.uni-saarland.de"
                       starttls
                       nil nil nil))
              )

            smtpmail-multi-associations
            '(("slemaguer@coli.uni-saarland.de" coli)
              ("lemaguer@mmci.uni-saarland.de" mmci)
              ("seb.lemaguer@gmail.com" sebgmail))

            smtpmail-multi-default-account 'coli
            message-send-mail-function 'smtpmail-multi-send-it
            mail-host-address "coli.uni-saarland.de"

            ;; Debug part
            smtpmail-debug-info t
            smtpmail-debug-verbose t)
      )
  #+end_src
*** notmuch
**** Global configuration
#+begin_src emacs-lisp
  (use-package notmuch
    :ensure t
    :ensure-system-package notmuch
    :ensure-system-package isync
    :config
    (setq notmuch-search-oldest-first nil
          notmuch-print-mechanism 'notmuch-print-muttprint/evince
          notmuch-show-all-multipart/alternative-parts nil
          notmuch-crypto-process-mime t
          gnus-inhibit-images nil
          notmuch-always-prompt-for-sender t
          notmuch-show-indent-messages-width 2
          notmuch-fcc-dirs '(("slemaguer@coli.uni-saarland.de" . "Saarland/INBOX/.Sent")
                             ("lemaguer@mmci.uni-saarland.de" . "MMCI/Sent")
                             ("seb.lemaguer@gmail.com" . "SebGmail/Sent")
                             ))

    ;; Hook for notmuch
    (defcustom notmuch-index-updated-hook nil
      "Normal hook run when notmuch index has been updated."
      :type 'hook
      :group 'notmuch)

    (defun notmuch-message-mark-sent ()
      "Mark all the message from any interesting sent folders as sent."
      (interactive)
      (notmuch-tag "folder:Saarland/INBOX/.Sent or folder:*/Sent"
                   (notmuch-tag-change-list '("-inbox" "-unread" "+sent"))))

    (defun notmuch-update-index ()
      "Update the index (without sync.) and mark sent messages as sent"
      (interactive)
      (notmuch-poll)
      (notmuch-message-mark-sent)
      (run-hooks 'notmuch-index-updated-hook))

    (defun notmuch-update-index-and-refresh-buffer ()
      "Update the index and then refresh the current buffer"
      (interactive)
      (notmuch-update-index)
      (notmuch-refresh-this-buffer))

    (defun notmuch-sync-and-update-index ()
      "Update the index after sync."
      (interactive)
      (call-process "mbsync" nil t nil "-a")
      (notmuch-update-index))

    ;; Hello shortcuts
    (define-key notmuch-hello-mode-map "U" 'notmuch-sync-and-update-index)
    (define-key notmuch-hello-mode-map "g" 'notmuch-update-index-and-refresh-buffer)

    ;; Search shortcuts
    (define-key notmuch-search-mode-map "g" 'notmuch-update-index-and-refresh-buffer)
    (define-key notmuch-search-mode-map "d"
      (lambda ()
        "toggle deleted tag for thread"
        (interactive)
        (if (member "deleted" (notmuch-search-get-tags))
            (notmuch-search-tag '("-deleted"))
          (notmuch-search-tag '("+deleted" "-inbox" "-unread")))))

    (define-key notmuch-search-mode-map "!"
      (lambda ()
        "toggle unread tag for thread"
        (interactive)
        (if (member "unread" (notmuch-search-get-tags))
            (notmuch-search-tag '("-unread"))
          (notmuch-search-tag '("+unread")))))

    ;; Show shortcuts
    (define-key notmuch-show-mode-map "\C-c\C-o" 'browse-url-at-point)

    (define-key notmuch-show-mode-map "d"
      (lambda ()
        "toggle deleted tag for message"
        (interactive)
        (if (member "deleted" (notmuch-show-get-tags))
            (notmuch-show-tag '("-deleted"))
          (notmuch-show-tag '("+deleted" "-inbox" "-unread")))))


    (global-set-key (kbd "<f2>") 'notmuch))
#+end_src
**** Welcome
***** Use-package start
#+begin_src emacs-lisp
  (use-package notmuch-hello
    :defer t
    :config

    (setq notmuch-hello-thousands-separator "." ;; Add a thousand separator
          notmuch-column-control 1.0) ;; don't display columns
#+end_src
***** Saved searches
#+begin_src emacs-lisp
      ;; Research
      (setq notmuch-saved-searches '(
                                     ;; Quick helpers
                                     (:key "u" :name "unread" :query "tag:unread")
                                     (:key "t" :name "today" :query "date:today")
                                     (:key "f" :name "flagged" :query "tag:flagged")
                                     (:key "D" :name "Deleted" :query "tag:deleted")

                                     ;; Classic box
                                     (:key "i" :name "inbox" :query "tag:inbox")
                                     (:key "e" :name "sent" :query "tag:sent")
                                     (:key "d" :name "drafts" :query "tag:draft")

                                     ;; Folder
                                     (:key "p" :name "Saarland inbox" :query "folder:Saarland/INBOX")
                                     (:key "s" :name "SebGmail inbox" :query "folder:SebGmail/INBOX")
                                     ))

    (defun my-count-query (query)
      (with-temp-buffer
        (insert query "\n")
        (unless (= (call-process-region (point-min) (point-max) notmuch-command
                                        t t nil "count" "--batch") 0)
          (notmuch-logged-error "notmuch count --batch failed"
                                "Please check that the notmuch CLI is new enough to support `count
  --batch'. In general we recommend running matching versions of
  the CLI and emacs interface."))

        (goto-char (point-min))
        (let ((n (read (current-buffer))))
          (if (= n 0)
              nil
            (notmuch-hello-nice-number n)))))

    (defun my-notmuch-hello-query-insert (cnt query elem)
      (if cnt
          (let* ((str (format "%s" cnt))
                 (widget-push-button-prefix "")
                 (widget-push-button-suffix "")
                 (oldest-first (case (plist-get elem :sort-order)
                                 (newest-first nil)
                                 (oldest-first t)
                                 (otherwise notmuch-search-oldest-first))))
            (widget-create 'push-button
                           :notify #'notmuch-hello-widget-search
                           :notmuch-search-terms query
                           :notmuch-search-oldest-first oldest-first
                           :notmuch-search-type 'tree
                           str)
            (widget-insert (make-string (- 8 (length str)) ? )))
        (widget-insert "        ")))


    (defun my-notmuch-hello-insert-searches ()
      "Insert the saved-searches section."
      (widget-insert (propertize "New     Total      Key  List\n" 'face 'my-notmuch-hello-header-face))
      (mapc (lambda (elem)
              (when elem
                (let* ((q_tot (plist-get elem :query))
                       (q_new (concat q_tot " AND tag:unread"))
                       (n_tot (my-count-query q_tot))
                       (n_new (my-count-query q_new)))
                  (my-notmuch-hello-query-insert n_new q_new elem)
                  (my-notmuch-hello-query-insert n_tot q_tot elem)
                  (widget-insert "   ")
                  (widget-insert (plist-get elem :key))
                  (widget-insert "    ")
                  (widget-insert (plist-get elem :name))
                  (widget-insert "\n"))))

            notmuch-saved-searches))

#+end_src
***** Recent searches
#+begin_src emacs-lisp
    (defun my-notmuch-hello-insert-recent-searches ()
      "Insert recent searches."
      (when notmuch-search-history
        (widget-insert "Recent searches:")
        (widget-insert "\n\n")
        (let ((start (point)))
          (loop for i from 1 to notmuch-hello-recent-searches-max
                for search in notmuch-search-history do
                (let ((widget-symbol (intern (format "notmuch-hello-search-%d" i))))
                  (set widget-symbol
                       (widget-create 'editable-field
                                      ;; Don't let the search boxes be
                                      ;; less than 8 characters wide.
                                      :size (max 8
                                                 (- (window-width)
                                                    ;; Leave some space
                                                    ;; at the start and
                                                    ;; end of the
                                                    ;; boxes.
                                                    (* 2 notmuch-hello-indent)
                                                    ;; 1 for the space
                                                    ;; before the `[del]'
                                                    ;; button. 5 for the
                                                    ;; `[del]' button.
                                                    1 5))
                                      :action (lambda (widget &rest ignore)
                                                (notmuch-hello-search (widget-value widget)))
                                      search))
                  (widget-insert " ")
                  (widget-create 'push-button
                                 :notify (lambda (widget &rest ignore)
                                           (when (y-or-n-p "Are you sure you want to delete this search? ")
                                             (notmuch-hello-delete-search-from-history widget)))
                                 :notmuch-saved-search-widget widget-symbol
                                 "del"))
                (widget-insert "\n"))
          (indent-rigidly start (point) notmuch-hello-indent))
        nil))

#+end_src
***** Header
#+begin_src emacs-lisp
  (defface my-notmuch-hello-header-face
    '((t :foreground "white"
         :background "#0088FC"
         :weight bold))
    "Font for the header in `my-notmuch-hello-insert-searches`."
    :group 'notmuch-faces)
#+end_src
***** Generate welcome page
#+begin_src emacs-lisp
  (defun my-notmuch-hello-insert-separator ()
    (insert "\n\f\n"))


  ;; We add items later in reverse order with (add-to-list ...):
  (setq notmuch-hello-sections '())

  (add-to-list 'notmuch-hello-sections 'my-notmuch-hello-insert-recent-searches)
  (add-to-list 'notmuch-hello-sections 'my-notmuch-hello-insert-searches)
  ;; (add-to-list 'notmuch-hello-sections 'my-notmuch-hello-insert-separator)
  ;; (add-to-list 'notmuch-hello-sections 'notmuch-hello-insert-search)
  ;;(add-to-list 'notmuch-hello-sections 'my-notmuch-hello-insert-header)

  ;; this is the end of use-package notmuch:
  (add-hook 'notmuch-hello-refresh-hook
            (lambda ()
              (whitespace-mode -1)
              ))
#+end_src
***** End of use-package
#+begin_src emacs-lisp
    )
#+end_src
**** Notification
#+begin_src emacs-lisp
  (use-package sauron-notmuch
    :ensure quelpa
    :quelpa (sauron-notmuch :repo "seblemaguer/sauron-notmuch" :fetcher github)
    :after (sauron notmuch)
    :config

    ;; Define an important filter
    ;; (setq sauron-notmuch-important-filter "....")

    ;; Start
    (sauron-notmuch-start))
#+end_src
**** Integration with org-mode
#+begin_src emacs-lisp
(use-package org-notmuch)
#+end_src
**** Reply/citation
#+begin_src emacs-lisp
(use-package notmuch-mua
  :defer t
  :config
  (setq notmuch-mua-cite-function #'message-cite-original-without-signature)
)
#+end_src
**** Interactive search
#+begin_src emacs-lisp
(use-package counsel-notmuch :ensure t)
#+end_src
** RSS
*** Global
#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t
    :config

    ;; Change the storage directory
    (setq elfeed-db-directory "~/Dropbox/emacs/elfeed")

    ;; Formatting dates
    (setq elfeed-search-date-format '("%Y-%m-%d %H:%M" 17 :left))

    ;; Hook
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :before "7 days ago"
                                  :remove 'unread))

    ;; Shortcuts
    (global-set-key (kbd "<f9>")
                    (lambda ()
                      (interactive)
                      (elfeed-search-set-filter "+unread")
                      (elfeed)))
    (global-set-key (kbd "C-<f9>")
                    (lambda ()
                      (interactive)
                      (elfeed-search-set-filter "+unread +mustread")
                      (elfeed)))
    (global-set-key (kbd "S-<f9>")
                    (lambda ()
                      (interactive)
                      (elfeed-search-set-filter "+unread +emacs")
                      (elfeed))))
#+end_src
*** Org connection
#+begin_src emacs-lisp
  (use-package elfeed-org
    :ensure t
    :after elfeed
    :config
    (when (file-exists-p "~/Dropbox/org/organisation/rss.org")
      (progn
        (elfeed-org)
        (setq rmh-elfeed-org-files (list "~/Dropbox/org/organisation/rss.org"))
        (rmh-elfeed-org-process rmh-elfeed-org-files rmh-elfeed-org-tree-id)))


    (elfeed-update-background-start))
#+end_src
*** Youtube specificities
#+begin_src emacs-lisp
  (use-package youtube-dl
    :ensure quelpa
    :quelpa (youtube-dl :repo "skeeto/youtube-dl-emacs" :fetcher github)
    :defer t
    :bind ("C-x y" . youtube-dl-list)
    :config
    (setq youtube-dl-directory "~/netshare")

    ;; FIXME: should be moved !
    (defun expose (function &rest args)
    "Return an interactive version of FUNCTION, 'exposing' it to the user."
    (lambda ()
      (interactive)
      (apply function args)))

    (defun elfeed-show-youtube-dl ()
      "Download the current entry with youtube-dl."
      (interactive)
      (pop-to-buffer (youtube-dl (elfeed-entry-link elfeed-show-entry))))

    (cl-defun elfeed-search-youtube-dl (&key slow)
      "Download the current entry with youtube-dl."
      (interactive)
      (let ((entries (elfeed-search-selected)))
        (dolist (entry entries)
          (if (null (youtube-dl (elfeed-entry-link entry)
                                :title (elfeed-entry-title entry)
                                :slow slow))
              (message "Entry is not a YouTube link!")
            (message "Downloading %s" (elfeed-entry-title entry)))
          (elfeed-untag entry 'unread)
          (elfeed-search-update-entry entry)
          (unless (use-region-p) (forward-line)))))

    (defalias 'elfeed-search-youtube-dl-slow
      (expose #'elfeed-search-youtube-dl :slow t))

    (define-key elfeed-show-mode-map "d" 'elfeed-show-youtube-dl)
    (define-key elfeed-search-mode-map "d" 'elfeed-search-youtube-dl)
    (define-key elfeed-search-mode-map "D" 'elfeed-search-youtube-dl-slow)
    (define-key elfeed-search-mode-map "L" 'youtube-dl-list))
#+end_src
*** Notification part
#+begin_src emacs-lisp
  (use-package sauron
    :ensure t
    :config
    (require 'sauron-elfeed)
    (cl-loop for feed in elfeed-feeds
	     do (when (member 'mustread (cdr feed))
		  (puthash (car feed) 3 sauron-elfeed-prio-hash))))

#+end_src
*** Helpers
#+begin_src emacs-lisp
(defun elfeed-mark-all-as-read ()
      (interactive)
      (mark-whole-buffer)
      (elfeed-search-untag-all-unread))

#+end_src
** Stackexchange
#+begin_src emacs-lisp
(use-package sx
  :ensure t
  :config
  (bind-keys :prefix "C-c s"
             :prefix-map my-sx-map
             :prefix-docstring "Global keymap for SX."
             ("q" . sx-tab-all-questions)
             ("i" . sx-inbox)
             ("o" . sx-open-link)
             ("u" . sx-tab-unanswered-my-tags)
             ("a" . sx-ask)
             ("s" . sx-search)))
#+end_src
** Reddit
#+begin_src emacs-lisp
  (use-package md4rd
    :ensure t
    :init
    (defhydra md4rd-hydra (:color blue :hint none)
      "
        _o_: open   _u_: upvote       _e_: expand all     _t_: toggle line
                  _d_: downvote     _c_: collapse all
        "
        ("u" md4rd-upvote)
        ("d" md4rd-downvote)
        ("o" md4rd-open)
        ("t" md4rd-widget-toggle-line)
        ("e" md4rd-widget-expand-all)
        ("c" md4rd-widget-collapse-all))

    :bind (:map md4rd-mode-map
                ("u" . md4rd-upvote)
                ("d" . md4rd-downvote)
                ("o" . md4rd-open)
                ("t" . md4rd-widget-toggle-line)
                ("e" . md4rd-widget-expand-all)
                ("c" . md4rd-widget-collapse-all)
                ("TAB" . widget-forward)
                ("<backtab>" . widget-backward)
                ("/" . md4rd-hydra/body))

    :config
    (setq md4rd-subs-active '(lisp+Common_Lisp emacs)))
#+end_src
** github
#+begin_src emacs-lisp
  (defun gh-issue-new-url (project title body)
    "Generate the github url based on the PROJECT for the base and as the parameters TITLE and BODY"
    (concat "https://github.com/"
            project
            "/issues/new?title="
            (url-hexify-string title)
            "&body="
            (url-hexify-string body)))

  (defun gh-issue-new-browse (project title body)
    "Open the browser at the issue page"
    (browse-url (gh-issue-new-url project title body)))

  (defun gh-issue-get-project ()
    "Get the project name based on the GH-PROJECT property"
    (org-entry-get (point) "GH-PROJECT" t))

  (defun gh-issue-create ()
    "Create an issue based on the current entry of the org tree"
    (interactive)
    (gh-issue-new-browse (gh-issue-get-project)
                         (org-get-heading t t)
                         (org-export-as 'gfm t)))
#+end_src
* Music
** Global
#+begin_src emacs-lisp
  (use-package emms
    :ensure t
    :config

    (emms-all)

    ;; A minor macos adaptation
    (when (eq system-type 'darwin)
      (setq emms-source-file-gnu-find "/usr/local/bin/gfind"))

    ;; Some behaviour definition
    (setq later-do-interval 0.0001
          emms-directory "~/.emacs.d/emms"
          emms-playlist-buffer-name "*Music*"
          emms-source-file-default-directory (expand-file-name "~/Music")
          emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find
          emms-show-format "NP: %s"
          emms-playlist-default-major-mode 'emms-playlist-mode
          emms-repeat-playlist t
          emms-mode-line-mode-line-function nil  ;; Don't want any info in the mode line
          emms-mode-line-titlebar-function 'emms-mode-line-playlist-current) ;; Put info in the titlebar

    ;; Define a list of radio/streams/...
    (add-to-list 'emms-stream-default-list '("Classic rock radio" "http://internetradio.salue.de:8000/classicrock.mp3" 1 url))

    ;; Visualisation activation/deactivation
    (emms-mode-line nil)
    ;; (emms-playing-time-disable-display)

    ;; Enable cache
    (when (fboundp 'emms-cache)
      (emms-cache 1))

    ;; Adapt track description format
    (defun track-description (track)
      "Return a description of the current TRACK."
      (if (and (emms-track-get track 'info-artist)
               (emms-track-get track 'info-title))
          (let ((pmin (emms-track-get track 'info-playing-time-min))
                (psec (emms-track-get track 'info-playing-time-sec))
                (ptot (emms-track-get track 'info-playing-time))
                (art  (emms-track-get track 'info-artist))
                (tit  (emms-track-get track 'info-title))
                (alb  (emms-track-get track 'info-album)))
            (cond ((and pmin psec) (format "%s - %s - %s [%02d:%02d]" art alb tit pmin psec))
                  (ptot (format  "%s - %s - %s [%02d:%02d]" art alb tit (/ ptot 60) (% ptot 60)))
                  (t (emms-track-simple-description track))))
        (emms-track-simple-description track)))
    (setq emms-track-description-function 'track-description)


    ;; Show the progress bar when seek (FIXME: is not working have to correct)
    ;; taken from http://emacs.stackexchange.com/questions/21747/emms-how-can-i-have-a-progress-bar?rq=1
    (defun chunyang-emms-indicate-seek (_sec)
      (let* ((total-playing-time (emms-track-get
                                  (emms-playlist-current-selected-track)
                                  'info-playing-time))
             (elapsed/total (/ (* 100 emms-playing-time) total-playing-time)))
        (with-temp-message (format "[%-100s] %2d%%"
                                   (make-string elapsed/total ?=)
                                   elapsed/total)
          (sit-for 2))))
    (add-hook 'emms-player-seeked-functions #'chunyang-emms-indicate-seek 'append)

    ;; Some shortcuts
    (global-set-key (kbd "<f5>") 'emms-browse-by-artist)
    (global-set-key (kbd "S-<f5>") 'emms-playlist-mode-go))

  (use-package emms-info-libtag
    :after emms
    :config

    (setq emms-info-asynchronously nil
          emms-info-functions '(emms-info-libtag)))
#+end_src
** MPV as a player
#+begin_src emacs-lisp
  (use-package emms-player-simple-mpv
    :ensure t
    :after emms
    :config

    ;; Subpackages
    (use-package emms-player-simple-mpv-e.g.time-display)
    (use-package emms-player-simple-mpv-e.g.playlist-fname)
    (use-package emms-player-simple-mpv-e.g.hydra)
    (use-package emms-player-simple-mpv)
    (use-package emms-player-simple-mpv-control-functions)

    (define-emms-simple-player-mpv my-mpv '(file url streamlist playlist)
      (concat "\\`\\(http[s]?\\|mms\\)://\\|"
              (apply #'emms-player-simple-regexp
                     "aac" "pls" "m3u"
                     emms-player-base-format-list))
      "mpv" "--no-terminal" "--force-window=no" "--audio-display=no")


    (emms-player-simple-mpv-add-to-converters
     'emms-player-my-mpv "." '(playlist)
     (lambda (track-name) (format "--playlist=%s" track-name)))

    (add-to-list 'emms-player-list 'emms-player-my-mpv))
#+end_src
** Tagging using emms
I actually use this part for minor correction. The tags are done when abcde is converting the cd
#+begin_src emacs-lisp
  (use-package emms-mark-ext :ensure t)
#+end_src
** Browser
#+begin_src emacs-lisp
  (use-package emms-browser
    :after emms
    :config
    (emms-browser-make-filter
     "all-files" (emms-browser-filter-only-type 'file))
    (add-hook 'emms-browser-show-display-hook '(lambda () (hl-line-mode 1)))

    (setq emms-browser-info-artist-format "%iâ¢ %n"
          emms-browser-info-album-format "%i%cS [%y] %n"
          emms-browser-info-title-format "%iâª %T. %t [%d]"
          emms-browser-playlist-info-album-format "%cS %a - %A : "
          emms-browser-playlist-info-title-format "%T. %t [%d]"))
#+end_src
* Weather
#+begin_src emacs-lisp
(use-package wttrin
  :ensure t
  :commands (wttrin)
  :init
  (setq wttrin-default-cities '("SaarbrÃ¼cken" "Lannion" "Sofia")))
#+end_src
* Visual
** Global theme
#+begin_src emacs-lisp
  (use-package meacupla-theme
    :ensure quelpa
    :quelpa (meacupla-theme :repo "seblemaguer/meacupla-theme" :fetcher gitlab)
    :config
    (load-theme 'meacupla t))
#+end_src
** Frame part
*** Title
#+begin_src emacs-lisp
  (defun frame-title-format ()
    "Return frame title with current project name, where applicable."
    (let ((file buffer-file-name))
      (if file
          (if (and (bound-and-true-p projectile-mode)
                   (projectile-project-p))
              (concat
               (format "[%s] " (projectile-project-name))
               (replace-regexp-in-string (format "^%s" (projectile-project-p)) "" (file-truename file)))
            (abbreviate-file-name file))
        "%b")))

  (when (display-graphic-p)
    (setq frame-title-format '((:eval (frame-title-format)))))
#+end_src
*** Remove unused part
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
** Buffer
*** Org-mode
**** Faces
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :config

    (setq org-todo-keyword-faces
          '(("TODO" :background "red1" :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("REVIEW" :background "orange" :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("NEXT" :background "red1" :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("STARTED" :background "orange" :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("WAITING" :background "yellow" :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("DEFERRED" :background "gold" :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("DELEGATED" :background "gold" :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("MAYBE" :background "gray" :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("DONE" :background "forest green" :weight bold :box (:line-width 2 :style released-button))
            ("CANCELLED" :background "lime green" :foreground "black" :weight bold :box (:line-width 2 :style released-button)))


            org-priority-faces '((?A . (:foreground "red" :weight bold))
                                 (?B . (:foreground "orange"  :weight bold))
                                 (?C . (:foreground "orange"))
                                 (?D . (:foreground "forest green"))
                                 (?E . (:foreground "forest green")))))
#+end_src
**** Org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
**** Fancy priority
#+begin_src emacs-lisp
  (use-package org-fancy-priorities
    :ensure t
    :init
    (add-hook 'org-agenda-mode-hook 'org-fancy-priorities-mode)
    (add-hook 'org-mode-hook 'org-fancy-priorities-mode)
    :config
    (setq org-fancy-priorities-list
          '((?A . "â") (?B . "â¬") (?C . "â¬") (?D . "â")
            (?1 . "â¡") (?2 . "â®¬") (?3 . "â®®") (?4 . "â")
            (?I . "Imaportant"))))
#+end_src
*** Highlight
#+begin_src emacs-lisp
  (use-package volatile-highlights
    :ensure t
    :config
    (volatile-highlights-mode t))

  (use-package hl-line+
    :ensure t
    :disabled
    :config
    (global-hl-line-mode)
    (setq font-lock-maximum-decoration t)
    (setq font-lock-maximum-size nil)
    (global-font-lock-mode t)
    (transient-mark-mode t))
#+end_src

*** Indentation
#+begin_src emacs-lisp
  (use-package indent-guide
    :ensure t
    :defer t)
#+end_src
*** Column/line
#+begin_src emacs-lisp
  (use-package nlinum
    :ensure t
    :disabled t
    :config
    (line-number-mode t)
    (column-number-mode t)
    (global-nlinum-mode t)
    (size-indication-mode t))

  (use-package nlinum-hl
    :ensure t
    :after nlinum
    :disabled t
    :config
    (add-hook 'nlinum-mode-hook (lambda () (setq nlinum-highlight-current-line t))))


  (use-package fill-column-indicator
    :ensure t
    :config

    ;; Define a global mode but not sure we are going to use it
    (define-globalized-minor-mode
      global-fci-mode fci-mode
      (lambda ()
        (fci-mode 1))))
#+end_src

*** Paging
#+begin_src emacs-lisp
(use-package page-break-lines
  :ensure t
  :diminish page-break-lines-mode
  :config
  (global-page-break-lines-mode t))
#+end_src
*** Parenthesis
**** Smart parents
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :after circe
    :config

    ;; Activate smartparens globally
    (smartparens-global-mode t)
    (show-smartparens-global-mode t)

    ;; Activate smartparens in minibuffer
    (add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-mode)

    ;; Do not pair simple quotes
    (sp-pair "'" nil :actions :rem))
#+end_src
**** Rainbow delimiter
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config

    (custom-set-faces
     '(rainbow-delimiters-mismatched-face ((t (:foreground "white" :background "red" :weight bold))))
     '(rainbow-delimiters-unmatched-face ((t (:foreground "white" :background "red" :weight bold))))

     ;; show parents (in case of rainbow failing !)
     '(show-paren-match ((t (:foreground "white" :background "green" :weight bold))))
     '(show-paren-mismatch ((t (:foreground "white" :background "red" :weight bold))))
     )

    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
*** Show current function
#+begin_src emacs-lisp
  (which-func-mode 1)
#+end_src
*** Diff
#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :config
    (global-diff-hl-mode)
    (fringe-mode 10))
#+end_src
*** Faces/Colors
**** COMMENT Terminal
#+begin_src emacs-lisp
  (set-face-foreground 'term-color-black "#4d4d4d")
  (set-face-foreground 'term-color-red "#cc9393")
  (set-face-foreground 'term-color-green "#7f9f7f")
  (set-face-foreground 'term-color-yellow "#f0dfaf")
  (set-face-foreground 'term-color-blue "#4169e1")
  (set-face-foreground 'term-color-magenta "#dc8cc3")
  (set-face-foreground 'term-color-cyan "#93e0e3")
  (set-face-foreground 'term-color-white "#dcdccc")
#+end_src
**** Dired (using dired-rainbow)
#+begin_src emacs-lisp
  (use-package dired-rainbow
    :ensure t
    :defer t
    :init
    (eval-after-load 'dired '(require 'dired-rainbow))

    :config

    (defconst dired-audio-files-extensions
      '("mp3" "MP3" "ogg" "OGG" "flac" "FLAC" "wav" "WAV")
      "Dired Audio files extensions")
    (dired-rainbow-define audio "#329EE8" dired-audio-files-extensions)

    (defconst dired-video-files-extensions
      '("vob" "VOB" "mkv" "MKV" "mpe" "mpg" "MPG" "mp4" "MP4" "ts" "TS" "m2ts"
        "M2TS" "avi" "AVI" "mov" "MOV" "wmv" "asf" "m2v" "m4v" "mpeg" "MPEG" "tp")
      "Dired Video files extensions")
    (dired-rainbow-define video "#455AFC" dired-video-files-extensions)

    (dired-rainbow-define html "#4e9a06" ("htm" "html" "xhtml"))
    (dired-rainbow-define xml "DarkGreen" ("xml" "xsd" "xsl" "xslt" "wsdl"))

    (dired-rainbow-define document "#ce5c00" ("doc" "docx" "odt" "pdb" "pdf" "ps" "rtf" "djvu"))
    (dired-rainbow-define image "#ff4b4b" ("jpg" "png" "jpeg" "gif"))

    (dired-rainbow-define sourcefile "#3F82FD" ("el" "groovy" "gradle" "py" "c" "cc" "h" "java" "pl" "rb"))

    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#ad7fa8" ("zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#e6a8df" ("deb" "rpm"))
    (dired-rainbow-define encrypted "LightBlue" ("gpg" "pgp"))

    (dired-rainbow-define-chmod executable-unix "Green" "-.*x.*")

    (dired-rainbow-define log (:inherit default :italic t) ".*\\.log")
    )
#+end_src
**** Elfeed
#+begin_src emacs-lisp
  (use-package elfeed
    :config
    ;; Adapt the faces
    (defface elfeed-must-read-face
      '((((class color) (background light)) (:foreground "#f00"))
        (((class color) (background dark))  (:foreground "#f00")))
      "Face used in search mode for titles."
      :group 'elfeed)

    (defface elfeed-emacs-face
      '((((class color) (background light)) (:foreground "#090"))
        (((class color) (background dark))  (:foreground "#090")))
      "Face used in search mode for titles."
      :group 'elfeed)

    (defface elfeed-news-face
      '((((class color) (background light)) (:foreground "#AAA"))
        (((class color) (background dark))  (:foreground "#AAA")))
      "Face used in search mode for titles."
      :group 'elfeed)

    (setq elfeed-search-face-alist
          '((unread elfeed-search-unread-title-face)
            (mustread elfeed-must-read-face)
            (news elfeed-news-face)
            (emacs elfeed-emacs-face)))
    )

  (use-package youtube-dl
    :config
    (defface elfeed-youtube
      '((t :foreground "#f9f"))
      "Marks YouTube videos in Elfeed."
      :group 'elfeed)

    (push '(youtube elfeed-youtube) elfeed-search-face-alist))
#+end_src
*** Emoji
#+begin_src emacs-lisp
  (use-package emojify
    :ensure t
    :config

    (use-package company-emoji
      :ensure t)

    (setq emojify-user-emojis
          '(("(heart)" . (("name" . "Heart")
                          ("image" . "~/.emacs.d/emojis/emojione-v2.2.6-22/2665.png")
                          ("style" . "github")))))

    ;; If emojify is already loaded refresh emoji data
    (when (featurep 'emojify)
      (emojify-set-emoji-data)))



  (use-package flycheck-status-emoji
    :ensure t
    :after emojify)
#+end_src
*** Specific mode cleaning helper
#+begin_src emacs-lisp
  (defun disable-global-facilities ()
    "Function to disable some utilities globally activated for current buffer"
    (interactive)
    (smartparens-mode 0)
    ;; (nlinum-mode 0)
    )
#+end_src
** Icons
#+begin_src emacs-lisp
  (use-package all-the-icons :ensure t)
  (use-package all-the-icons-dired :ensure t)
  (use-package all-the-icons-ivy :ensure t)
#+end_src
** Fonts
#+begin_src emacs-lisp
  (defun set-icon-fonts (CODE-FONT-ALIST)
    "Utility to associate many unicode points with specified fonts."
    (--each CODE-FONT-ALIST
      (-let (((font . codes) it))
        (--each codes
          (set-fontset-font t `(,it . ,it) font)))))

  (defun load-default-fonts ()

    (set-fontset-font "fontset-default" 'unicode "Dejavu Sans Mono")
    (set-face-font 'default "Inconsolata-11")

    ;; The icons you see are not the correct icons until this is evaluated!
    (set-icon-fonts
     '(("fontawesome"
        ;; ï¼   ï     ï     ï      ï     ï
        #xf07c #xf0c9 #xf0c4 #xf0cb #xf017 #xf101)

       ("all-the-icons"
        ;; î¤   î¤¨
        #xe907 #xe928)

       ("github-octicons"
        ;; ï   ï     ï¶     ïµ     ï     ï
        #xf091 #xf059 #xf076 #xf075 #xf016 #xf00a)

       ("Symbola"
        ;; ð    â¨      â      â»    â¼     â      ð       ð½
        #x1d54a #x2a02 #x2205 #x27fb #x27fc #x2299 #x1d54b #x1d53d
        ;; ð¹    ð       ð
        #x1d539 #x1d507 #x1d517))))


  (defun load-fonts (frame)
    (select-frame frame)
    (load-default-fonts))

  (if (daemonp)
      (add-hook 'after-make-frame-functions #'load-fonts)
    (load-default-fonts))
#+end_src
** Mode line - spaceline
#+begin_src emacs-lisp
  (use-package fancy-battery :ensure t)
  (use-package spaceline-config :ensure spaceline)

  (use-package spaceline-all-the-icons
    :ensure t
    :after (:all spaceline)
    :config


    ;; Separator configuration
    (setq spaceline-all-the-icons-separator-type 'wave
          spaceline-separator-dir-left '(left . left)
          spaceline-separator-dir-right '(right . right)
          spaceline-minor-modes-separator " ")

    ;;Other configuration
    (setq spaceline-all-the-icons-icon-set-flycheck-slim 'dots
          spaceline-all-the-icons-icon-set-git-ahead 'commit
          ;; spaceline-all-the-icons-icon-set-window-numbering (quote square))
          spaceline-all-the-icons-flycheck-alternate t
          spaceline-all-the-icons-highlight-file-name t
          spaceline-highlight-face-func 'spaceline-highlight-face-modified)

    ;; Change this ugly orange color
    (set-face-attribute 'spaceline-unmodified nil :background "LightSkyBlue")

    ;; Info
    (spaceline-info-mode)

    ;; Battery
    (add-hook 'after-init-hook #'fancy-battery-mode)
    (display-battery-mode -1)

    ;; Reduce projectile account
    (setq projectile-mode-line " P")


    (spaceline-all-the-icons--setup-anzu)
    (spaceline-all-the-icons--setup-package-updates)
    (spaceline-all-the-icons--setup-paradox)
    (spaceline-all-the-icons--setup-neotree)

    (spaceline-toggle-all-the-icons-vc-icon-on)
    (spaceline-toggle-all-the-icons-fullscreen-on)
    (spaceline-toggle-all-the-icons-flycheck-status-on)
    (spaceline-toggle-all-the-icons-git-status-on)
    (spaceline-toggle-all-the-icons-vc-icon-on)
    (spaceline-toggle-all-the-icons-mode-icon-on)
    (spaceline-toggle-all-the-icons-package-updates-on)
    (spaceline-toggle-all-the-icons-text-scale-on)
    (spaceline-toggle-all-the-icons-region-info-on)

    ;; EMMS part
    (spaceline-define-segment all-the-icons-track
      "Show the current played track."
      (emms-mode-line-icon-function))

    ;; Circe specific part
    (spaceline-define-segment circe-track
      "Show the circe buffers with new messages. Requires `circe-track-mode' to be enabled."
      (if tracking-buffers
          (s-join " " (tracking-shorten tracking-buffers))))

    ;; Redfine linenum for pdf-view mode compatibility
    (spaceline-define-segment line-column
      "The current line and column numbers."
      (if (eq major-mode 'pdf-view-mode)
          (concat (number-to-string (pdf-view-current-page))
                  "/"
                  (number-to-string (pdf-cache-number-of-pages)))
        mode-line-position
        "%l:%2c"))

    ;; Redine the mode-line theme
    (defun spaceline-all-the-icons-theme (&rest additional-segments)
      "Install the `spaceline-ml-all-the-icons'.
  Add ADDITIONAL-SEGMENTS to the end of the theme."
      (interactive)
      (spaceline-compile
        "all-the-icons"
        '(
          ;; Azu
          (all-the-icons-anzu
           :face mode-line
           :skip-alternate t)

          ;; Buffer information
          ((all-the-icons-modified
            buffer-encoding
            all-the-icons-buffer-size)
           :face highlight-face
           :skip-alternate t

           :separator (spaceline-all-the-icons--separator spaceline-all-the-icons-secondary-separator " "))

          all-the-icons-separator-left-active-1

          ;; Projectile / major mode
          ((all-the-icons-projectile
            all-the-icons-mode-icon
            ((all-the-icons-buffer-path
              all-the-icons-buffer-id) :separator ""))
           :face default-face)

          all-the-icons-separator-left-active-2

          ;; ???
          ((all-the-icons-process
            line-column
            all-the-icons-region-info
            all-the-icons-fullscreen
            all-the-icons-text-scale
            all-the-icons-narrowed
            all-the-icons-multiple-cursors)
           :face highlight-face
           :separator (spaceline-all-the-icons--separator spaceline-all-the-icons-primary-separator " "))

          all-the-icons-separator-left-active-3
          all-the-icons-separator-left-inactive

          ;; VC/check/update informations
          ((all-the-icons-vc-icon
            all-the-icons-vc-status
            ((all-the-icons-git-ahead
              all-the-icons-git-status) :separator " ")
            ((all-the-icons-flycheck-status
              all-the-icons-flycheck-status-info) :separator " ")
            all-the-icons-package-updates)
           :face other-face
           :separator (spaceline-all-the-icons--separator spaceline-all-the-icons-secondary-separator " "))

          ;; Minor modes
          ((all-the-icons-separator-minor-mode-left
            all-the-icons-minor-modes
            all-the-icons-separator-minor-mode-right)
           :tight t
           :face highlight-face
           :when spaceline-all-the-icons-minor-modes-p)

          ;; Which function
          ((all-the-icons-which-function)
           :face powerline-active2
           :separator ""))

        `(((,@additional-segments) :when active :face powerline-active2)
          ((,@additional-segments) :when (not active) :face powerline-inactive2)

          ;; Wweather
          ((all-the-icons-weather
            all-the-icons-temperature
            all-the-icons-sunrise
            all-the-icons-sunset)
           :face powerline-active2
           :separator (spaceline-all-the-icons--separator spaceline-all-the-icons-secondary-separator " "))

          ;; Music info
          ((all-the-icons-player-volume
            all-the-icons-player-controls
            all-the-icons-track
            all-the-icons-player-controls-shuffle)
           :face powerline-active2)

          all-the-icons-separator-right-active-1
          ((all-the-icons-hud
            all-the-icons-buffer-position)
           :separator " " :when active)

          all-the-icons-separator-right-active-2
          all-the-icons-separator-right-inactive

          ;; Time info
          ((all-the-icons-org-clock-current-task
            all-the-icons-battery-status
            all-the-icons-time)
           :separator (spaceline-all-the-icons--separator spaceline-all-the-icons-primary-separator " ")
           :face default-face)))

      (setq-default mode-line-format spaceline-all-the-icons-theme))

    ;; Loading
    (spaceline-all-the-icons-theme 'circe-track))
#+end_src

* Keys/shortcuts
** Mac adaptation
#+begin_src emacs-lisp
(setq mac-option-modifier nil
      mac-command-modifier 'meta)
#+end_src
** Main entry
#+begin_src emacs-lisp
    (defhydra hydra-main (:color teal :hint nil)
  "
   Main helper

    Org. related          Help                Zooming        bookmarks          other helpers     completion
    ------------------------------------------------------------------------------------------------------------------
    _c_: org-capture        _f_: function doc.    _+_: zoom in     _B_: list bookmarks  _p_: prodigy        _y_: ivy-yasnippet
    _g_: org-web-get-url    _v_: variable doc.    _-_: zoom out    _b_: bookmark file   _m_: new mail

    Backups
    ------------------------------------------------------------------------------------------------------------------
    _s_: list backups
    _S_: snapshot timemachine
    "
      ("b" bookmark-set)
      ("B" list-bookmarks)
      ("c" org-capture)
      ("f" describe-function)
      ("g" org-web-tools-read-url-as-org)
      ("m" notmuch-mua-new-mail)
      ("p" prodigy)
      ("s" snapshot-timeline)
      ("S" snapshot-timemachine)
      ("v" describe-variable)
      ("y" ivy-yasnippet)
      ("+" text-scale-increase :color pink)
      ("-" text-scale-decrease :color pink)
      ("<ESC>" nil "quit" :color blue)
      ("q"   nil "cancel" :color blue))

    (global-set-key (kbd "<f1>") 'hydra-main/body)
#+end_src
** Project/Version control
#+begin_src emacs-lisp
  (defhydra hydra-projectile-other-window (:color teal)
    "projectile-other-window"
    ("f"  projectile-find-file-other-window        "file")
    ("g"  projectile-find-file-dwim-other-window   "file dwim")
    ("d"  projectile-find-dir-other-window         "dir")
    ("b"  projectile-switch-to-buffer-other-window "buffer")
    ("q"  nil                                      "cancel" :color blue))

  (defhydra hydra-projectile (:color teal :hint nil)
    "
       PROJECTILE: %(projectile-project-root)

       Find File            Search/Tags          Buffers                Cache
  ------------------------------------------------------------------------------------------
  _s-f_: file            _a_: ag                _i_: Ibuffer           _c_: cache clear
   _ff_: file dwim       _g_: update gtags      _b_: switch to buffer  _x_: remove known project
   _fd_: file curr dir   _o_: multi-occur     _s-k_: Kill all buffers  _X_: cleanup non-existing
    _r_: recent file                                               ^^^^_z_: cache current
    _d_: dir

  "
    ("<ESC>" nil "quit")
    ("<" hydra-project/body "back")
    ("a"   projectile-ag)
    ("b"   projectile-switch-to-buffer)
    ("c"   projectile-invalidate-cache)
    ("d"   projectile-find-dir)
    ("s-f" projectile-find-file)
    ("ff"  projectile-find-file-dwim)
    ("fd"  projectile-find-file-in-directory)
    ("g"   ggtags-update-tags)
    ("s-g" ggtags-update-tags)
    ("i"   projectile-ibuffer)
    ("K"   projectile-kill-buffers)
    ("s-k" projectile-kill-buffers)
    ("m"   projectile-multi-occur)
    ("o"   projectile-multi-occur)
    ("s-p" projectile-switch-project "switch project")
    ("p"   projectile-switch-project)
    ("s"   projectile-switch-project)
    ("r"   projectile-recentf)
    ("x"   projectile-remove-known-project)
    ("X"   projectile-cleanup-known-projects)
    ("z"   projectile-cache-current-file)
    ("`"   hydra-projectile-other-window/body "other window" :color blue)
    ("q"   nil "cancel" :color blue))

  (defhydra hydra-magit (:color teal :hint nil)
    "
        Magit: %(magit-get \"remote\" \"origin\" \"url\")

   Status/Info      Remote          Operations
  ------------------------------------------------------------------------------------------
  _s_: Status      _f_: Pull       _c_: commit
  _l_: Log all     _p_: Push
  _d_: Diff
  _t_: timeline
  "
    ("<ESC>" nil "quit")
    ("<" hydra-project/body "back")
    ("f" magit-pull)
    ("p" magit-push)
    ("c" magit-commit)
    ("d" magit-diff)
    ("l" magit-log-all)
    ("s" magit-status)
    ("t" git-timeline)
    ("q"   nil "cancel" :color blue))

  (defhydra hydra-flycheck (:pre (progn (setq hydra-lv t) (flycheck-list-errors))
                                 :post (progn (setq hydra-lv nil) (quit-windows-on "*Flycheck errors*"))
                                 :color teal
                                 :hint nil)
    "Errors"
    ("f"  flycheck-error-list-set-filter                            "Filter")
    ("j"  flycheck-next-error                                       "Next")
    ("k"  flycheck-previous-error                                   "Previous")
    ("gg" flycheck-first-error                                      "First")
    ("G"  (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
    ("<" hydra-project/body "back")
    ("q"   nil "cancel" :color blue))


  (defhydra hydra-project (:color teal :hint nil)
    "
       Project/Source management

   Projects              Version control        On-the-fly
  ------------------------------------------------------------------------------------------
  _d_: dash projects     _m_: magit             _f_: fixme listing
  _p_: projectile        _t_: travis status     _F_: flycheck

  "
    ("<ESC>" nil "quit")
    ("d"   org-dashboard-display)
    ("p"   hydra-projectile/body)
    ("f"   fic-view-listing)
    ("F"   hydra-flycheck/body)
    ("m"   hydra-magit/body)
    ("t"   show-my-travis-projects)
    ("q"   nil "cancel" :color blue))
  (global-set-key (kbd "<f4>") 'hydra-project/body)
#+end_src
** Shell/terminal
#+begin_src emacs-lisp
  ;; Function coming from here: http://www.howardism.org/Technical/Emacs/eshell-fun.html
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
  current buffer's file. The eshell is renamed to match that
  directory to make multiple eshell windows easier."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                       (file-name-directory (buffer-file-name))
                     default-directory))
           (height (/ (window-total-height) 3))
           (name   (car (last (split-string parent "/" t)))))
      (split-window-vertically (- height))
      (other-window 1)
      (eshell "new")
      (rename-buffer (concat "*eshell: " name "*"))

      (insert (concat "ls"))
      (eshell-send-input)))

  (defhydra hydra-shell (:color teal :hint nil)
    "
       Shell

  ------------------------------------------------------------------------------------------
  _p_: start (projectile)
  _h_: start (here)
  "
    ("p"      projectile-run-eshell)
    ("h"      eshell-here)
    ("<ESC>"  nil "quit" :color blue)
    ("q"      nil "cancel" :color blue))
  (global-set-key (kbd "<f6>") 'hydra-shell/body)
#+end_src
** Global keys
*** Compilation
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-c") 'compile)

  (defhydra hydra-next-error (global-map "C-x")
      "
  Compilation errors:
  _j_: next error        _h_: first error    _q_uit
  _k_: previous error    _l_: last error
  "
      ("`" next-error     nil)
      ("j" next-error     nil :bind nil)
      ("k" previous-error nil :bind nil)
      ("h" first-error    nil :bind nil)
      ("l" (condition-case err
               (while t
                 (next-error))
             (user-error nil))
       nil :bind nil)
      ("q" nil            nil :color blue))
#+end_src
*** Commenting
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-;") 'comment-region)
  (global-set-key (kbd "C-c C-:") 'uncomment-region)
#+end_src
*** Buffers
#+begin_src emacs-lisp
  (global-set-key (kbd "M-g") 'goto-line)
  (global-set-key (kbd "M-G") 'what-line)
#+end_src
*** Windows
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c =") 'compare-windows)
#+end_src
*** Files
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-r") 'counsel-recentf)
  (global-set-key (kbd "C-x C-d") 'dired)

  (global-set-key [(control c) ?1] 'find-name-dired)
  (global-set-key [(control c) ?2] 'find-grep-dired)
  (global-set-key [(control c) ?3] 'grep-find)
#+end_src
*** Multimedia
#+begin_src emacs-lisp
  (global-set-key (kbd "<XF86AudioPlay>") 'emms-pause)
  (global-set-key (kbd "<XF86AudioStop>") 'emms-stop)
  (global-set-key (kbd "<XF86AudioPrev>") 'emms-previous)
  (global-set-key (kbd "<XF86AudioNext>") 'emms-next)
#+end_src
*** Mac key remapping
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<end>") 'move-end-of-line)
  (global-set-key (kbd "<home>") 'move-beginning-of-line)
#+END_SRC
* Finalization
** Startup
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq find-file-suppress-same-file-warnings t)
#+end_src
** Scratch
#+begin_src emacs-lisp
  (use-package scratch-ext
    :ensure t
    :hook (after-init . scratch-ext-restore-last-scratch)
    :config
    ;; Org-mode + start folded buffer
    (setq initial-major-mode 'org-mode)
    (set-buffer (get-buffer-create "*scratch*"))
    (set (make-local-variable 'org-startup-folded) t))
#+end_src
