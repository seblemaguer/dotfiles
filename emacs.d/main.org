#+TITLE: Emacs configuration file
#+AUTHOR: SÃ©bastien Le Maguer
#+EMAIL: lemagues@tcd.ie
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  fr
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://seblemaguer.github.io/css/default.css" />
#+PROPERTY: header-args :tangle "~/.emacs.d/init.el"

This is my emacs configuration file. It is under version control and available, among other
configurations, at this repository: https://github.com/seblemaguer/dotfiles

* Package management
The first part of the configuration is to prepare the package management. I am using =use-package= as
the central tool to deal with configuration of the packages.

** Emacs package configuration
In this section, we are configuring the repositories and emacs internal package management. The only
specificity here is that the TLS algorithm is specific for 26.2.1.

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (when (and (= emacs-major-version 26)
             (= emacs-minor-version 2)
             (= emacs-build-number 1))
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))

  (setq package-enable-at-startup nil
        package-check-signature nil
        package-archives '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
                           ("MELPA Stable" . "https://stable.melpa.org/packages/")
                           ("MELPA"        . "https://melpa.org/packages/")
                           ("ORGMODE"      . "http://orgmode.org/elpa/"))
        package-archive-priorities  '(("ORGMODE"      . 15)
                                      ("MELPA Stable" . 10)
                                      ("GNU ELPA"     . 5)
                                      ("MELPA"        . 0))
        package-check-signature nil)

  (package-initialize)
#+END_SRC

** Load use-package
Here, we are initializing =use-package= in the classic way.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  ;; (eval-when-compile
  ;;   (setq use-package-expand-minimally byte-compile-current-file))
#+END_SRC

** Quelpa
 Quelpa is super useful for developer package management. Adding the adaptation for the use-package
 makes it configuration file proof.

 #+begin_src emacs-lisp
   (use-package quelpa-use-package
     :ensure t
     :init
     (setq quelpa-update-melpa-p nil))
 #+end_src

** Tagging
I am using tags to condition the use of packages based on the computer hostname.

#+BEGIN_SRC emacs-lisp
  (use-package use-package-tags
    :ensure quelpa
    :quelpa (use-package-tags :fetcher github :repo "seblemaguer/use-package-tags")
    :config
    (setq use-package-tags-enabled
          `(("lemagues-laptop" . ("!REQUIRES_CONNECTION"))
            ("stb067" . ("ALL"))
            ("mackenzie" . ("!MAIL" "!RSS" "!USER" "!GUI"))
            (,use-package-tags-default-host . ("CORE" "!USER")))))
#+END_SRC

** Hydra
I use hydra a lot so it is easier to add its support directly in the use-package configuration part.

#+BEGIN_SRC emacs-lisp
  (use-package use-package-hydra
    :ensure t
    :functions
    (hydra-default-pre
     hydra-keyboard-quit
     hydra--call-interactively-remap-maybe
     hydra-show-hint
     hydra-set-transient-map)

    :tags '("CORE"))
#+END_SRC

** General
I introduce general to configure the key management. It is not really used yet, but it will be more and and more.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t
    :tags '("CORE"))
#+END_SRC

** Paradox to enhance package list management
Finally, I use paradox to enhance the package listing experience.

#+begin_src emacs-lisp
  (use-package paradox
    :ensure t
    :tags '("CORE")
    :commands (paradox-list-packages)
    :config
    (setq paradox-spinner-type 'progress-bar
          paradox-execute-asynchronously t
          paradox-github-token (my:auth-source-get-passwd :host "github.com" :user "seblemaguer^paradox")))
#+end_src

** COMMENT Auto-update
I was using auto update, but I think I will remove it soon.
#+begin_src emacs-lisp
  (use-package auto-package-update
    :ensure t
    :tags '("CORE")
    :config
    (setq auto-package-update-delete-old-versions t
          auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+end_src
* Configuration helpers
I need to define some helpers to be able to facilitate the configuration. This mainly introduce
tangling and user/password management.

** Define some important variables
This section focus on defining some variables/helpers needed to have a more global configuration

#+BEGIN_SRC emacs-lisp
  ;; Define root directory and add the plugins
  (defvar default-plugin-dir (format "%s/plugins" user-emacs-directory)
    "The plugins directory")
  (add-to-list 'load-path default-plugin-dir)

  ;; Don't screw up my files with custom
  (setq custom-file (format "%s/custom.el" user-emacs-directory))
  (load custom-file 'noerror)

  ;; Silence!!!!!!
  (setq save-abbrevs 'silently
	ad-redefinition-action 'accept

	;; Garbage collection (see https://github.com/jethrokuan/.emacs.d/blob/master/config.org)
	gc-cons-threshold 50000000
	large-file-warning-threshold 100000000)
#+END_SRC

** Dealing with tangling this file
This part is copy/pasted from https://www.reddit.com/r/emacs/comments/6t37yg/org_mode_dot_emacs/

#+BEGIN_SRC emacs-lisp
  (defun tangle-main-org ()
    "Tangle ~/.emacs.d/main.org to ~/.emacs.d/init.el."
    (interactive)

    ;; byte-compile plugins
    (byte-recompile-directory (expand-file-name default-plugin-dir) 0)


    ;; Tangle to init.el
    (with-current-buffer (find-file (concat user-emacs-directory "main.org"))
      (org-babel-tangle))
    )

  (defun compile-init ()
    "byte compiles ~/.emacs.d/init.el"
    (interactive)
    (when (equal (buffer-name)
                 (concat "main.org"))
      ;; Recompile init file
      (byte-compile-disable-warning  'make-local) ;; FIXME: apparently people says this warning is simply wrong, so ignore it!
      (byte-recompile-file (format "%s/init.el" user-emacs-directory) t 0 nil)
      ))
#+END_SRC

** Identification helper
Easy use wrapper around auth-* authentification emacs utils.

#+begin_src emacs-lisp
  (cl-defun my:auth-source-get-user (&rest spec &allow-other-keys)
    "Helper to get the user given the SPEC from authsource."
    (let ((founds (apply 'auth-source-search spec)))
      (when founds
        (plist-get (nth 0 founds) :user))))

  (cl-defun my:auth-source-get-passwd (&rest spec &allow-other-keys)
    "Helper to get the password given the SPEC from authsource."
    (let ((founds (apply 'auth-source-search spec)))
      (when founds
        (funcall (plist-get (nth 0 founds) :secret)))))
#+end_src

* Daemon mode
Now that we are ready to actually configure emacs properly, let's first start the server!

#+begin_src emacs-lisp
  (server-start)
#+end_src

* Global
This section is about configuring global emacs helpers which are not specific to a dedicated
language (or filetype) but are useful for any edition use-case in emacs.

** TODO Undo
In order to have a better and more visual control of undoing, I use undo-propose for now. I used to
use undo-tree but corruption was a problem. However, having the navigation tree might be
easier. Therefore the section is still in *todo* status.

#+begin_src emacs-lisp
  (use-package undo-propose
    :ensure t
    :tags '("CORE")
    :commands (undo-propose)
    :bind ("C-x u" . undo-propose))
#+end_src

** Minor-mode activation
I use some minor modes based on some filetypes. This package is an helper which facilitates these
activations.

#+begin_src emacs-lisp
  (use-package auto-minor-mode
    :ensure t
    :tags '("CORE"))
#+end_src

** Helpers
I define here some global helpers used either in the rest of the file, either available to use at runtime

*** Editing as root
Defining a simple helper to edit file as root using tramp

#+begin_src emacs-lisp
  (defun edit-current-file-as-root ()
    "Edit the file that is associated with the current buffer as root"
    (interactive)
    (if (buffer-file-name)
        (find-file (concat "/sudo:localhost:" (buffer-file-name)))
      (message "Current buffer does not have an associated file.")))
#+end_src

** TODO Message buffer
The main idea here is to add a timestamp to the messages as it helps to understand the sequence of
problems. For now the advice is not activated as it causes some problems.

#+begin_src emacs-lisp
  (defvar debug-messages nil)

  (defun current-time-microseconds ()
    (let* ((nowtime (current-time))
           (now-ms (nth 2 nowtime)))
      (concat (format-time-string "[%Y-%m-%d %T" nowtime) (format ".%d] " now-ms))))

  (defadvice message (before who-said-that activate)
    "Find out who said that thing. and say so."
    (let ((trace nil) (n 1) (frame nil))
      (when debug-messages
          (progn
            (while (setq frame (backtrace-frame n))
              (setq n     (1+ n)
                    trace (cons (cadr frame) trace)) )

            (ad-set-arg 0 (concat (format-time-string "[%Y-%m-%d %T %Z] ") "<<%S>>:\n" (ad-get-arg 0)))
            (ad-set-args 1 (cons trace (ad-get-args 1)))))))
#+end_src

** Encoding
Define the global encoding as utf-8 english US related. Of course, it is possible de locally change
this information per buffer.

#+begin_src emacs-lisp
  (setq system-time-locale "en_US.utf8")
  (prefer-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
#+end_src

** Folding
For the folding, I am relying on outline-minor mode and more specifically outline-shine.

#+begin_src emacs-lisp
  (use-package outshine
    :ensure quelpa
    :quelpa (outshine :fetcher github :repo "alphapapa/outshine")
    :commands (outshine-cycle)
    :bind
    (:map outline-minor-mode-map
          ("<C-tab>"  . outshine-cycle)))
#+end_src

** Edition
This section is dedicated to hacks and helpers to facilitate global edition.

*** Edit simultanously multiple region
Sometimes it can be useful to edit multiple region at once. To do that, I use iedit.

#+begin_src emacs-lisp
  (use-package iedit
    :ensure t
    :tags '("CORE")
    :config
    (delete-selection-mode t))
#+end_src

*** TODO Surrounding helper
I use siege-mode to surround a string by delimiters more complicated than brackets and xml tags. For
now it is disabled so in *TODO* state.

#+begin_src emacs-lisp
  (use-package siege-mode
    :disabled t
    :ensure t
    :tags '("CORE"))
#+end_src

*** Alignment
I defined this helper to as I like to align equations based on the equal sign.

#+begin_src emacs-lisp
(defun align-to-equals (begin end)
  "Align region to equal signs"
   (interactive "r")
   (align-regexp begin end "\\(\\s-*\\)=" 1 1 ))
#+end_src

** Goto/Jumping
Jumping to a specific line is part of the day to day use case of an editor. Here, we are defining some helpers.

*** Preview
First, instead of jumping we simply can preview the jump.

#+BEGIN_SRC emacs-lisp
  (use-package goto-line-preview
    :ensure t
    :commands (goto-line-preview)
    :bind
    (("M-g" . goto-line-preview)))
#+END_SRC

*** Remember last jump
Also, I tend to jump a lot for quick modification. So remembering the jump is absolute crucial in my
workflow.

#+BEGIN_SRC emacs-lisp
  (use-package goto-last-point
    :ensure t
    :functions (goto-last-point-mode)
    :bind ("C-<" . goto-last-point)
    :config (goto-last-point-mode))
#+END_SRC

** Recent file
Opening recent files is always an easy and fast shortcut. Some files should be ignored though. That
leads to this configuration

#+begin_src emacs-lisp
  (use-package recentf
    :tags '("CORE")
    :init
    (recentf-mode 1)

    :config
    (setq recentf-max-menu-items 100)     ;; Increase limit

    ;; Emacs
    (add-to-list 'recentf-exclude (format "%s/.orhc-bibtex-cache" (getenv "HOME")))
    (add-to-list 'recentf-exclude (format "%s/configuration/emacs\\.d/\\(?!\\(main.*\\)\\)" (getenv "HOME")))
    (add-to-list 'recentf-exclude (format "%s/\\.emacs\\.d/.*" (getenv "HOME")))

    ;; Some caches
    (add-to-list 'recentf-exclude (format "%s/\\.ido\\.last" (getenv "HOME")))
    (add-to-list 'recentf-exclude (format "%s/\\.recentf" (getenv "HOME")))


    ;; elfeed
    (add-to-list 'recentf-exclude (format "%s/\\.elfeed/.*" (getenv "HOME")))
    (add-to-list 'recentf-exclude (format "%s/shared/Dropbox/emacs/elfeed/.*" (getenv "HOME")))

    ;; Org-mode organisation
    (add-to-list 'recentf-exclude (format "%s/shared/Dropbox/org/organisation/.*" (getenv "HOME")))

    ;; Org/todo/calendars
    (add-to-list 'recentf-exclude ".*todo.org")
    (add-to-list 'recentf-exclude (format "%s/Calendars/.*" (getenv "HOME")))

    ;; Maildir
    (add-to-list 'recentf-exclude (format "%s/maildir.*" (getenv "HOME"))))
#+end_src

** Backup files
This section is dedicated to deal with backups. The main logic is to exlude some specific files
(either because of they are sensitive, either because they are just results of a process). For the
other ones, I want to have an easy way to navigate in it.

*** Global backup configuration
This the global backup configuration. For that I adapted a little bit the wonderful
snapshot-timemachine package.

#+begin_src emacs-lisp
  (use-package snapshot-timemachine
    :ensure t
    :tags '("CORE")
    :init

    ;; Default Backup directory
    (defvar backup-directory "~/.emacs.d/backups/")
    (setq backup-directory-alist `((".*" . ,backup-directory)))

    (when (not (file-exists-p backup-directory))
      (make-directory backup-directory t))

    ;; Auto-save
    (defvar auto-save-directory "~/.emacs.d/auto-save/")
    (setq auto-save-file-name-transforms `((".*" ,auto-save-directory t)))

    (when (not (file-exists-p auto-save-directory))
      (make-directory auto-save-directory t))

    ;; Tramp backup
    (defvar tramp-backup-directory "~/.emacs.d/tramp-backups/")
    (setq tramp-backup-directory-alist `((".*" . ,tramp-backup-directory)))

    (when (not (file-exists-p tramp-backup-directory))
      (make-directory tramp-backup-directory t))

    (setq make-backup-files t               ; backup of a file the first time it is saved.
          backup-by-copying t               ; don't clobber symlinks
          version-control t                 ; version numbers for backup files
          delete-old-versions t             ; delete excess backup files silently
          delete-by-moving-to-trash t
          kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
          kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
          auto-save-default t               ; auto-save every buffer that visits a file
          auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
          auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
          )

    :config

    (defun snapshot-timemachine-backup-finder (file)
      "Find snapshots of FILE in rsnapshot backups."
      (let* ((file (expand-file-name file))
             (file-adapted (replace-regexp-in-string "/" "!" file))
             (backup-files(directory-files backup-directory t (format "%s.*" file-adapted))))
        (seq-map-indexed (lambda (backup-file index)
                           (make-snapshot :id index
                                          :name (format "%d" index)
                                          :file backup-file
                                          :date (nth 5 (file-attributes backup-file))))
                         backup-files)))

    (setq snapshot-timemachine-snapshot-finder #'snapshot-timemachine-backup-finder))
#+end_src

*** Sensitive mode
There are some files which are not desired to be backed up. This part goal is to setup this
"avoiding saving" spÃ©cificities.

#+begin_src emacs-lisp
  (define-minor-mode sensitive-mode
    "For sensitive files like password lists.
  It disables backup creation and auto saving.

  With no argument, this command toggles the mode.
  Non-null prefix argument turns on the mode.
  Null prefix argument turns off the mode."
    ;; The initial value.
    nil
    ;; The indicator for the mode line.
    " Sensitive"
    ;; The minor mode bindings.
    nil
    (if (symbol-value sensitive-mode)
        (progn
          ;; disable backups
          (set (make-local-variable 'backup-inhibited) t)
          ;; disable auto-save
          (if auto-save-default
              (auto-save-mode -1)))
                                          ;resort to default value of backup-inhibited
      (kill-local-variable 'backup-inhibited)
                                          ;resort to default auto save setting
      (if auto-save-default
          (auto-save-mode 1))))


  (add-to-list 'auto-minor-mode-alist '("\\.git/.*\\'" . sensitive-mode))
  (add-to-list 'auto-minor-mode-alist '("emacs\\.d/.*\\'" . sensitive-mode))
  (add-to-list 'auto-minor-mode-alist '("emacs\\.d/emms/.*\\'" . sensitive-mode))
  (add-to-list 'auto-minor-mode-alist '("Calendars/.*.org\\'" . sensitive-mode))
  (add-to-list 'auto-minor-mode-alist '("\\.gpg\\'" . sensitive-mode))
#+end_src

** Copy/Pasted
Baseline configuration for copy/pasting, nothing fancy.

#+begin_src emacs-lisp
  (setq mouse-drag-copy-region nil
        select-enable-primary nil
        select-enable-clipboard t
        select-active-regions t)
#+end_src

** Language checking
Writing a text is difficult enough, having some helpers to check and correct the language is necessary for me.

*** Spelling
Configuration of the (fly) spelling for emacs. For spelling, I am using aspell.

#+begin_src emacs-lisp
  (use-package flyspell
    :ensure t
    :tags '("CORE")
    :config

    ;; Set programms
    (setq-default ispell-program-name "aspell")
    (setq-default ispell-list-command "--list")

    ;; Some skipping
    (add-to-list 'ispell-skip-region-alist '("^#+begin_src" . "^#+end_src"))

    ;; Refresh flyspell after directory change
    (defun flyspell-buffer-after-pdict-save (&rest _)
      (flyspell-buffer))
    (advice-add 'ispell-pdict-save :after #'flyspell-buffer-after-pdict-save)

    ;; Popup
    (defun flyspell-emacs-popup-textual (event poss word)
      "A textual flyspell popup menu."
      (require 'popup)
      (let* ((corrects (if flyspell-sort-corrections
                           (sort (car (cdr (cdr poss))) 'string<)
                         (car (cdr (cdr poss)))))
             (cor-menu (if (consp corrects)
                           (mapcar (lambda (correct)
                                     (list correct correct))
                                   corrects)
                         '()))
             (affix (car (cdr (cdr (cdr poss)))))
             show-affix-info
             (base-menu  (let ((save (if (and (consp affix) show-affix-info)
                                         (list
                                          (list (concat "Save affix: " (car affix))
                                                'save)
                                          '("Accept (session)" session)
                                          '("Accept (buffer)" buffer))
                                       '(("Save word" save)
                                         ("Accept (session)" session)
                                         ("Accept (buffer)" buffer)))))
                           (if (consp cor-menu)
                               (append cor-menu (cons "" save))
                             save)))
             (menu (mapcar
                    (lambda (arg) (if (consp arg) (car arg) arg))
                    base-menu)))
        (cadr (assoc (popup-menu* menu :scroll-bar t) base-menu))))


    (defun flyspell-emacs-popup-choose (org-fun event poss word)
      (if (window-system)
          (funcall org-fun event poss word)
        (flyspell-emacs-popup-textual event poss word)))

    (eval-after-load "flyspell"
      '(progn
         (advice-add 'flyspell-emacs-popup :around #'flyspell-emacs-popup-choose)))
    )
#+end_src

*** English checking
lang-tool is actually supported by emacs through a dedicated mode which allows to have syntax and
typography checking.

#+BEGIN_SRC emacs-lisp
  (use-package langtool
    :ensure quelpa
    :quelpa (langtool :fetcher github :repo "mhayashi1120/Emacs-langtool")
    :tags '("CORE")
    :init
    (setq langtool-language-tool-server-jar "~/work/tools/src/languagetool/languagetool/languagetool-server.jar"))
#+END_SRC

** Fixme
To deal with the fixme, I relie on two part: fic-mode for the highlighting and occur for the
listing.

#+begin_src emacs-lisp
  (use-package fic-mode
    :ensure t
    :tags '("CORE")
    :hook
    (prog-mode . fic-mode)
    :init

    (defun fic-view-listing ()
      "Use occur to list related FIXME keywords"
      (interactive)
      (occur "\\<\\(FIXME\\|WRITEME\\|WRITEME!\\|TODO\\|BUG\\):?")))
#+end_src

** Minibuffer
Minibuffer configuration part. Nothing really outstanding, just the classical stuff.

#+begin_src emacs-lisp
  (use-package minibuffer
    :tags '("CORE")
    ;; :hook
    ;; (eval-expression-minibuffer-setup .  #'eldoc-mode)
    :config
    (setq read-file-name-completion-ignore-case t
          completion-ignore-case t
          resize-mini-windows t)

    (file-name-shadow-mode 1))
#+end_src

** Buffers
Some buffer specificities configuration like how to deal with trailing whitespaces or the
fill-column for example.

#+begin_src emacs-lisp
  ;; Open Large file
  (use-package vlf
    :ensure t
    :tags '("CORE")
    :config
    (require 'vlf-setup))

  ;; Delete trailing-whitespace
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Unify the buffer name style
  (eval-after-load "uniquify"
    '(progn
       (setq uniquify-buffer-name-style 'forward)))

  ;; Redefine fill-column as my screen is not 80 chars :D
  (setq-default fill-column 100)
#+end_src

*** format-all
We can globally reformat the buffer relying on external tool. =format-all= is here for this.

#+begin_src emacs-lisp
  (use-package format-all
    :ensure t
    :commands (format-all-buffer format-all-mode))
#+end_src

*** Specific mode cleaning helper
I define a facilities for some specific buffers. For now, it disables only the smartparens but it
could be modified to be more general.

#+begin_src emacs-lisp
  (defun disable-global-facilities ()
    "Function to disable some utilities globally activated for current buffer"
    (interactive)
    (smartparens-mode 0)
    ;; (nlinum-mode 0)
    )
#+end_src

** Searching
Double-saber is really helpful to reduce the result of a search after the search itself.

#+BEGIN_SRC emacs-lisp
  (use-package double-saber
    :ensure t
    :config
    (with-eval-after-load "ripgrep"
      (add-hook 'ripgrep-search-mode-hook
                (lambda ()
                  (double-saber-mode)
                  (setq-local double-saber-start-line 5)
                  (setq-local double-saber-end-text "Ripgrep finished"))))

    (with-eval-after-load "grep"
      (add-hook 'grep-mode-hook
                (lambda ()
                  (double-saber-mode)
                  (setq-local double-saber-start-line 5)
                  (setq-local double-saber-end-text "Grep finished"))))

    (with-eval-after-load "ggtags"
      (add-hook 'ggtags-global-mode-hook
                (lambda ()
                  (double-saber-mode)
                  (setq-local double-saber-start-line 5)
                  (setq-local double-saber-end-text "Global found")))))

  (with-eval-after-load "ivy"
    (add-hook 'ivy-occur-grep-mode-hook
              (lambda ()
                (double-saber-mode)
                (setq-local double-saber-start-line 5))))
#+END_SRC

** Process management
I want to have some services and processes managed directly in emacs. This services/processes are
closely related to my emacs use and there have to be shutdown when emacs is stopping.

*** Services
The main use case (actually the only for now) is the imap notification system. To do so I use the
couple prodigy (to start the process in emacs) and imapnotify to actually activate the push
service. Internally, imapnotify is going to call emacsclient to notify the user about a new mail.

#+begin_src emacs-lisp
  (use-package prodigy
    :ensure quelpa
    :quelpa (prodigy :fetcher github :repo "seblemaguer/prodigy.el" :branch "auto-start")
    :tags '("REQUIRES_CONNECTION" "MAIL")
    :config

    (prodigy-define-service
      :name "ADAPT imap notify"
      :command "imapnotify"
      :args '("-c" "~/configuration/imapnotify/adaptgmail.js")
      :tags '(work mail)
      :stop-signal 'sigterm
      :auto-start t
      :kill-process-buffer-on-stop t)

    (prodigy-define-service
      :name "TCD imap notify"
      :command "imapnotify"
      :args '("-c" "~/configuration/imapnotify/tcd.js")
      :tags '(work mail)
      :stop-signal 'sigterm
      :auto-start t
      :kill-process-buffer-on-stop t)

    (prodigy-define-service
      :name "Saarland imap notify"
      :command "imapnotify"
      :args '("-c" "~/configuration/imapnotify/saarland.js")
      :tags '(work mail)
      :stop-signal 'sigterm
      :auto-start t
      :kill-process-buffer-on-stop t)

    (prodigy-define-service
      :name "hikoseb imap notify"
      :command "imapnotify"
      :args '("-c" "~/configuration/imapnotify/hikoseb.js")
      :tags '(perso mail)
      :stop-signal 'sigterm
      :auto-start t
      :kill-process-buffer-on-stop t)

    (prodigy-define-service
      :name "sebgmail imap notify"
      :command "imapnotify"
      :args '("-c" "~/configuration/imapnotify/sebgmail.js")
      :tags '(perso mail)
      :stop-signal 'sigterm
      :auto-start t
      :kill-process-buffer-on-stop t)

    (prodigy-enable-auto-start)
    )
#+end_src

*** System daemons
With this package I can also manage my system services (tested on archlinux).

#+begin_src emacs-lisp
  (use-package daemons
    :ensure t
    :tags '("CORE"))
#+end_src

*** Background process configuration
Starting process in background is really nice to avoid being spammed. So let's make it available

#+begin_src emacs-lisp
  (use-package bpr
    :ensure t
    :tags '("PROCESS")
    :config

    (defun encode-cd ()
      "Encode CD using abcde."
      (interactive)
      (bpr-spawn "abcde -1"))

    (defun my-bpr-on-start (process)
      "Routine to allow colors in comint buffer."
      (set-process-filter process 'comint-output-filter))

    (setq bpr-scroll-direction 1
          bpr-show-progress nil
          bpr-colorize-output t
          bpr-close-after-success t
          bpr-use-projectile t
          bpr-process-mode #'comint-mode
          bpr-window-creator #'split-window-vertically
          bpr-on-start 'my-bpr-on-start))
#+end_src

*** Paging support for comint
In order to monitor each process started via comint, I use bifocal which splits the window accordingly.

#+begin_src emacs-lisp
  (use-package bifocal
    :ensure t
    :tags '("CORE")
    :disabled t
    :hook
    (inferior-python-mode . #'bifocal-mode)

    :config
    (bifocal-global-mode 1))
#+end_src

** Environment control helpers
I prefer to control some hardware using emacs directly. For now the keyboard, the screen and the sound.

*** desktop environment
Thanks to desktop environement, I can control the keyboard and the screen brightness.

#+begin_src emacs-lisp
  (use-package desktop-environment
    :ensure t
    :tags '("CORE")
    :config
    (setq desktop-environment-brightness-normal-increment "-inc 10"
          desktop-environment-brightness-normal-decrement "-dec 10"
          desktop-environment-brightness-small-increment "-inc 5"
          desktop-environment-brightness-small-decrement "-dec 5"
          desktop-environment-brightness-get-command "xbacklight -get"
          desktop-environment-brightness-set-command "xbacklight")
    (desktop-environment-mode))
#+end_src

*** pulseaudio
Thanks to pulseaudio-control, I can control my soundcard.

#+begin_src emacs-lisp
  (use-package pulseaudio-control
    :ensure t
    :tags '("CORE")
    :config
    (setq pulseaudio-control--current-sink "@DEFAULT_SINK@"))
#+end_src

** Language interaction (LSP)
LSP is a set of helper to interact with external "ide" tools and provide their functionalities into
emacs. It is the baseline of my configuration for java, kotlin and also python. I suspect I am going
to extend it even further in the feature.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :tags '("IDE")
    :pin MELPA
    :hook
    (kotlin-mode . lsp-deferred)
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-before-save-edits t
          lsp-inhibit-message t
          lsp-eldoc-render-all nil
          lsp-highlight-symbol-at-point nil
          lsp-prefer-flymake nil))

  (use-package company-lsp
    :ensure t
    :tags '("IDE")
    :after company lsp-mode
    :commands company-lsp
    :init
    (push 'company-lsp company-backends)
    :config
    (setq company-lsp-enable-snippet t
          company-lsp-cache-candidates 'auto))

  (use-package lsp-ui
    :ensure t
    :tags '("IDE")
    :after lsp-mode
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-sideline-enable t
          lsp-ui-sideline-show-symbol t
          lsp-ui-sideline-show-hover t
          lsp-ui-flycheck-enable t
          lsp-ui-sideline-show-code-actions t
          lsp-ui-sideline-update-mode 'point))

  (use-package dap-mode
    :ensure t
    :tags '("IDE")
    :commands dap-debug
    :after lsp-mode
    :init
    (dap-mode t)
    (dap-ui-mode t))
#+end_src

* Completion
This part focuses on completion configuration. Language specific configurations are not done here
but in the dedicate language configuration part. This section is just for global configuration.

** Ivy/swipper/counsel
I do prefer vertical completion, which is why I use extensively Ivy and extensions.

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :tags '("COMPLETION")
    :config
    (ivy-mode)
    (setq ivy-display-style 'fancy
          ivy-use-virtual-buffers t
          enable-recursive-minibuffers t
          ivy-use-selectable-prompt t))

  (use-package counsel
    :ensure t
    :tags '("COMPLETION")
    :bind
    (("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)))

  (use-package ivy-rich
    :ensure t
    :config
    (ivy-rich-mode 1)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+end_src

** Company
In order to have inline completion, really important for coding, I use company. However I adapted
some facing attributes. Each language is also adding its backend when needed. Therefore, only global
configuration here.

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :tags '("COMPLETION")
    :hook
    (emacs-lisp-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-elisp))))
    :config

    ;; Global
    (setq company-idle-delay 1
          company-minimum-prefix-length 1
          company-show-numbers t
          company-tooltip-limit 20)

    ;; Facing
    (unless (face-attribute 'company-tooltip :background)
      (set-face-attribute 'company-tooltip nil :background "black" :foreground "gray40")
      (set-face-attribute 'company-tooltip-selection nil :inherit 'company-tooltip :background "gray15")
      (set-face-attribute 'company-preview nil :background "black")
      (set-face-attribute 'company-preview-common nil :inherit 'company-preview :foreground "gray40")
      (set-face-attribute 'company-scrollbar-bg nil :inherit 'company-tooltip :background "gray20")
      (set-face-attribute 'company-scrollbar-fg nil :background "gray40"))

    ;; Default backends
    (setq company-backends '(company-capf company-files))

    ;; Activating globally
    (global-company-mode t))

  (use-package company-quickhelp
    :ensure t
    :after company
    :tags '("COMPLETION")
    :config
    (company-quickhelp-mode 1))
#+end_src

** Helm
I use Helm for some specific cases which requires an important visibility space completion.

#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :tags '("COMPLETION")
    :functions helm-show-completion-default-display-function
    :config
    (setq helm-scroll-amount 4 ; scroll 4 lines other window using M-<next>/M-<prior>
          helm-quick-update t ; do not display invisible candidates
          helm-idle-delay 0.01 ; be idle for this many seconds, before updating in delayed sources.
          helm-input-idle-delay 0.01 ; be idle for this many seconds, before updating candidate buffer
          helm-show-completion-display-function #'helm-show-completion-default-display-function
          helm-split-window-default-side 'below ;; open helm buffer in another window
          helm-split-window-inside-p t ;; open helm buffer inside current window, not occupy whole other window
          helm-candidate-number-limit 200 ; limit the number of displayed canidates
          helm-move-to-line-cycle-in-source nil ; move to end or beginning of source when reaching top or bottom of source.
          )
    )
#+end_src

** Templating
I use templates for 2 use cases: the buffer edition and the file specific templates. Both are relying on *yasnippet*.

*** Edition templates
The default configuration of yasnippet consists of activating it and plugging it with company.
Ivy-yasnippet is used for snippet discovery.

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :tags '("COMPLETION")
    :config

    ;; Adding yasnippet support to company
    (eval-after-load 'company
      '(lambda ()
         (add-to-list 'company-backends 'company-yasnippet)))

    ;; Add third parties snippets
    (defvar third-parties-snippet-dir (format "%s/third_parties/snippets" user-emacs-directory)
      "Directory containing my own snippets")

    (defun third-parties-snippets-initialize ()
      (add-to-list 'yas-snippet-dirs 'third-parties-snippet-dir t)
      (yas-load-directory third-parties-snippet-dir t))

    (eval-after-load 'yasnippet '(third-parties-snippets-initialize))

    ;; Activate global
    (yas-global-mode))

  ;; Load official snippets
  (use-package yasnippet-snippets
    :ensure t
    :tags '("COMPLETION"))

  ;; Connect with ivy to have a list on demand
  (use-package ivy-yasnippet
    :ensure t
    :tags '("COMPLETION"))
#+end_src

*** Filetype templates
This part is using yatemplate (an over-layer of yasnippet) coupled with auto-insert to have a set of
file type dedicated templates. The templates are available in =third_parties/templates= directory.

#+begin_src emacs-lisp
  (use-package yatemplate
    :ensure t
    :tags '("COMPLETION")
    :after yasnippet
    :config

    ;; Define template directory
    (setq yatemplate-dir (concat user-emacs-directory "/third_parties/templates"))

    ;; Coupling with auto-insert
    (setq auto-insert-alist nil)
    (yatemplate-fill-alist)
    ;; (add-hook 'find-file-hook 'auto-insert)
    )
#+end_src

** Prescient
Prescient helps to sort candidates by last used first and then sorting by length.

#+begin_src emacs-lisp
  (use-package prescient
    :ensure t
    :tags '("COMPLETION")
    :config (prescient-persist-mode))

  (use-package ivy-prescient
    :ensure t
    :tags '("COMPLETION")
    :config (ivy-prescient-mode))

  (use-package company-prescient
    :ensure t
    :tags '("COMPLETION")
    :config (company-prescient-mode))
#+end_src

* Compilation
I develop with emacs, so compiling is actually a big part of my life. Therefore, I modified baseline
compilation mechanisms as well as fly checking.

** Baseline compilation
I just modify a little bit the default compilation to be a little more "user friendly".

#+begin_src emacs-lisp
  (use-package compile
    :defines compilation-scroll-output
    :defer t
    :tags '("COMPILATION")
    :init
    (setq compilation-scroll-output t)
    :hook
    (compilation-filter . pd/colourise-compilation-buffer)

    :config
    (require 'ansi-color)
    (defun pd/colourise-compilation-buffer ()
      (when (eq major-mode 'compilation-mode)
        (ansi-color-apply-on-region compilation-filter-start (point-max)))))
#+end_src

** Flychecking
For the fly checking, I use flycheck instead of flymake. So I adapted it for my needs by also adding proselint support.

#+begin_src emacs-lisp
  ;; Disable checking doc
  (use-package flycheck
    :ensure t
    :tags '("CORE")
    :commands (flycheck-error-list-set-filter flycheck-next-error flycheck-previous-error flycheck-first-error)
    :hydra
    (hydra-flycheck (:pre (progn (setq hydra-hint-display-type t) (flycheck-list-errors))
                     :post (progn (setq hydra-hint-display-type nil) (quit-windows-on "*Flycheck errors*"))
                     :color teal :hint nil)
                    "Errors"
                    ("f"  flycheck-error-list-set-filter                            "Filter")
                    ("j"  flycheck-next-error                                       "Next")
                    ("k"  flycheck-previous-error                                   "Previous")
                    ("gg" flycheck-first-error                                      "First")
                    ("G"  (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
                    ("<" hydra-project/body "back")
                    ("q"   nil "cancel" :color blue))

    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))

    (flycheck-define-checker proselint
      "A linter for prose."
      :command ("proselint" source-inplace)
      :error-patterns
      ((warning line-start (file-name) ":" line ":" column ": "
                (id (one-or-more (not (any " "))))
                (message) line-end))
      :modes (text-mode markdown-mode gfm-mode org-mode))
    )
#+end_src

** Gradle global support
I use my fork for gradle compilation. The mode still needs to be really improved but it is really
helpful when I develop for MaryTTS.

#+begin_src emacs-lisp
  (use-package gradle-mode
    :ensure quelpa
    :quelpa (gradle-mode :repo "seblemaguer/emacs-gradle-mode" :fetcher github)
    :tags '("COMPILATION")
    :config
    (setq gradle-use-gradlew t)
    (gradle-mode))
#+end_src

* Org
** Global
#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :tags '("ORG")
    :hook
    (org-mode . flyspell-mode)

    :config

    ;; Global
    (setq org-startup-indented t
          org-startup-folded nil
          org-enforce-todo-dependencies t
          org-cycle-separator-lines 2
          org-blank-before-new-entry '((heading) (plain-list-item . auto))
          org-insert-heading-respect-content nil
          org-reverse-note-order nil
          org-show-following-heading t
          org-show-hierarchy-above t
          org-show-siblings '((default))
          org-id-method 'uuidgen
          org-deadline-warning-days 30
          org-table-export-default-format "orgtbl-to-csv"
          org-src-window-setup 'other-window
          org-clone-delete-id t
          org-cycle-include-plain-lists t
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-hide-emphasis-markers t
          org-global-properties '(("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                  ("STYLE_ALL" . "habit"))

          ;; Todo part
          org-todo-keywords '(;; Baseline sequence
                              (sequence "TODO(t)" "DELEGATED(e)"  "MEETING(M)" "|" "WAITING(w)" "DONE(d)" "CANCELLED(c@/!)" "POSTPONED(o@/!)")

                              ;; Specific "to complete"
                              (sequence "REVIEW(r)" "RELEASE(R)" "MAIL(m)" "|")

                              ;; Note information
                              (sequence "|" "NOTE(N)" "EVENT(E)"))

          org-todo-state-tags-triggers '(("CANCELLED" ("CANCELLED" . t))
                                         ("WAITING"   ("WAITING"   . t))
                                         ("POSTPONED" ("POSTPONED" . t)))

          ;; Priority definition
          org-highest-priority ?A
          org-lowest-priority ?E
          org-default-priority ?C

          ;; Archiving
          org-archive-mark-done t
          org-log-done 'time
          org-archive-location "%s_archive::* Archived Tasks"

          ;; Refiling
          org-refile-targets '((nil . (:maxlevel . 6))
                               (org-agenda-files . (:maxlevel . 6)))
          org-completion-use-ido nil
          org-refile-use-outline-path 'file
          org-outline-path-complete-in-steps nil
          org-refile-allow-creating-parent-nodes 'confirm))



    ;; FIXME: to sort !
    (use-package org-checklist)
    (use-package ob-exp)
    (use-package ox-bibtex)
    (use-package org-protocol)
#+end_src
** Todo management - some helpers
Extracted from https://www.emacswiki.org/emacs/org-extension.el
#+begin_src emacs-lisp
  (defun org-archive-all-done-item ()
    "Archive all item that have with prefix DONE."
    (interactive)
    (save-excursion
      (outline-show-all)
      (goto-char (point-min))
      (if (search-forward-regexp "^[\\*]+ \\(DONE\\|CANCELLED\\)" nil t)
          (progn
            (goto-char (point-min))
            (while (search-forward-regexp "^[\\*]+ \\(DONE\\|CANCELLED\\)" nil t)
              (org-advertized-archive-subtree))
            (message "Archive finished"))
        (message "No need to archive"))))


  (defun org-clean-done-item ()
    "Delete all item that have with prefix DONE."
    (interactive)
    (save-excursion
      (outline-show-all)
      (goto-char (point-min))
      (if (search-forward-regexp "^[\\*]+ \\(DONE\\|CANCELLED\\)" nil t)
          (progn
            (goto-char (point-min))
            (while (search-forward-regexp "^[\\*]+ \\(DONE\\|CANCELLED\\)" nil t)
              (org-cut-subtree))
            (message "Cleaning DONE tasks finished"))
        (message "No need to clean"))))
#+end_src
** Calendar / Agenda
*** Global
#+begin_src emacs-lisp
  (use-package org-agenda
    :tags '("ORG")
    :commands (org-agenda)
    :init
    (defun color-org-header (tag backcolor)
      "Highlight the line in org-agenda in the given BACKCOLOR if TAG is present on the line."
      (interactive)
      (goto-char (point-min))
      (while (re-search-forward tag nil t)
        (add-text-properties (line-beginning-position) (+ (line-end-position) 1)
                             `(face (:background, backcolor)))))

    :hook
    (org-agenda-finalize . (lambda ()
                             (save-excursion
                               (color-org-header "CalendarMe:" "RosyBrown1")
                               (color-org-header "CalendarAdapt:" "PaleGreen1"))))

    :hydra
    (hydra-org-agenda-view (:color blue :hint none)
                           "
          _d_: ?d? day        _g_: time grid=?g? _a_: arch-trees
          _w_: ?w? week       _[_: inactive      _A_: arch-files
          _t_: ?t? fortnight  _f_: follow=?f?    _r_: report=?r?
          _m_: ?m? month      _e_: entry =?e?    _D_: diary=?D?
          _y_: ?y? year       _q_: quit          _L__l__c_: ?l?
             "

                           ("SPC" org-agenda-reset-view)
                           ("d" org-agenda-day-view
                            (if (eq 'day (org-agenda-cts))
                                "[x]" "[ ]"))
                           ("w" org-agenda-week-view
                            (if (eq 'week (org-agenda-cts))
                                "[x]" "[ ]"))
                           ("t" org-agenda-fortnight-view
                            (if (eq 'fortnight (org-agenda-cts))
                                "[x]" "[ ]"))
                           ("m" org-agenda-month-view
                            (if (eq 'month (org-agenda-cts)) "[x]" "[ ]"))
                           ("y" org-agenda-year-view
                            (if (eq 'year (org-agenda-cts)) "[x]" "[ ]"))
                           ("l" org-agenda-log-mode
                            (format "% -3S" org-agenda-show-log))
                           ("L" (org-agenda-log-mode '(4)))
                           ("c" (org-agenda-log-mode 'clockcheck))
                           ("f" org-agenda-follow-mode
                            (format "% -3S" org-agenda-follow-mode))
                           ("a" org-agenda-archives-mode)
                           ("A" (org-agenda-archives-mode 'files))
                           ("r" org-agenda-clockreport-mode
                            (format "% -3S" org-agenda-clockreport-mode))
                           ("e" org-agenda-entry-text-mode
                            (format "% -3S" org-agenda-entry-text-mode))
                           ("g" org-agenda-toggle-time-grid
                            (format "% -3S" org-agenda-use-time-grid))
                           ("D" org-agenda-toggle-diary
                            (format "% -3S" org-agenda-include-diary))
                           ("!" org-agenda-toggle-deadlines)
                           ("["
                            (let ((org-agenda-include-inactive-timestamps t))
                              (org-agenda-check-type t 'timeline 'agenda)
                              (org-agenda-redo)))
                           ("q" (message "Abort") :exit t))

    :bind
    (([f12] . org-agenda)

     :map org-agenda-mode-map
     ("v"  . hydra-org-agenda-view/body))

    :config

    ;; Agenda files
    (setq org-agenda-files '())
    (when (file-exists-p "~/shared/Dropbox/org/todo/todo.org")
      (add-to-list 'org-agenda-files "~/shared/Dropbox/org/todo/todo.org"))

    ;; (when (file-exists-p "~/shared/Dropbox/org/organisation/bookmarks.org")
    ;;   (add-to-list 'org-agenda-files "~/shared/Dropbox/org/organisation/bookmarks.org"))

    (when (file-exists-p "~/Calendars")
      (setq org-agenda-files (append org-agenda-files (directory-files "~/Calendars/" t "^.*\\.org$"))))

    ;; Deadline management
    (setq org-agenda-include-diary nil
          org-deadline-warning-days 7
          org-timeline-show-empty-dates t
          org-agenda-span 'day
          org-agenda-prefix-format '((agenda . " %i %-15:c%?-15t% s")
                                     (todo . " %i %-15:c")
                                     (tags . " %i %-15:c")
                                     (search . " %i %-15:c"))

          org-agenda-category-icon-alist `(
                                           ;; Tools / utils
                                           ("[Ee]macs"
                                            ,(format "%s/third_parties/icons/emacs24.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("[Oo]rg"
                                            ,(format "%s/third_parties/icons/org.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("^[Hh][Tt][Ss]$"
                                            ,(format "%s/third_parties/icons/hts.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("^[Mm]ary[tT]\\{2\\}[sS]$"
                                            ,(format "%s/third_parties/icons/marytts.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("^SFB$"
                                            ,(format "%s/third_parties/icons/sfb.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("[Ss]ystem"
                                            ,(format "%s/third_parties/icons/debian.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("[Tt]ools?"
                                            ,(format "%s/third_parties/icons/wrench.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("[Ex]pe\\(riment\\)s?"
                                            ,(format "%s/third_parties/icons/expes.png" user-emacs-directory)
                                            nil nil :ascent center)


                                           ;; Admin / meeting
                                           ("[Aa]dmin"
                                            ,(format "%s/third_parties/icons/admin.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("[Mm]eeting"
                                            ,(format "%s/third_parties/icons/meeting.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("[Aa]ppointments?"
                                            ,(format "%s/third_parties/icons/appointment.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("[Vv]isitors"
                                            ,(format "%s/third_parties/icons/visitors.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("synsig"
                                            ,(format "%s/third_parties/icons/isca.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("\\([Tt]rip\\|[Dd]eplacement\\)"
                                            ,(format "%s/third_parties/icons/trip.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("Train"
                                            ,(format "%s/third_parties/icons/train.png" user-emacs-directory)
                                            nil nil :ascent center)


                                           ;; Deadlines / dates
                                           ("\\([Pp]resentations?\\)"
                                            ,(format "%s/third_parties/icons/meeting.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("\\([Pp]apers?\\|[Bb]lio\\|[Aa]rticles?\\|[Rr]eading\\|[Ww]riting\\)"
                                            ,(format "%s/third_parties/icons/book.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("[Mm]ails?"
                                            ,(format "%s/third_parties/icons/gnus.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("[Rr]eview?"
                                            ,(format "%s/third_parties/icons/review.png" user-emacs-directory)
                                            nil nil :ascent center)


                                           ;; Personnal dates
                                           ("Medical"
                                            ,(format "%s/third_parties/icons/medical.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("\\(Party\\|Celeb\\)"
                                            ,(format "%s/third_parties/icons/party.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("Anniv"
                                            ,(format "%s/third_parties/icons/anniversary.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("\\([Hh]olidays\\|[Vv]acations?\\)"
                                            ,(format "%s/third_parties/icons/holidays.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("Concert"
                                            ,(format "%s/third_parties/icons/music.png" user-emacs-directory)
                                            nil nil :ascent center)


                                           ;; Personnal diverse
                                           ("CD"
                                            ,(format "%s/third_parties/icons/cd.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("Book"
                                            ,(format "%s/third_parties/icons/book.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           ("[Pp]rojects?"
                                            ,(format "%s/third_parties/icons/project.png" user-emacs-directory)
                                            nil nil :ascent center)

                                           (".*" '(space . (:width (16))))))

    (defun org-agenda-cts ()
      (let ((args (get-text-property
                   (min (1- (point-max)) (point))
                   'org-last-args)))
        (nth 2 args)))
    )
#+end_src
*** Super agenda
#+begin_src emacs-lisp
  (use-package org-super-agenda
    :ensure t
    :tags '("ORG")
    :config

    ;; Define a dedicated time-gid
    (org-super-agenda--defgroup personal-time-grid
      "Group items that appear on a time grid.
    This matches the `dotime' text-property, which, if NOT set to
    `time' (I know, this gets confusing), means it WILL appear in the
    agenda time-grid. "
      :section-name "Timed items"  ; Note: this does not mean the item has a "SCHEDULED:" line
      :test (and
             ;; Exclude Release which are not tagged!
             (or (not (string= (org-super-agenda--get-category item) "Release"))
                 (org-find-text-property-in-string 'todo-state item))
             (or (--when-let (org-find-text-property-in-string 'time item)
                   ;; This property is a string; if empty, it doesn't match
                   (not (string-empty-p it)))
                 ;; This property is nil if it doesn't match
                 (org-find-text-property-in-string 'time-of-day item)
                 (--when-let (org-find-text-property-in-string 'dotime item)
                   ;; For this to match, the 'dotime property must be set, and
                   ;; it must not be equal to 'time.  If it is not set, or if
                   ;; it is set and is equal to 'time, the item is not part of
                   ;; the time-grid.  Yes, this is confusing.  :)
                   (not (eql it 'time))))))

    ;; Create groups
    (setq org-super-agenda-groups
          '((:name "Today"  ; Optionally specify section name
                   :personal-time-grid t  ; Items that appear on the time grid
                   :scheduled today)

            ;; Important thing
            (:name "Important"
                   :and (:priority "A" :date t)
                   :order 1)

            ;; Deadlines
            (:name "Overdue"
                   :deadline past
                   :order 2)
            (:name "Due Today"
                   :deadline today
                   :order 2)
            (:name "Due Soon"
                   :deadline future
                   :order 3)

            ;; Schedule
            (:name "Scheduled, past but opened"
                   :and (:scheduled past :not (:todo "WAITING") :not (:todo "RELEASE"))
                   :order 4)
            (:name "Scheduled in the next couple of days"
                   :and (:scheduled future :not (:todo "WAITING") :not (:todo "RELEASE"))
                   :order 5)

            ;; Some standby thingy
            (:name "In process"
                   :todo "WAITING"
                   :order 7)

            ;; CD part
            (:name "Interesting releases"
                   :and (:todo "RELEASE" :date t)
                   :order 9)

            (:name "Releases"
                   :category "Release"
                   :scheduled today
                   :order 10)
            ))


    ;; Activate mode
    (org-super-agenda-mode)
    )
#+end_src
** Capturing
*** Global
#+begin_src emacs-lisp
  (use-package org-capture
    :tags '("ORG")
    :config

    ;; Capture
    (setq org-capture-templates
          `(("b" "Adding book" entry
             (file+headline "~/shared/Dropbox/org/todo/todo.org" "To read")
             (file ,(format "%s/third_parties/org-capture-templates/book.org" user-emacs-directory)))

            ("c" "CD" entry
             (file+headline "~/shared/Dropbox/org/todo/todo.org" "CD")
             (file ,(format "%s/third_parties/org-capture-templates/cd.org" user-emacs-directory)))

            ("C" "Concert" entry
             (file+headline "~/shared/Dropbox/org/todo/todo.org" "Concert")
             (file ,(format "%s/third_parties/org-capture-templates/concert.org" user-emacs-directory)))

            ("f" "Reference" entry
             (file+headline "~/shared/Dropbox/org/todo/todo.org" "Reference task")
             (file ,(format "%s/third_parties/org-capture-templates/reference.org" user-emacs-directory)))

            ("L" "Bookmark" entry
             (file+olp "~/shared/Dropbox/org/todo/todo.org" "To review" "Bookmarks")
             (file ,(format "%s/third_parties/org-capture-templates/bookmark.org" user-emacs-directory)))

            ("m" "mail" entry
             (file+headline "~/shared/Dropbox/org/todo/todo.org" "Mailing")
             (file ,(format "%s/third_parties/org-capture-templates/mail.org" user-emacs-directory)))

            ("M" "Meeting" entry
             (file+headline "~/shared/Dropbox/org/todo/todo.org" "To sort")
             (file ,(format "%s/third_parties/org-capture-templates/meeting.org" user-emacs-directory)))

            ("P" "Personnal calendar" entry
             (file "~/Calendars/CalendarMe.org")
             (file ,(format "%s/third_parties/org-capture-templates/calendar.org" user-emacs-directory)))

            ("r" "RSS" entry
             (file+olp "~/shared/Dropbox/org/todo/todo.org" "To review" "RSS")
             (file ,(format "%s/third_parties/org-capture-templates/rss.org" user-emacs-directory)))

            ("t" "ToDo Entry" entry
             (file+headline "~/shared/Dropbox/org/todo/todo.org" "To sort")
             (file ,(format "%s/third_parties/org-capture-templates/default.org" user-emacs-directory))
             :empty-lines-before 1)))
    )
#+end_src
*** Cooking
#+begin_src emacs-lisp
  (use-package org-chef
    :ensure t
    :tags '("ORG")
    :config
    (add-to-list 'org-capture-templates
                 '("c" "Cookbook" entry (file "~/shared/Dropbox/recipes/cookbook.org")
                   "%(org-chef-get-recipe-from-url)"
                   :empty-lines 1)))
#+end_src
** Clocking
#+begin_src emacs-lisp
  (use-package org-mru-clock
      :ensure t
      :tags '("ORG")
      :bind* (("C-c C-x i" . org-mru-clock-in)
              ("C-c C-x C-j" . org-mru-clock-select-recent-task))
      :init
      (setq org-mru-clock-how-many 100
            org-mru-clock-keep-formatting t
            org-mru-clock-completing-read #'ivy-completing-read
            org-clock-persist t)

      :config
      (org-clock-persistence-insinuate))
#+end_src
*** Webpage overview
#+begin_src emacs-lisp
  (use-package org-analyzer
    :ensure t
    :custom (org-analyzer-org-directory  "~/shared/Dropbox/org/todo")
    :commands (org-analyzer-start))
#+end_src

** Editing
*** Global
#+begin_src emacs-lisp
  (setq org-list-allow-alphabetical t
        org-highlight-latex-and-related '(latex)
        org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar"
        org-babel-results-keyword "results" ;; Display images directly in the buffer
        org-confirm-babel-evaluate nil
        org-startup-with-inline-images t)

  ;; Add languages
  (use-package jupyter
    :ensure t
    :tags '("ORG" "USER")
    :defer t
    :init
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((jupyter . t))))

  (org-babel-do-load-languages 'org-babel-load-languages
                               '((emacs-lisp . t)
                                 (dot . t)
                                 (ditaa . t)
                                 (R . t)
                                 (python . t)
                                 (ruby . t)
                                 (gnuplot . t)
                                 (clojure . t)
                                 (shell . t)
                                 (ledger . t)
                                 (org . t)
                                 (plantuml . t)
                                 (latex . t)))

  ; Define specific modes for specific tools
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+end_src
*** Yanking
#+begin_src emacs-lisp
  (use-package org-rich-yank
    :ensure t
    :tags '("ORG")
    :bind (:map org-mode-map ("C-M-y" . org-rich-yank)))
#+end_src

*** Id generations
#+begin_src emacs-lisp
  (use-package org-id+
    :ensure quelpa
    :quelpa (org-id+ :repo "seblemaguer/org-id-plus" :fetcher github)
    :tags '("ORG"))
#+end_src
** Exporting
*** HTML
#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t
    :tags '("ORG"))

  (use-package ox-html
    :after ox
    :requires (htmlize)
    :functions (endless/export-audio-link endless/export-video-link)
    :tags '("ORG")
    :config
    (setq org-html-xml-declaration '(("html" . "")
                                     ("was-html" . "<?xml version=\"1.0\" encoding=\"%s\"?>")
                                     ("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>"))
          org-export-html-inline-images t
          org-export-with-sub-superscripts nil
          org-export-html-style-extra "<link rel=\"stylesheet\" href=\"org.css\" type=\"text/css\" />"
          org-export-html-style-include-default nil
          org-export-htmlize-output-type 'css ; Do not generate internal css formatting for HTML exports
          )

    (defun endless/export-audio-link (path desc format)
      "Export org audio links to hmtl."
      (cl-case format
        (html (format "<audio src=\"%s\" controls>%s</audio>" path (or desc "")))))
    (org-link-set-parameters "audio" :ignore #'endless/export-audio-link)


    (defun endless/export-video-link (path desc format)
      "Export org video links to hmtl."
      (cl-case format
        (html (format "<video controls src=\"%s\">%s</video>" path (or desc "")))))
    (org-link-set-parameters "video" :ignore #'endless/export-video-link)

    (add-to-list 'org-file-apps '("\\.x?html?\\'" . "/usr/bin/firefox %s")))

  (use-package ox-reveal
    :ensure t
    :tags '("ORG")
    :requires (ox-html htmlize))
#+end_src
*** LaTeX
#+begin_src emacs-lisp
  (use-package ox-latex
    :tags '("ORG")
    :after ox
    :config
    (setq org-latex-listings t
          org-export-with-LaTeX-fragments t
          org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f")))
#+end_src
*** Beamer
#+begin_src emacs-lisp
  (use-package ox-beamer
    :tags '("ORG")
    :after ox)
#+end_src
*** Docbook
#+begin_src emacs-lisp
(setq org-export-docbook-xsl-fo-proc-command "fop %s %s"
      org-export-docbook-xslt-proc-command "xsltproc --output %s /usr/share/xml/docbook/stylesheet/nwalsh/fo/docbook.xsl %s")
#+end_src
*** Markdown
#+begin_src emacs-lisp
  (use-package ox-gfm
      :ensure t
      :tags '("ORG")
      :after ox
      :config (require 'ox-gfm))
#+end_src
*** Pandoc
#+begin_src emacs-lisp
  (use-package ox-pandoc
    :ensure t
    :tags '("ORG")
    :disabled t
    :defines (org-pandoc-options-for-docx org-pandoc-options-for-beamer-pdf org-pandoc-options-for-latex-pdf)
    :config
    ;; default options for all output formats
    (setq org-pandoc-options '((standalone . t))
          ;; cancel above settings only for 'docx' format
          org-pandoc-options-for-docx '((standalone . nil))
          ;; special settings for beamer-pdf and latex-pdf exporters
          org-pandoc-options-for-beamer-pdf '((pdf-engine . "xelatex"))
          org-pandoc-options-for-latex-pdf '((pdf-engine . "xelatex"))))
#+end_src
*** Anki editor
#+begin_src emacs-lisp
  (use-package anki-editor
    :defines (anki-editor-mode-map)
    :ensure t
    :disabled t
    :tags '("ORG" "REQUIRES_CONNECTION" "PROCESS")
    :pin MELPA
    :hydra
    (anki-editor-hydra (:color teal)
      "Anki editor"
      ("s"  anki-start             "Start anki" )
      ("p"  anki-editor-push-notes "\"Commit\"" )
      ("q"  nil                    "cancel"     :color blue))

    :bind
    (:map anki-editor-mode-map ("C-x v" . anki-editor-hydra/body))

    :config
    (defun anki-start ()
      "Spawns 'grunt serve' process"
      (interactive)
      (let* ((bpr-scroll-direction 1) (bpr-show-progress nil) (bpr-use-projectile nil))
        (bpr-spawn "/usr/bin/anki")
        (bpr-open-last-buffer)))
    )
#+end_src
** Async
#+begin_src emacs-lisp
  (use-package ob-async
    :ensure t
    :tags '("ORG")
    :after org
    :commands (ob-async-org-babel-execute-src-block)
    :init
    (setq ob-async-no-async-languages-alist '("ipython" "jupyter-python" "jupyter")))

  ;; org-export-in-background t
  ;; org-export-async-debug t
  ;; org-export-async-init-file (expand-file-name (format "%s/org-export.el" user-emacs-directory)))
#+end_src
** Dashboard
#+begin_src emacs-lisp
  (use-package org-dashboard :ensure t)
#+end_src
** Querying
It is useful to find some items in org files based on a query.
#+begin_src emacs-lisp
  (use-package org-ql
    :ensure t
    :pin MELPA)
#+end_src

* Emacs Lisp
** Buffer content
#+begin_src emacs-lisp
  ;; Package lint
  (use-package package-lint
    :ensure t
      :tags '("COMPILATION"))

  ;; Pretty print for lisp
  (use-package ipretty
    :ensure t
      :tags '("LANGUAGE"))
#+end_src
** ELPL
#+BEGIN_SRC emacs-lisp
  (use-package elpl
    :ensure t
    :commands (elpl))
#+END_SRC
* Filetype
Now that we have achieved the global configuration, I am going to focus on the language specific
configuration.
** C/C++
C and C++ configuration is mainly relying on irony. Some minor adaptations, like the compilation
part, are also integrated.
*** Irony main configuration
We just load irony add support for c derivative mode.
#+begin_src emacs-lisp
  (use-package irony
    :ensure t
    :tags '("LANGUAGE")
    :hook ((c-mode . irony-mode)
           (objc-mode . irony-mode)
           (c++-mode . irony-mode)))
#+end_src
*** Checking/documentation
#+begin_src emacs-lisp
  (use-package flycheck-irony
    :ensure t
    :tags '("LANGUAGE")
    :after (flycheck irony))

  (use-package irony-eldoc
    :ensure t
    :tags '("LANGUAGE")
    :after (irony))
#+end_src
*** Completion
For the completion, I am relying on company and irony. The configuration consists of add irony
into company backend.
#+begin_src emacs-lisp
  (use-package company-irony
    :ensure t
    :tags '("LANGUAGE")
    :hook (irony-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-irony)))))

  (use-package company-irony-c-headers
    :ensure t
    :tags '("LANGUAGE")
    :hook (irony-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-irony-c-headers)))))
#+end_src
*** Adapt compilation
Sometimes, I don't want to have a makefile or any complicated project compilation. So I just use
gcc/g++. Therefore, here, either there is a makefile and use it, either there is none and I use
gcc/++ directly.
#+begin_src emacs-lisp
  (use-package smart-compile
    :ensure t
    :tags '("LANGUAGE")
    :bind (("C-c C-c" . smart-compile)

           :map c-mode-base-map
           ("C-c C-c" . smart-compile)))
#+end_src
*** C++ specificities
For C++, I use a dedicated font lock.
#+begin_src emacs-lisp
  (use-package modern-cpp-font-lock
    :ensure t
    :tags '("LANGUAGE"))
#+end_src
** Configuration and log files
This part is dedicated to unix and more general configuration files as well as logs.
*** Default unix configuration
Config-general-mode is applied for all unix configuration files.
#+begin_src emacs-lisp
  (use-package config-general-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode ("\\.conf$" "\\.*rc$"))
#+end_src
*** Authinfo
I developed a dedicated mode for syntax highlighting authinfo files. For now, it is not stable
enough to be on melpa so I use quelpa.
#+begin_src emacs-lisp
  (use-package authinfo-mode
    :ensure quelpa
    :quelpa (authinfo-mode :repo "seblemaguer/authinfo-mode" :fetcher github)
    :tags '("LANGUAGE")
    :mode ("\\.authinfo\\(?:\\.gpg\\)\\'" . authinfo-mode))
#+end_src
*** Apache
#+begin_src emacs-lisp
  (use-package apache-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode ("\\.htaccess\\'" "httpd\\.conf\\'" "srm\\.conf\\'"
           "access\\.conf\\'" "sites-\\(available\\|enabled\\)/"))
#+end_src
*** SSH configuration
#+begin_src emacs-lisp
  (use-package ssh-config-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode ("/\\.ssh/config\\'" "/system/ssh\\'" "/sshd?_config\\'" "/known_hosts\\'" "/authorized_keys2?\\'")
    :hook (ssh-config-mode . turn-on-font-lock)

    :config
    (autoload 'ssh-config-mode "ssh-config-mode" t))
#+end_src
*** Logview
#+begin_src emacs-lisp
  (use-package logview
    :ensure t
    :tags '("LANGUAGE")
    :mode ("syslog\\(?:\\.[0-9]+\\)" "\\.log\\(?:\\.[0-9]+\\)?\\'"))
#+end_src
*** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode (".yaml$")
    :hook
    (yaml-mode . yaml-mode-outline-hook)

    :init
    (defun yaml-outline-level ()
      "Return the outline level based on the indentation, hardcoded at 2 spaces."
      (s-count-matches "[ ]\\{2\\}" (match-string 0)))

    (defun yaml-mode-outline-hook ()
      (outline-minor-mode)
      (setq outline-regexp "^\\([ ]\\{2\\}\\)*\\([-] \\)?\\([\"][^\"]*[\"]\\|[a-zA-Z0-9_-]*\\): *\\([>|]\\|&[a-zA-Z0-9_-]*\\)?$")
      (setq outline-level 'yaml-outline-level))
    )

  (use-package yaml-tomato
    :ensure t
    :tags '("LANGUAGE"))
#+end_src
*** vimrc
#+begin_src emacs-lisp
  (use-package vimrc-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode ("^\\.vimrc\\'"))
#+end_src
** CSS
#+begin_src emacs-lisp
  (use-package scss-mode
    :ensure t
    :tags '("LANGUAGE")
    :defines scss-compile-at-save
    :mode ("\\.scss\\'")
    :config
    (setq scss-compile-at-save 'nil))
#+END_SRC
** CSV
 #+begin_src emacs-lisp
   (use-package csv-mode
     :ensure t
     :tags '("LANGUAGE")
     :config

     ;; Define separators
     (setq csv-separators '("," ";" ":" " ")))


   ;; Subpackages
   (use-package csv-nav
     :ensure t
     :tags '("LANGUAGE")
     :disabled t)
 #+end_src
** Cue
#+begin_src emacs-lisp
  (use-package cue-mode
    :ensure quelpa
    :quelpa (cue-mode :repo "seblemaguer/cue-mode" :fetcher github)
    :tags '("LANGUAGE")
    :mode ("\\.cue$"))
#+end_src
** Graphviz
#+begin_src emacs-lisp
  (use-package graphviz-dot-mode
    :ensure t
    :tags '("LANGUAGE")
    :init
    (defvar default-tab-width nil)

    :mode ("\\.dot\\'"))
#+end_src

** Java based
*** Global (lsp-java)
#+begin_src emacs-lisp
  (use-package lsp-java
    :ensure t
    :pin MELPA
    :tags '("LANGUAGE")
    :hook
    (java-mode . lsp)

    :config
    (setq lsp-java-save-action-organize-imports nil))

  (use-package dap-java :disabled t)
  (use-package lsp-java-treemacs :disabled t)
#+end_src
*** Snippets
#+begin_src emacs-lisp
  (use-package java-snippets
    :ensure t
    :tags '("LANGUAGE"))
#+end_src
*** Javadoc
#+begin_src emacs-lisp
  (use-package javadoc-lookup
    :ensure t
    :tags '("LANGUAGE")
    :config
    (when (file-exists-p "/usr/share/doc/openjdk-8-jdk/api")
      (javadoc-add-roots "/usr/share/doc/openjdk-8-jdk/api"))

    (javadoc-add-artifacts [org.lwjgl.lwjgl lwjgl "2.8.2"]
                           [com.nullprogram native-guide "0.2"]
                           [org.apache.commons commons-math3 "3.0"]
                           ;; [de.dfki.lt.jtok jtok-core "1.9.3"]
                           ))

#+end_src
** Groovy
*** Global groovy
#+begin_src emacs-lisp
  (use-package groovy-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode ("\.groovy$" "\.gradle$")
    :interpreter ("gradle" "groovy")
    :hook
    (groovy-mode .  (lambda () (inf-groovy-keys)))

    :config
    (autoload 'run-groovy "inf-groovy" "Run an inferior Groovy process")
    (autoload 'inf-groovy-keys "inf-groovy" "Set local key defs for inf-groovy in groovy-mode"))

  ;; Subpackages
  (use-package groovy-imports
    :ensure t
    :tags '("LANGUAGE"))
#+end_src
*** Gradle specificities
#+begin_src emacs-lisp
  (use-package flycheck-gradle
    :ensure t
    :tags '("LANGUAGE"))
#+end_src
** Kotlin
#+begin_src emacs-lisp
  (use-package kotlin-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode "\\.kts?\\'"
    :config
    (setq kotlin-tab-width 4))
#+end_src
** Latex
*** Global
#+begin_src emacs-lisp
  (use-package tex-site
    :ensure auctex
    :tags '("LANGUAGE")
    :after (tex latex)
    :hook
    (LaTeX-mode . turn-off-auto-fill)
    (LaTeX-mode . (lambda () (TeX-fold-mode t)))
    (LaTeX-mode . flyspell-mode)
    (LaTeX-mode . LaTeX-math-mode)
    (LaTeX-mode . outline-minor-mode)
    (LaTeX-mode . TeX-source-correlate-mode)

    :config

    ;; Spelling
    (setq ispell-tex-skip-alists
          '((
             ;;("%\\[" . "%\\]") ; AMStex block comment...
             ;; All the standard LaTeX keywords from L. Lamport's guide:
             ;; \cite, \hspace, \hspace*, \hyphenation, \include, \includeonly
             ;; \input, \label, \nocite, \rule (in ispell - rest included here)
             ("\\\\addcontentsline"              ispell-tex-arg-end 2)
             ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end)
             ("\\\\\\([aA]lph\\|arabic\\)"   ispell-tex-arg-end)
             ("\\\\author"                         ispell-tex-arg-end)
             ;; New regexps here --- kjh
             ("\\\\\\(text\\|paren\\)cite" ispell-tex-arg-end)
             ("\\\\cite\\(t\\|p\\|year\\|yearpar\\)" ispell-tex-arg-end)
             ("\\\\bibliographystyle"                ispell-tex-arg-end)
             ("\\\\makebox"                  ispell-tex-arg-end 0)
             ("\\\\e?psfig"                  ispell-tex-arg-end)
             ("\\\\document\\(class\\|style\\)" .
              "\\\\begin[ \t\n]*{[ \t\n]*document[ \t\n]*}"))
            (
             ;; delimited with \begin.  In ispell: displaymath, eqnarray,
             ;; eqnarray*, equation, minipage, picture, tabular,
             ;; tabular* (ispell)
             ("\\(figure\\|table\\)\\*?"     ispell-tex-arg-end 0)
             ("\\(equation\\|eqnarray\\)\\*?"     ispell-tex-arg-end 0)
             ("list"                                 ispell-tex-arg-end 2)
             ("program" . "\\\\end[ \t\n]*{[ \t\n]*program[ \t\n]*}")
             ("verbatim\\*?"."\\\\end[ \t\n]*{[ \t\n]*verbatim\\*?[ \t\n]*}")
             ("lstlisting\\*?"."\\\\end[ \t\n]*{[ \t\n]*lstlisting\\*?[ \t\n]*}"))))

    ;; Pdf activated by default
    (TeX-global-PDF-mode 1)

    ;; Diverse
    (setq-default TeX-master nil)
    (setq TeX-parse-self t
          TeX-auto-save t)

    ;; Minor helpers for comment and quotes
    (add-to-list 'LaTeX-verbatim-environments "comment")
    (setq TeX-open-quote "\enquote{"
          TeX-close-quote "}")

    ;; Indentation
    (setq LaTeX-indent-level 4
          LaTeX-item-indent 0
          TeX-brace-indent-level 4
          TeX-newline-function 'newline-and-indent)


    (defadvice LaTeX-fill-region-as-paragraph (around LaTeX-sentence-filling)
      "Start each sentence on a new line."
      (let ((from (ad-get-arg 0))
            (to-marker (set-marker (make-marker) (ad-get-arg 1)))
            tmp-end)
        (while (< from (marker-position to-marker))
          (forward-sentence)
          ;; might have gone beyond to-marker --- use whichever is smaller:
          (ad-set-arg 1 (setq tmp-end (min (point) (marker-position to-marker))))
          ad-do-it
          (ad-set-arg 0 (setq from (point)))
          (unless (or
                   (bolp)
                   (looking-at "\\s *$"))
            (LaTeX-newline)))
        (set-marker to-marker nil)))
    (ad-activate 'LaTeX-fill-region-as-paragraph)



    ;; PDF/Tex correlation
    (setq TeX-source-correlate-method 'synctex)


    ;; Keys
    (define-key LaTeX-mode-map (kbd "C-c C-=") 'align-current))
#+end_src
*** Bibtex
**** Global
#+begin_src emacs-lisp
  (use-package bibtex
    :tags '("LANGUAGE")
    :config
    (defun bibtex-generate-autokey ()
      (let* ((bibtex-autokey-names nil)
             (bibtex-autokey-year-length 2)
             (bibtex-autokey-name-separator "\0")
             (names (split-string (bibtex-autokey-get-names) "\0"))
             (year (bibtex-autokey-get-year))
             (name-char (cond ((= (length names) 1) 4)
                              ((= (length names) 2) 2)
                              (t 1)))
             (existing-keys (bibtex-parse-keys))
             key)
        (setq names (mapconcat (lambda (x)
                                 (substring x 0 name-char))
                               names
                               ""))
        (setq key (format "%s%s" names year))
        (let ((ret key))
          (loop for c from ?a to ?z
                while (assoc ret existing-keys)
                do (setq ret (format "%s%c" key c)))
          ret)))

    (setq bibtex-align-at-equal-sign t
          bibtex-autokey-name-year-separator ""
          bibtex-autokey-year-title-separator ""
          bibtex-autokey-titleword-first-ignore '("the" "a" "if" "and" "an")
          bibtex-autokey-titleword-length 100
          bibtex-autokey-titlewords 1))
#+end_src
**** Formatting
#+BEGIN_SRC emacs-lisp
  (use-package bibclean-format
    :ensure t
    :hook
    (bibtex-mode . bibclean-format-on-save-mode)

    :commands (bibclean-format)

    :bind
    (:map bibtex-mode-map
          ("C-c f" . bibclean-format))
    :config
    (setq bibclean-format-args '("--max-width" "0" "--align-equal")))
#+END_SRC
*** Completion
#+begin_src emacs-lisp
  ;; Completion
  (setq TeX-auto-global (format "%s/auctex/style" user-emacs-directory))

  (use-package company-auctex
    :ensure t
    :tags '("LANGUAGE")
    :hook
    (latex-mode . (company-auctex-init)))


  (use-package company-bibtex
    :ensure t
    :tags '("LANGUAGE")
    :hook
    (latex-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-bibtex))))
    (org-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-bibtex)))))

  (use-package company-reftex
    :ensure t
    :tags '("LANGUAGE")
    :hook
    (latex-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-reftex-labels company-reftex-citations))))
    (org-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-reftex-labels company-reftex-citations)))))

  (use-package company-math
    :ensure t
    :tags '("LANGUAGE")
    :hook
    (latex-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-math-symbols-unicode))))
    (org-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-math-symbols-unicode)))))
#+end_src
*** Compilation
#+begin_src emacs-lisp
  ;; Escape mode
  (defun TeX-toggle-escape nil
    (interactive)
    "Toggle Shell Escape"
    (setq LaTeX-command
          (if (string= LaTeX-command "latex")
              "latex -shell-escape"
            "latex"))
    (message (concat "shell escape "
                     (if (string= LaTeX-command "latex -shell-escape")
                         "enabled"
                       "disabled"))
             )
    )

  (use-package auctex-latexmk
    :ensure t
    :tags '("LANGUAGE")
    :after (tex latex)
    :config
    (setq auctex-latexmk-inherit-TeX-PDF-mode t)
    (auctex-latexmk-setup))

  (setq TeX-show-compilation nil)

  ;; Redine TeX-output-mode to get the color !
  (define-derived-mode TeX-output-mode TeX-special-mode "LaTeX Output"
    "Major mode for viewing TeX output.
    \\{TeX-output-mode-map} "
    :syntax-table nil
    (set (make-local-variable 'revert-buffer-function)
         #'TeX-output-revert-buffer)

    (set (make-local-variable 'font-lock-defaults)
         '((("^!.*" . font-lock-warning-face) ; LaTeX error
            ("^-+$" . font-lock-builtin-face) ; latexmk divider
            ("^\\(?:Overfull\\|Underfull\\|Tight\\|Loose\\).*" . font-lock-builtin-face)
            ;; .....
            )))

    ;; special-mode makes it read-only which prevents input from TeX.
    (setq buffer-read-only nil))
#+end_src
*** Reftex
#+begin_src emacs-lisp
  (use-package reftex
    :tags '("LANGUAGE")
    :init
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
    :config
    (setq reftex-save-parse-info t
          reftex-enable-partial-scans t
          reftex-use-multiple-selection-buffers t
          reftex-plug-into-AUCTeX t
          reftex-vref-is-default t
          reftex-cite-format
          '((?\C-m . "\\cite[]{%l}")
            (?t . "\\textcite{%l}")
            (?a . "\\autocite[]{%l}")
            (?p . "\\parencite{%l}")
            (?f . "\\footcite[][]{%l}")
            (?F . "\\fullcite[]{%l}")
            (?x . "[]{%l}")
            (?X . "{%l}"))

          font-latex-match-reference-keywords
          '(("cite" "[{")
            ("cites" "[{}]")
            ("footcite" "[{")
            ("footcites" "[{")
            ("parencite" "[{")
            ("textcite" "[{")
            ("fullcite" "[{")
            ("citetitle" "[{")
            ("citetitles" "[{")
            ("headlessfullcite" "[{"))

          reftex-cite-prompt-optional-args nil
          reftex-cite-cleanup-optional-args t))
#+end_src
*** Preview
#+begin_src emacs-lisp
  (use-package latex-math-preview
    :ensure t
    :tags '("LANGUAGE")
    :config
    (autoload 'LaTeX-preview-setup "preview")
    (setq preview-scale-function 1.2)
    (add-hook 'LaTeX-mode-hook 'LaTeX-preview-setup))
#+end_src
** Ledger
 #+begin_src emacs-lisp
   (use-package ledger-mode
     :ensure t
     :tags '("LANGUAGE")
     :mode ("\\.ledger$"))

   (use-package flycheck-ledger
     :ensure t
     :tags '("LANGUAGE")
     :after (flycheck ledger-mode))
 #+end_src
** Lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :ensure t
    :tags '("LANGUAGE"))

  (use-package company-lua
    :ensure t
    :tags '("LANGUAGE"))
#+end_src
** Matlab
#+begin_src emacs-lisp
  (use-package matlab-load
    :ensure matlab-mode
    :tags '("LANGUAGE")
    :defines (matlab-shell-command-switches mlint-programs)
    :no-require t
    :mode ("\\.m$" . matlab-mode)
    :commands (matlab-shell)

    :config
    ;; (eval-after-load 'company
    ;;   '(add-to-list 'company-backends 'company-matlab))

    ;; (eval-after-load 'flycheck
    ;;   '(require 'flycheck-matlab-mlint)))


    ;; Command defines
    (setq matlab-shell-command-switches '("-nodesktop -nosplash")
          mlint-programs '("mlint" "glnxa64/mlint")))
#+end_src
** Markdown
*** Global
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode ("\\.md$"))


  (use-package markdown-mode+
    :ensure t
    :tags '("LANGUAGE")
    :after markdown-mode)
#+end_src
*** Syntax highlight in block
#+begin_src emacs-lisp
  (use-package poly-markdown
    :ensure t
    :disabled t
    :tags '("LANGUAGE"))
#+end_src
*** Visualize GFM rendering
#+begin_src emacs-lisp
  (use-package grip-mode
    :ensure t
    :commands (grip-mode)
    :tags '("GUI")
    :bind (:map markdown-mode-command-map
           ("g" . grip-mode)))
#+end_src
** PDF
*** Global
  #+begin_src emacs-lisp
    (use-package pdf-tools
      :ensure t
      :pin MELPA
      :tags '("DOCUMENT" "GUI")
      :functions
      (pdf-history-backward
       pdf-history-forward
       pdf-links-action-perfom
       pdf-links-isearch-link
       pdf-view-enlarge
       pdf-view-shrink
       pdf-view-scale-reset
       pdf-view-fit-height-to-window
       pdf-view-fit-width-to-window
       pdf-view-fit-page-to-window
       pdf-view-next-page-command
       pdf-view-previous-page-command
       pdf-view-dark-minor-mode)


      :hook
      (pdf-view-mode . (lambda ()
                         (pdf-misc-size-indication-minor-mode)
                         (pdf-links-minor-mode)
                         (pdf-isearch-minor-mode)
                         (cua-mode 0)))

      :bind
      (:map pdf-view-mode-map
            ("/" . hydra-pdftools/body)
            ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
            ("<C-s>" . isearch-forward)
            ("g"  . pdf-view-first-page)
            ("G"  . pdf-view-last-page)
            ("l"  . image-forward-hscroll)
            ("h"  . image-backward-hscroll)
            ("j"  . pdf-view-next-page)
            ("k"  . pdf-view-previous-page)
            ("e"  . pdf-view-goto-page)
            ("u"  . pdf-view-revert-buffer)
            ("al" . pdf-annot-list-annotations)
            ("ad" . pdf-annot-delete)
            ("aa" . pdf-annot-attachment-dired)
            ("am" . pdf-annot-add-markup-annotation)
            ("at" . pdf-annot-add-text-annotation)
            ("y"  . pdf-view-kill-ring-save)
            ("i"  . pdf-misc-display-metadata)
            ("s"  . pdf-occur)
            ("b"  . pdf-view-set-slice-from-bounding-box)
            ("r"  . pdf-view-reset-slice))

      :hydra
      (hydra-pdftools (:color blue :hint nil)
                      "
                PDF tools

             Move  History   Scale/Fit                  Annotations     Search/Link     Do
          ------------------------------------------------------------------------------------------------
               ^^_g_^^      _B_    ^â§^    _+_    ^ ^     _al_: list    _s_: search    _u_: revert buffer
               ^^^â^^^      ^â^    _H_    ^â^  â¦ _W_ â¤   _am_: markup  _o_: outline   _i_: info
               ^^_p_^^      ^ ^    ^â¥^    _0_    ^ ^     _at_: text    _F_: link      _d_: dark mode
               ^^^â^^^      ^â^  â­â^â^ââ  ^â^  â­â^ ^ââ   _ad_: delete  _f_: search link
          _h_ âpag_e_â _l_  _N_  â _P_ â  _-_    _b_     _aa_: dired
               ^^^â^^^      ^ ^  â°â^â^ââ¯  ^ ^  â°â^ ^ââ¯   _y_:  yank
               ^^_n_^^      ^ ^  _r_eset slice box
               ^^^â^^^
               ^^_G_^^
          "
                      ("<ESC>" nil "quit")
                      ("al" pdf-annot-list-annotations)
                      ("ad" pdf-annot-delete)
                      ("aa" pdf-annot-attachment-dired)
                      ("am" pdf-annot-add-markup-annotation)
                      ("at" pdf-annot-add-text-annotation)
                      ("y"  pdf-view-kill-ring-save)
                      ("+" pdf-view-enlarge :color red)
                      ("-" pdf-view-shrink :color red)
                      ("0" pdf-view-scale-reset)
                      ("H" pdf-view-fit-height-to-window)
                      ("W" pdf-view-fit-width-to-window)
                      ("P" pdf-view-fit-page-to-window)
                      ("n" pdf-view-next-page-command :color red)
                      ("p" pdf-view-previous-page-command :color red)
                      ("d" pdf-view-dark-minor-mode)
                      ("b" pdf-view-set-slice-from-bounding-box)
                      ("r" pdf-view-reset-slice)
                      ("g" pdf-view-first-page)
                      ("G" pdf-view-last-page)
                      ("e" pdf-view-goto-page)
                      ("o" pdf-outline)
                      ("s" pdf-occur)
                      ("i" pdf-misc-display-metadata)
                      ("u" pdf-view-revert-buffer)
                      ("F" pdf-links-action-perfom)
                      ("f" pdf-links-isearch-link)
                      ("B" pdf-history-backward :color red)
                      ("N" pdf-history-forward :color red)
                      ("l" image-forward-hscroll :color red)
                      ("h" image-backward-hscroll :color red))

      :magic ("%PDF" . pdf-view-mode)

      :config
      ;; Install what need to be installed !
      (pdf-tools-install t t t)

      ;; open pdfs scaled to fit page
      (setq-default pdf-view-display-size 'fit-page)

      ;; automatically annotate highlights
      (setq pdf-annot-activate-created-annotations t)

      ;; more fine-grained zooming
      (setq pdf-view-resize-factor 1.1))

    (use-package pdf-view-restore
      :ensure t
      :after pdf-tools
      :tags '("DOCUMENT" "GUI")
      :hook
      (pdf-view-mode-hook . pdf-view-restore-mode))
  #+end_src
*** Grepping
#+BEGIN_SRC emacs-lisp
  (use-package pdfgrep
    :ensure t
      :tags '("DOCUMENT" "GUI")
    :config
    (pdfgrep-mode))
#+END_SRC
*** COMMENT Org specific
  #+begin_src emacs-lisp
    (use-package org-pdfview
      :ensure t
      :tags '("LANGUAGE" "GUI")
      :config

      (add-to-list 'org-file-apps
                   '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link)))))
  #+end_src
** Perl
#+begin_src emacs-lisp
  (use-package cperl-mode
    :tags '("LANGUAGE")
    :defines (compile-dwim-check-tools)
    :config
    (defalias 'perl-mode 'cperl-mode)
    (cperl-set-style "BSD")

    ;; Documentation
    (cperl-lazy-install)
    (setq cperl-lazy-help-time 2)

    ;; Folding
    (add-hook 'cperl-mode-hook 'hs-minor-mode)


    ;; Interactive shell
    (autoload 'run-perl "inf-perl" "Start perl interactive shell" t)

    ;; Debugger
    (autoload 'perldb-ui "perldb-ui" "perl debugger" t)

    ;; Executable perl
    (when (and buffer-file-name
               (not (string-match "\\.\\(pm\\|pod\\)$" (buffer-file-name))))
      (add-hook 'after-save-hook 'executable-chmod nil t))
    (set (make-local-variable 'compile-dwim-check-tools) nil))
#+END_SRC

** Praat
#+begin_src emacs-lisp
  (use-package praat-mode
    :tags '("LANGUAGE")
    :mode ("\\.praat" "\\.[tT][Gg]"))
#+END_SRC
** Python
*** Global configuration
#+begin_src emacs-lisp
  (use-package python
    :tags '("LANGUAGE")
    :mode
    ("\\.py\\'" . python-mode)
    ("\\.wsgi$" . python-mode)

    :init
    (setq-default indent-tabs-mode nil)

    :config
    (setq python-indent-offset 4))
#+end_src
*** Lsp (with microsoft language server)
#+BEGIN_SRC emacs-lisp
  (use-package lsp-python-ms
    :ensure t
    :demand
    :tags '("LANGUAGE" "IDE")
    :hook (python-mode . lsp-deferred)  ; or lsp-deferred
    :init
    (setq lsp-python-ms-dir "/usr/lib"
          lsp-python-ms-executable "/usr/bin/mspyls"))
#+END_SRC
*** Pipenv
#+begin_src emacs-lisp
  (use-package pipenv
    :ensure t
    :tags '("LANGUAGE")
    :hook
    ((python-mode . pipenv-mode))

    :init
    (setq pipenv-projectile-after-switch-function
          #'pipenv-projectile-after-switch-extended))
#+end_src
*** Virtual environment
#+begin_src emacs-lisp
  (use-package pyvenv
    :ensure t
    :tags '("LANGUAGE"))
#+end_src
*** Interpreter configuration
#+begin_src emacs-lisp
  (use-package ein
    :ensure t
    :tags '("LANGUAGE")
    :config

    (cond
     ((eq system-type 'darwin) (setq ein:console-args '("--gui=osx" "--matplotlib=osx" "--colors=Linux")))
     ((eq system-type 'gnu/linux) (setq ein:console-args '("--gui=gtk3" "--matplotlib=gtk3" "--colors=Linux"))))

    (setq ein:query-timeout 1000))
#+end_src
*** Sphinx documentation
#+begin_src emacs-lisp
  (use-package sphinx-doc
    :ensure t
    :tags '("LANGUAGE")
    :hook
    (python-mode . (lambda () (sphinx-doc-mode t))))
#+end_src
** R
*** ESS configuration
#+begin_src emacs-lisp
  ;; ESS for R programming
  (use-package ess
    :ensure t
    :tags '("LANGUAGE")
    :config
    (setq ess-default-style 'RRR+))

  (use-package ess-smart-underscore
    :ensure t
    :tags '("LANGUAGE")
    :disabled t
    :after ess)

  (use-package ess-view
    :ensure t
    :tags '("LANGUAGE")
    :commands (ess-view-mode)
    :after ess)
#+end_src
*** Support drag & drop
#+begin_src emacs-lisp
  (use-package extend-dnd
    :ensure t
    :tags '("LANGUAGE")
    :config
    (extend-dnd-activate))
#+end_src
*** Completing
#+begin_src emacs-lisp
  (use-package company-statistics
    :ensure t
    :tags '("LANGUAGE")
    :after company
    :hook (after-init . company-statistics-mode))
#+end_src
** Shell
#+begin_src emacs-lisp
  (use-package company-shell
    :ensure t
    :tags '("LANGUAGE")
    :hook
    (eshell-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-shell company-shell-env company-fish-shell))))
    (sh-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-shell company-shell-env company-fish-shell))))
    )
#+end_src
** PlantUML
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :ensure t
    :tags '("LANGUAGE")
    :after org
    :mode ("\\.plantuml\\'")
    :config
    (setq plantuml-jar-path "/opt/plantuml/plantuml.jar"
          org-plantuml-jar-path plantuml-jar-path))
#+end_src
** Web configuration
*** Global web configuration
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode
    ("\\.phtml\\'" "\\.tpl\\.php\\'" "\\.[agj]sp\\'" "\\.as[cp]x\\'"
    "\\.erb\\'" "\\.mustache\\'" "\\.djhtml\\'" "\\.html?\\'")

    :init
    (setq web-mode-markup-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-css-indent-offset 2

          web-mode-enable-auto-pairing t
          web-mode-enable-auto-expanding t
          web-mode-enable-css-colorization t)

    :config
    ;; Template
    (setq web-mode-engines-alist
          '(("php"    . "\\.phtml\\'")
            ("blade"  . "\\.blade\\."))
          )

    )

  (use-package web-beautify
    :ensure t
    :tags '("LANGUAGE")
    :commands (web-beautify-css
               web-beautify-css-buffer
               web-beautify-html
               web-beautify-html-buffer
               web-beautify-js
               web-beautify-js-buffer))

  (use-package web-completion-data
    :ensure t
    :tags '("LANGUAGE"))

  (use-package web-mode-edit-element
    :ensure t
    :tags '("LANGUAGE"))
#+end_src
*** EMMET
#+begin_src emacs-lisp
  (use-package emmet-mode
    :ensure t
    :tags '("LANGUAGE")
    :diminish (emmet-mode . "Îµ")
    :bind* (("C-)" . emmet-next-edit-point)
            ("C-(" . emmet-prev-edit-point))
    :commands (emmet-mode
               emmet-next-edit-point
               emmet-prev-edit-point)
    :hook
    ((sgml-mode-hook . emmet-mode)
     (html-mode . emmet-mode)
     (web-mode . emmet-mode))
    :init
    (setq emmet-indentation 2
          emmet-move-cursor-between-quotes t))
#+end_src
*** Completion
#+begin_src emacs-lisp
  (use-package company-web
    :ensure t
    :tags '("LANGUAGE")
    :hook (web-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-web-html)))))
#+end_src
*** Javascript
**** Global
#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode
    ("\\.js\\'")
    :hook
    (js2-mode . js2-imenu-extras-mode))

  (use-package js2-refactor
    :ensure t
    :tags '("LANGUAGE")
    :hook
    (js2-mode . js2-refactor-mode)

    :commands (js2-refactor-mode js2-refactor-hydra/body)
    :hydra
    (js2-refactor-hydra (:color blue :hint nil)
                        "
        Javascript

    ^Functions^                    ^Variables^               ^Buffer^                      ^sexp^               ^Debugging^
    ------------------------------------------------------------------------------------------------------------------------------
    _lp_: Localize Parameter      _ev_: Extract variable   _wi_: Wrap buffer in IIFE    _k_:  js2 kill      _lt_: log this
    _ef_: Extract function        _iv_: Inline variable    _ig_: Inject global in IIFE  _ss_: split string  _dt_: debug this
    _ip_: Introduce parameter     _rv_: Rename variable    _ee_: Expand node at point   _sl_: forward slurp
    _em_: Extract method          _vt_: Var to this        _cc_: Contract node at point _ba_: forward barf
    _ao_: Arguments to object     _sv_: Split var decl.    _uw_: unwrap
    _tf_: Toggle fun exp and decl _ag_: Add var to globals
    _ta_: Toggle fun expr and =>  _ti_: Ternary to if
  "
                        ("ee" js2r-expand-node-at-point)
                        ("cc" js2r-contract-node-at-point)
                        ("ef" js2r-extract-function)
                        ("em" js2r-extract-method)
                        ("tf" js2r-toggle-function-expression-and-declaration)
                        ("ta" js2r-toggle-arrow-function-and-expression)
                        ("ip" js2r-introduce-parameter)
                        ("lp" js2r-localize-parameter)
                        ("wi" js2r-wrap-buffer-in-iife)
                        ("ig" js2r-inject-global-in-iife)
                        ("ag" js2r-add-to-globals-annotation)
                        ("ev" js2r-extract-var)
                        ("iv" js2r-inline-var)
                        ("rv" js2r-rename-var)
                        ("vt" js2r-var-to-this)
                        ("ao" js2r-arguments-to-object)
                        ("ti" js2r-ternary-to-if)
                        ("sv" js2r-split-var-declaration)
                        ("ss" js2r-split-string)
                        ("uw" js2r-unwrap)
                        ("lt" js2r-log-this)
                        ("dt" js2r-debug-this)
                        ("sl" js2r-forward-slurp)
                        ("ba" js2r-forward-barf)
                        ("k" js2r-kill)
                        ("q" nil))

    :config
    (js2r-add-keybindings-with-prefix "C-c C-r")
    (define-key js2-mode-map (kbd "C-k") #'js2r-kill)

    ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
    ;; unbind it.
    (define-key js-mode-map (kbd "M-.") nil))

  (use-package xref-js2
    :ensure t
    :tags '("LANGUAGE")
    :disabled t
    :hook
    (js2-mode . (lambda () (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))

  (use-package indium
    :ensure t
    :tags '("LANGUAGE")
    :diminish indium-interaction-mode
    :defer t
    :hook
    (js2-mode . #'indium-interaction-mode)

    :config
    (setq indium-update-script-on-save t))


  (use-package gulp-task-runner
    :ensure t
    :tags '("LANGUAGE")
    :commands (gulp))

  (use-package js-auto-beautify
    :ensure t
    :tags '("LANGUAGE"))

  (use-package js-import
    :ensure t
    :tags '("LANGUAGE"))

  (use-package company-tern
    :ensure t
    :tags '("LANGUAGE")
    :hook
    (js2-mode . tern-mode)
    (js2-mode . company-mode)

    :config
    (add-to-list 'company-backends 'company-tern)

    ;; Disable completion keybindings, as we use xref-js2 instead
    (define-key tern-mode-keymap (kbd "M-.") nil)
    (define-key tern-mode-keymap (kbd "M-,") nil)

    (setq company-tern-property-marker " <p>"
          company-tern-property-marker nil
          company-tern-meta-as-single-line t
          company-tooltip-align-annotations t))
#+END_SRC
**** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t
    :tags '("LANGUAGE")
    :mode
    ("\\.json$"))

  ;; Subpackage
  (use-package json-reformat
    :ensure t
    :tags '("LANGUAGE"))
#+end_src
**** AngularJS
Extracted from https://github.com/zakame/emacs-for-javascript
#+begin_src emacs-lisp
  (use-package react-snippets
    :ensure t
    :tags '("LANGUAGE"))

  (use-package angular-mode
    :ensure t
    :tags '("LANGUAGE"))

  (use-package angular-snippets
    :ensure t
    :tags '("LANGUAGE")
    :config
    (eval-after-load "web-mode"
      '(bind-key "C-c C-d" 'ng-snip-show-docs-at-point web-mode-map)))
#+end_src
**** Nodenv
#+begin_src emacs-lisp
  (use-package nodenv
    :ensure t
    :tags '("LANGUAGE")
    :disabled t
    :hook
    (js-mode . #'nodenv-mode))
#+end_src
**** Some helpers
#+begin_src emacs-lisp
  (defun grunt-serve ()
    "Spawns 'grunt serve' process"
    (interactive)
    ;; Set dynamic config for process.
    ;; Variables below are applied only to particular process
    (let* ((bpr-scroll-direction 1) (bpr-show-progress nil))
      (bpr-spawn "$(npm bin)/grunt serve --color")
      (bpr-open-last-buffer)))
#+end_src
** XML
#+begin_src emacs-lisp
  (use-package nxml-mode
    :tags '("LANGUAGE")
    :mode ("\\.xml$" . nxml-mode)
    :commands (pretty-print-xml-region)
    :init
    ;; Mapping xml to nxml
    (fset 'xml-mode 'nxml-mode)

    :hook
    (nxml-mode . (lambda ()
                   (outline-minor-mode)
                   (setq outline-regexp "^[ \t]*\<[a-zA-Z]+")))
    :config

    ;; Global configuration
    (setq nxml-child-indent 2
          nxml-auto-insert-xml-declaration-flag t
          nxml-slash-auto-complete-flag t
          nxml-bind-meta-tab-to-complete-flag t)


    ;; Helper to format
    (defun pretty-print-xml-region (begin end)
      "Pretty format XML markup in region. You need to have nxml-mode
  http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
  this.  The function inserts linebreaks to separate tags that have
  nothing but whitespace between them.  It then indents the markup
  by using nxml's indentation rules."
      (interactive "r")
      (save-excursion
        (nxml-mode)
        (goto-char begin)
        (while (search-forward-regexp "\>[ \\t]*\<" nil t)
          (backward-char) (insert "\n"))
        (indent-region begin end))))
#+END_SRC
* Documentation
** Emacs
*** Key binding
#+begin_src emacs-lisp
  (use-package helm-descbinds
    :ensure t
    :tags '("DOCUMENTATION")
    :commands (helm-descbinds)
    :bind
    ("C-h b" . helm-descbinds))
#+end_src
*** Apropos
#+begin_src emacs-lisp
  (use-package apropos-fn+var
    :ensure t
    :tags '("DOCUMENTATION")
    :disabled t
    :config
    (setq apropos-do-all t))
#+end_src
*** Info
#+begin_src emacs-lisp
  (use-package info-buffer
    :ensure t
    :tags '("DOCUMENTATION"))

  (use-package info+
    :ensure t
    :tags '("DOCUMENTATION")
    :disabled t)
#+end_src
*** Help
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :tags '("DOCUMENTATION"))
#+end_src
** System
*** Man
#+begin_src emacs-lisp
  (use-package man
    :ensure t
    :tags '("DOCUMENTATION")
    :config
    (setq Man-notify-method 'pushy)
    (setq woman-manpath
          `(
            "/usr/share/man/" "/usr/local/man/" ;; System
            ,(format "%s/local/man" user-emacs-directory) ;; Private environment
            )))
#+end_src
* Shell
** Global
The key configuration is mainly coming from https://github.com/jcf/emacs.d the rest is coming from http://www.modernemacs.com/post/custom-eshell/ with some adaptation
#+begin_src emacs-lisp
  (use-package eshell
    :tags '("SHELL")
    :hook
    (eshell-mode . (lambda () (eshell/export "NODE_NO_READLINE=1")))
    (eshell-exit . (lambda () (setq esh-prompt-num 0)))

    :functions (eshell/pwd)
    :bind
    (:map eshell-mode-map
          ("<M-p>" . helm-eshell-history))

    :config
    (defmacro with-face (STR &rest PROPS)
      "Return STR propertized with PROPS."
      `(propertize ,STR 'face (list ,@PROPS)))

    (defmacro esh-section (NAME ICON FORM &rest PROPS)
      "Build eshell section NAME with ICON prepended to evaled FORM with PROPS."
      `(setq ,NAME
             (lambda () (when ,FORM
                          (-> ,ICON
                              (concat esh-section-delim ,FORM)
                              (with-face ,@PROPS))))))

    (defun esh-acc (acc x)
      "Accumulator for evaluating and concatenating esh-sections."
      (--if-let (funcall x)
          (if (s-blank? acc)
              it
            (concat acc esh-sep it))
        acc))

    (defun esh-prompt-func ()
      "Build `eshell-prompt-function'"
      (concat esh-header
              (-reduce-from 'esh-acc "" eshell-funcs)
              "\n"
              eshell-prompt-string))

    (esh-section esh-dir
                 "\xf07c"  ; ï¼ (faicon folder)
                 (abbreviate-file-name (eshell/pwd))
                 '(:foreground "blue" :weight ultra-bold :underline t))

    (esh-section esh-git
                 "\xe907"  ; î¤ (git icon)
                 (magit-get-current-branch)
                 '(:foreground "red"))

    (esh-section esh-python
                 "\xe928"  ; î¤¨ (python icon)
                 pyvenv-virtual-env-name)

    (esh-section esh-clock
                 "\xf017"  ; ï (clock icon)
                 (format-time-string "%H:%M" (current-time))
                 '(:foreground "forest green"))

    ;; Below I implement a "prompt number" section
    (setq esh-prompt-num 0)
    (advice-add 'eshell-send-input :before
                (lambda (&rest args) (setq esh-prompt-num (incf esh-prompt-num))))

    (esh-section esh-num
                 "\xf0c9"  ; ï (list icon)
                 (number-to-string esh-prompt-num)
                 '(:foreground "brown"))


    (setq esh-sep " | " ; "  "  or " | " ;; Separator between esh-sections
          esh-section-delim " " ;; Separator between an esh-section icon and form
          esh-header "\n " ;; Eshell prompt header

          ;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.
          ;; your login, these can be the same.
          eshell-prompt-regexp "[^â]ââ> "
          eshell-prompt-string "ââ> "

          eshell-funcs (list esh-dir esh-git esh-python esh-clock esh-num) ;; Choose which eshell-funcs to enable
          eshell-prompt-function 'esh-prompt-func ;; Enable the new eshell prompt
          )



    ;; If I ever want my own eshell/foo commands overwrite real commands ...
    (setq eshell-prefer-lisp-functions t)

    ;; Helpers
    (defun eshell/clear ()
      "Clear the eshell buffer."
      (let ((inhibit-read-only t))
        (erase-buffer)
        (eshell-send-input)))

    (defun clipboard/set (astring)
      "Copy a string to clipboard"
      (with-temp-buffer
        (insert astring)
        (clipboard-kill-region (point-min) (point-max))))

    (defun eshell/copy-pwd ()
      "Copy current directory to clipboard "
      (clipboard/set (eshell/pwd)))

    (defun eshell/copy-fpath (fname)
      "Copy file name with full path to clipboard "
      (let ((fpath (concat (eshell/pwd) "/" fname)))
        (clipboard/set fpath)
        (concat "Copied path: " fpath)))
    )
#+end_src
** Status in the fringe
#+begin_src emacs-lisp
  (use-package eshell-fringe-status
    :ensure t
    :tags '("SHELL")
    :hook
    (eshell-mode . eshell-fringe-status-mode))
#+end_src
** Fish completion
#+begin_src emacs-lisp
  (use-package fish-completion
    :ensure t
    :tags '("SHELL")
    :config
    (global-fish-completion-mode))
#+end_src
** Some toggling
#+BEGIN_SRC emacs-lisp
  (use-package eshell-toggle
    :ensure quelpa
    :quelpa
    (eshell-toggle :repo "4DA/eshell-toggle" :fetcher github :version original)

    :functions (eshell-toggle-init-eshell)
    :custom
    (eshell-toggle-size-fraction 3)
    (eshell-toggle-use-projectile-root t)
    (eshell-toggle-run-command nil)
    (eshell-toggle-init-function #'eshell-toggle-init-eshell)

    :bind
    ("<f6>" . eshell-toggle))
#+END_SRC
* Project management
** Configuration projectile
The commands are based on http://endlessparentheses.com/improving-projectile-with-extra-commands.html?source=rss
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :tags '("PROJECT")
    :config

    ;; Global configuration
    (setq projectile-switch-project-action 'neotree-projectile-action
          projectile-enable-caching t
          projectile-create-missing-test-files t
          projectile-switch-project-action #'projectile-commander
          projectile-ignored-project-function 'file-remote-p)

    ;; Defining some helpers
    (def-projectile-commander-method ?s
      "Open a *shell* buffer for the project."
      ;; This requires a snapshot version of Projectile.
      (projectile-run-shell))

    (def-projectile-commander-method ?c
      "Run `compile' in the project."
      (projectile-compile-project nil))

    (def-projectile-commander-method ?\C-?
      "Go back to project selection."
      (projectile-switch-project))

    ;; Keys
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)

    ;; Activate globally
    (projectile-mode)
)
#+end_src
** Todos/projectile
#+begin_src emacs-lisp
  (use-package org-projectile
    :ensure t
    :tags '("PROJECT")
    :disabled t
    :config
    (org-projectile-per-project)
    (setq org-projectile-per-project-filepath "todo.org"
          org-agenda-files
          (append org-agenda-files (org-projectile-todo-files))))
#+end_src
** Completion
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :tags '("PROJECT")
    :after projectile
    :functions
    (counsel-projectile-find-file-in-directory
     counsel-projectile-ibuffer
     counsel-projectile-kill-buffers
     counsel-projectile-multi-occur
     counsel-projectile-recentf
     counsel-projectile-remove-known-project
     counsel-projectile-cleanup-known-projects
     counsel-projectile-cache-current-file
     counsel-projectile-invalidate-cache
     ggtags-update-tags ;; FIXME: a require should be put somewhere maybe
     )

    :hydra
    (hydra-projectile (:color teal :hint nil)
                      "
         PROJECTILE: %(projectile-project-root)

         Find File            Search/Tags          Buffers                Cache
    ------------------------------------------------------------------------------------------
    _s-f_: file            _a_: ag                _i_: Ibuffer           _c_: cache clear
     _ff_: file dwim       _g_: update gtags      _b_: switch to buffer  _x_: remove known project
     _fd_: file curr dir   _o_: multi-occur     _s-k_: Kill all buffers  _X_: cleanup non-existing
      _r_: recent file                                               ^^^^_z_: cache current
      _d_: dir

    "
                      ("<ESC>" nil "quit")
                      ("<" hydra-project/body "back")
                      ("a"   counsel-projectile-ag)
                      ("b"   counsel-projectile-switch-to-buffer)
                      ("c"   counsel-projectile-invalidate-cache)
                      ("d"   counsel-projectile-find-dir)
                      ("s-f" counsel-projectile-find-file)
                      ("ff"  counsel-projectile-find-file-dwim)
                      ("fd"  counsel-projectile-find-file-in-directory)
                      ("g"   ggtags-update-tags)
                      ("s-g" ggtags-update-tags)
                      ("i"   counsel-projectile-ibuffer)
                      ("K"   counsel-projectile-kill-buffers)
                      ("s-k" counsel-projectile-kill-buffers)
                      ("m"   counsel-projectile-multi-occur)
                      ("o"   counsel-projectile-multi-occur)
                      ("s-p" counsel-projectile-switch-project "switch project")
                      ("p"   counsel-projectile-switch-project)
                      ("s"   counsel-projectile-switch-project)
                      ("r"   counsel-projectile-recentf)
                      ("x"   counsel-projectile-remove-known-project)
                      ("X"   counsel-projectile-cleanup-known-projects)
                      ("z"   counsel-projectile-cache-current-file)
                      ("q"   nil "cancel" :color blue)))
#+end_src
* Version control
** Git
*** Magit
- Externally opening has been copied from https://gist.github.com/dotemacs/9a0433341e75e01461c9
- Pretty configuration is adapted from https://ekaschalk.github.io/post/pretty-magit/
**** Global
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :tags '("VC")
    :commands (magit hydra-magit/body magit-get-current-branch)
    :hydra
    (hydra-magit (:color teal :hint nil)

                 "
            Magit: %(magit-get \"remote\" \"origin\" \"url\")

       Status/Info      Remote          Operations
      ------------------------------------------------------------------------------------------
      _s_: Status      _f_: Pull       _c_: commit
      _l_: Log all     _p_: Push
      _d_: Diff
      _t_: timemachine
      "
                 ("<ESC>" nil "quit")
                 ("<" hydra-project/body "back")
                 ("f" magit-pull-branch)
                 ("p" magit-push-other)
                 ("c" magit-commit-create)
                 ("d" magit-diff-range)
                 ("l" magit-log-all)
                 ("s" magit-status)
                 ("t" git-timemachine) ;; FIXME: works only if git-timemachine installed
                 ("q"   nil "cancel" :color blue))
    :bind
    (:map magit-mode-map
          ("o" . magit-open-repo))

    :config

    ;; Ignore recent commit
    (setq magit-status-sections-hook
          '(magit-insert-status-headers
            magit-insert-merge-log
            magit-insert-rebase-sequence
            magit-insert-am-sequence
            magit-insert-sequencer-sequence
            magit-insert-bisect-output
            magit-insert-bisect-rest
            magit-insert-bisect-log
            magit-insert-untracked-files
            magit-insert-unstaged-changes
            magit-insert-staged-changes
            magit-insert-stashes
            magit-insert-unpulled-from-upstream
            magit-insert-unpulled-from-pushremote
            magit-insert-unpushed-to-upstream
            magit-insert-unpushed-to-pushremote))


    ;; Update visualization
    (setq pretty-magit-alist nil
          pretty-magit-prompt nil)

    (defmacro pretty-magit (WORD ICON PROPS &optional NO-PROMPT?)
      "Replace sanitized WORD with ICON, PROPS and by default add to prompts."
      `(prog1
           (add-to-list 'pretty-magit-alist
                        (list (rx bow (group ,WORD (eval (if ,NO-PROMPT? "" ":"))))
                              ,ICON ',PROPS))
         (unless ,NO-PROMPT?
           (add-to-list 'pretty-magit-prompt (concat ,WORD ": ")))))

    ;; Operations
    (pretty-magit "add"   ?ï¶ (:foreground "#375E97" :height 1.2) pretty-magit-prompt)
    (pretty-magit "fix"   ?ï (:foreground "#FB6542" :height 1.2) pretty-magit-prompt)
    (pretty-magit "clean" ?ï (:foreground "#FFBB00" :height 1.2) pretty-magit-prompt)
    (pretty-magit "doc."  ?ï (:foreground "#3F681C" :height 1.2) pretty-magit-prompt)

    ;; Meta information
    (pretty-magit "master"  ?î¤ (:box nil :height 1.2) t)
    (pretty-magit "origin"  ?ï (:box nil :height 1.2) t)
    (pretty-magit "upstream"  ?ïµ (:box nil :height 1.2) t)

    (defun add-magit-faces ()
      "Add face properties and compose symbols for buffer from pretty-magit."
      (interactive)
      (with-silent-modifications
        (--each pretty-magit-alist
          (-let (((rgx icon props) it))
            (save-excursion
              (goto-char (point-min))
              (while (search-forward-regexp rgx nil t)
                (compose-region
                 (match-beginning 1) (match-end 1) icon)
                (when props
                  (add-face-text-property
                   (match-beginning 1) (match-end 1) props))))))))

    (advice-add 'magit-status :after 'add-magit-faces)
    (advice-add 'magit-refresh-buffer :after 'add-magit-faces)


    ;; Opening repo externally
    (defun parse-url (url)
      "convert a git remote location as a HTTP URL"
      (if (string-match "^http" url)
          url
        (replace-regexp-in-string "\\(.*\\)@\\(.*\\):\\(.*\\)\\(\\.git?\\)"
                                  "https://\\2/\\3"
                                  url)))
    (defun magit-open-repo ()
      "open remote repo URL"
      (interactive)
      (let ((url (magit-get "remote" "origin" "url")))
        (progn
          (browse-url (parse-url url))
          (message "opening repo %s" url))))
    )
#+end_src
**** Diff
#+begin_src emacs-lisp
  (use-package magit-tbdiff
    :ensure t
    :tags '("VC")
    :after magit)
#+end_src
**** Todo
#+begin_src emacs-lisp
  (use-package magit-todos
    :ensure t
    :disabled t
    :tags '("VC")
    :commands (magit-todos-mode)
    :hook (magit-mode . magit-todos-mode)
    :config
    (setq magit-todos-recursive t
          magit-todos-depth 100)
    :custom (magit-todos-keywords (list "TODO" "FIXME")))
#+end_src
*** Git ignore
#+begin_src emacs-lisp
  (use-package gitignore-mode
    :ensure t
    :tags '("VC"))

  (use-package helm-gitignore
    :ensure t
    :tags '("VC"))
#+end_src
*** Config edition
#+begin_src emacs-lisp
  (use-package gitconfig-mode
    :ensure t
    :tags '("VC")
    :mode
    ("/\.gitconfig\'"    . gitconfig-mode)
    ("/vcs/gitconfig\'"    . gitconfig-mode))
#+end_src
*** Helpers for edition
#+begin_src emacs-lisp
  (use-package gitattributes-mode
    :ensure t
    :tags '("VC"))
#+end_src
*** Git prefix
#+begin_src emacs-lisp
  (use-package git-msg-prefix
    :ensure t
    :tags '("VC")
    :config
    (setq git-msg-prefix-log-flags " --since='1 week ago' "
          git-msg-prefix-regex "^\\([^:]*: \\)"
          git-msg-prefix-input-method 'ivy-read)
    ;; (add-hook 'git-commit-mode-hook 'git-msg-prefix)
    )
#+end_src
*** Commit navigation
#+begin_src emacs-lisp
  (use-package git-timemachine
    :ensure t
    :commands (git-timemachine-toggle)
    :tags '("VC"))
#+end_src
*** Send patch by email
#+begin_src emacs-lisp
  (use-package gitpatch
    :ensure t
    :tags '("VC")
    :config
    (setq gitpatch-mail-attach-patch-key "C-c i"))
#+end_src
*** Exploring repository
#+BEGIN_SRC emacs-lisp
  (use-package github-explorer
    :ensure t
    :tags '("VC"))
#+END_SRC
** Mercurial
*** Monky
#+begin_src emacs-lisp
  (use-package monky
    :ensure t
    :tags '("VC"))
#+end_src
*** Configuration
#+begin_src emacs-lisp
  (use-package hgignore-mode
    :ensure t
    :tags '("VC"))

  (use-package hgrc-mode
    :ensure t
    :tags '("VC"))
#+end_src
** Providers
*** Github
#+begin_src emacs-lisp
  ;; Github api
  (use-package gh
    :ensure t
    :tags '("VC"))

  (use-package gh-md
    :ensure t
    :tags '("VC"))

  ;; Search on github
  (use-package github-search
    :ensure t
    :commands (github-search-clone-repo github-search-user-clone-repo)
    :tags '("VC"))

  ;; Mapping github with magit
  (use-package magithub
    :ensure t
    :tags '("VC")
    :after (:all magit)
    :config
    (magithub-feature-autoinject t)
    (setq magithub-clone-default-directory "~/tmp"))
#+end_src
*** Gist
#+begin_src emacs-lisp
  (use-package gist
    :ensure t
    :tags '("VC"))
#+end_src
*** Gitlab
#+begin_src emacs-lisp
  (use-package gitlab
    :ensure t
    :tags '("VC"))

  (use-package ivy-gitlab
    :ensure t
    :tags '("VC"))
#+end_src
*** Browsing at remote
#+begin_src emacs-lisp
  (use-package browse-at-remote
    :ensure t
    :tags '("VC"))
#+end_src
** Continuous building
#+begin_src emacs-lisp
  (use-package travis
    :ensure t
    :tags '("VC")
    :commands (show-my-travis-projects)
    :config

    (require 'travis-utils)

    (defun travis--get-github-token ()
      "Retrieve the Travis token ID."
      (my:auth-source-get-passwd :host "travis-ci.org" :user "seblemaguer"))


    (defun show-my-travis-projects ()
      (interactive)
      (travis-show-projects "seblemaguer")))
#+end_src
* File/Directory management
** Dired
*** Run associated application - define helpers
First, globally association achieve thanks to *xdg-open*.  Also, by making some minor adaptations, I
defined some helpers to play video/audio using emms directly. It is mainly adapted from here:
https://github.com/kuanyui/.emacs.d/blob/master/rc/rc-emms.el
#+begin_src emacs-lisp
  (defun dired-open-native ()
    "Open marked files (or the file the cursor is on) from dired."
    (interactive)
    (let* ((files (dired-get-marked-files t current-prefix-arg))
           (n (length files)))
      (when (or (<= n 3)
                (y-or-n-p (format "Open %d files?" n)))
        (dolist (file files)
          (call-process "xdg-open" nil 0 nil file)))))

                                          ; The use of "gnome-open" here should probably be parameterized.
  (defun dired-open-current-directory-in-GUI-file-manager ()
    "Open the current directory in native GUI file namanger
  For those times when dired just wont do.
  "
    (interactive)
    (save-window-excursion
      (dired-do-async-shell-command
       "xdg-open .")))

  (defun emms-clear-playlist-if-any ()
    "Clear emms playlist (coming from: https://www.emacswiki.org/emacs/SimpleEmmsUserInterface )."
    (when emms-playlist-buffer
      (with-current-buffer emms-playlist-buffer)
        (emms-playlist-clear)))

  (defun file-audio-or-video-p (file-path)
    "Detect if the FILE-PATH is pointing to a video/audio file or not."
    (let* ((safe-path (replace-regexp-in-string "\"" "\\\"" (expand-file-name file-path)))
           (mime (shell-command-to-string (format "file --mime --brief \"%s\"" safe-path)))
           (type (car (split-string mime "/"))))
      (if (member type '(video audio))
          type
        nil)))

  ;; Disable video output to prevent a stupid new window.
  (defun dired-emms-play ()
    "Play current file from the dired buffer using emms"
    (interactive)
    (let ((file-path (dired-get-filename)))
      (if (or (member (file-name-extension file-path)
                      '("ogg" "mp3" "wav" "mpg" "mpeg" "wmv" "wma" "3gpp"
                        "mov" "avi" "divx" "ogm" "ogv" "asf" "mkv"
                        "rm" "rmvb" "mp4" "flac" "vrob" "m4a" "ape"
                        "flv" "webm"))
              (file-audio-or-video-p file-path))

          (progn
            (emms-play-dired)
            (emms-clear-playlist-if-any))))

    (dired-next-line 1))
#+end_src
*** Main configuration
Hydra mapping for dired taken from https://github.com/abo-abo/hydra/wiki/Dired and adapted.
#+begin_src emacs-lisp
  (use-package dired
    :tags '("FILE_MANAGEMENT")
    :functions
    (diredp-hide-subdir-nomove
     diredp-ediff
     dired-ediff-files
     dired-do-ispell
     diredp-compress-this-file)
    :hydra
    (hydra-dired (:hint nil :color pink)
                 "
    _+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
    _C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
    _D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
    _R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
    _Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
    _S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ ispell
    _r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
    _z_ compress-file  _A_ find regexp
    _Z_ compress       _Q_ repl regexp

    T - tag prefix
    "
                 ("\\" dired-do-ispell)
                 ("(" dired-hide-details-mode)
                 (")" dired-omit-mode)
                 ("+" dired-create-directory)
                 ("=" diredp-ediff)         ;; smart diff
                 ("?" dired-summary)
                 ("$" diredp-hide-subdir-nomove)
                 ("A" dired-do-find-regexp)
                 ("C" dired-do-copy)        ;; Copy all marked files
                 ("D" dired-do-delete)
                 ("E" dired-mark-extension)
                 ("e" dired-ediff-files)
                 ("F" dired-do-find-marked-files)
                 ("G" dired-do-chgrp)
                 ("g" revert-buffer)        ;; read all directories again (refresh)
                 ("i" dired-maybe-insert-subdir)
                 ("l" dired-do-redisplay)   ;; relist the marked or singel directory
                 ("M" dired-do-chmod)
                 ("m" dired-mark)
                 ("O" dired-display-file)
                 ("o" dired-find-file-other-window)
                 ("Q" dired-do-find-regexp-and-replace)
                 ("R" dired-do-rename)
                 ("r" dired-do-rsync)
                 ("S" dired-do-symlink)
                 ("s" dired-sort-toggle-or-edit)
                 ("t" dired-toggle-marks)
                 ("U" dired-unmark-all-marks)
                 ("u" dired-unmark)
                 ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
                 ("w" dired-kill-subdir)
                 ("Y" dired-do-relsymlink)
                 ("z" diredp-compress-this-file)
                 ("Z" dired-do-compress)
                 ("q" nil)
                 ("." nil :color blue))
    :bind
    (:map dired-mode-map
          ("C-o" . dired-omit-mode)
          ("<C-return>" . dired-open-native)
          ("e" . dired-open-externally)
          ("p" . dired-emms-play)
          ("E" . ora-ediff-files)
          ("." . hydra-dired/body))

    :init
    (defun ora-ediff-files ()
      (interactive)
      (let ((files (dired-get-marked-files))
            (wnd (current-window-configuration)))
        (if (<= (length files) 2)
            (let ((file1 (car files))
                  (file2 (if (cdr files)
                             (cadr files)
                           (read-file-name
                            "file: "
                            (dired-dwim-target-directory)))))
              (if (file-newer-than-file-p file1 file2)
                  (ediff-files file2 file1)
                (ediff-files file1 file2))
              (add-hook 'ediff-after-quit-hook-internal
                        (lambda ()
                          (setq ediff-after-quit-hook-internal nil)
                          (set-window-configuration wnd))))
          (error "no more than 2 files should be marked"))))

    :config

    ;; Adapt ls for mac
    (when (eq system-type 'darwin)
      (use-package ls-lisp
        :defines ls-lisp-use-insert-directory-program
        :config
        (setq ls-lisp-use-insert-directory-program t
              insert-directory-program "/usr/local/bin/gls")))

    ;; Omitting
    (setq-default dired-omit-files "^\\.[^.]+"
                  dired-omit-mode t)

    ;; Adapt ls lisp format
    (if (boundp 'ls-lisp-ignore-case)
        (setq ls-lisp-ignore-case t))
    (if (boundp 'ls-lisp-dirs-first)
        (setq ls-lisp-dirs-first t))
    (if (boundp 'ls-lisp-use-localized-time-format)
        (setq ls-lisp-use-localized-time-format t))
    (if (boundp 'ls-lisp-format-time-list)
        (setq ls-lisp-format-time-list '("%Y-%m-%d %H:%M" "%Y-%m-%d %H:%M")))

    (put 'dired-find-alternate-file 'disabled nil)

    (setq dired-dwim-target t

          ;; Compression
          auto-compression-mode t

          ;; Recursive
          dired-recursive-deletes 'top
          dired-recursive-copies 'always

          ;; Details information
          dired-listing-switches "--group-directories-first -alh"
          dired-details-hidden-string "[...]")
    )
#+end_src
*** peep-dired
#+begin_src emacs-lisp
  (use-package peep-dired
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :config
    (define-key dired-mode-map (kbd "P") 'peep-dired))
#+end_src
*** dired-narrow
#+begin_src emacs-lisp
  (use-package dired-narrow
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :config
    (define-key dired-mode-map (kbd "/") 'dired-narrow))
#+end_src
*** dired-single
#+begin_src emacs-lisp
  (use-package dired-single
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :config
    (define-key dired-mode-map [return] 'dired-single-buffer)
    (define-key dired-mode-map [mouse-1] 'dired-single-buffer-mouse))
#+end_src
*** dired-collapse
#+begin_src emacs-lisp
  (use-package dired-collapse
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :disabled t
    :hook
    (dired-mode . dired-collapse-mode))
#+end_src
*** dired-filter
#+begin_src emacs-lisp
  (use-package dired-filter
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :init
    (add-hook 'dired-mode-hook 'dired-filter-group-mode)

    :config
    (setq dired-filter-group-saved-groups
          '(("default"
             ("Directories" (directory))
             ("PDF"
              (extension . "pdf"))
             ("LaTeX"
              (extension "tex" "bib"))
             ("Org"
              (extension . "org"))
             ("Archives"
              (extension "zip" "rar" "gz" "bz2" "tar"))
             ("Multimedia"
              (extension "ogg" "flv" "mpg" "avi" "mp4" "mp3" "mkv" "webm"))
             )))
    )
#+end_src
*** dired-subtree
#+begin_src emacs-lisp
  (use-package dired-subtree
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :bind (:map dired-mode-map
                ("i" . dired-subtree-insert)
                (";" . dired-subtree-remove)))
#+end_src
*** dired-git-info
#+begin_src emacs-lisp
  (use-package dired-git-info
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :bind (:map dired-mode-map
                (")"  . dired-git-info-mode)))
#+END_SRC
#+end_src

*** Images
#+begin_src emacs-lisp
  (use-package image-dired+
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :config
    (setq auto-image-file-mode t)
    (eval-after-load 'image-dired+ '(image-diredx-async-mode 1)))
#+end_src
*** Async
#+begin_src emacs-lisp
  (use-package async
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :after dired
    :config

    (when (require 'dired-aux)
      (progn
        (require 'dired-async))
      (dired-async-mode 1)))
#+end_src
*** Dired / Rsync
#+begin_src emacs-lisp
  (use-package dired-rsync
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :functions dired-do-rsync
    :config
    (bind-key "C-c C-r" 'dired-rsync dired-mode-map))
#+end_src
** Images
*** Visualisation
#+begin_src emacs-lisp
  (use-package image+
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :hydra
    (imagex-sticky-binding () ;; global-map "C-x C-l")
                           "Manipulating Image"
                           ("+" imagex-sticky-zoom-in "zoom in")
                           ("-" imagex-sticky-zoom-out "zoom out")
                           ("M" imagex-sticky-maximize "maximize")
                           ("O" imagex-sticky-restore-original "restore original")
                           ("S" imagex-sticky-save-image "save file")
                           ("r" imagex-sticky-rotate-right "rotate right")
                           ("l" imagex-sticky-rotate-left "rotate left"))



    :hook
    (image-mode . (lambda () (require 'image+) (imagex-sticky-mode)))

    :bind (:map image-mode-map
                ("=" . imagex-sticky-zoom-in)
                ("-" . imagex-sticky-zoom-out)
                ("m" . imagex-sticky-maximize)
                ("g" . imagex-sticky-restore-original)
                ("S" . imagex-sticky-save-image)
                ("r" . imagex-sticky-rotate-right)
                ("l" . imagex-sticky-rotate-left)
                ("/" . imagex-sticky-binding/body))
    )
#+end_src
*** Manipulation
#+begin_src emacs-lisp
  (use-package blimp
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :hook
    (image-mode . blimp-mode))
#+end_src
** Diff
*** Global
#+begin_src emacs-lisp
  (use-package ediff
    :tags '("FILE_MANAGEMENT")
    :config
    (autoload 'diff-mode "diff-mode" "Diff major mode" t)
    (setq diff-switches "-u"
          ediff-auto-refine-limit (* 2 14000)
          ediff-window-setup-function 'ediff-setup-windows-plain
          ediff-split-window-function
          (lambda (&optional arg)
            (if (> (frame-width) 160)
                (split-window-horizontally arg)
              (split-window-vertically arg)))))
#+end_src
*** Helpers for region diff
#+begin_src emacs-lisp
  (defun diff-region ()
    "Select a region to compare"
    (interactive)
    (when (use-region-p) ; there is a region
      (let (buf)
        (setq buf (get-buffer-create "*Diff-regionA*"))
        (save-current-buffer
          (set-buffer buf)
          (erase-buffer))
        (append-to-buffer buf (region-beginning) (region-end)))
      )
    (message "Now select other region to compare and run `diff-region-now`"))

  (defun diff-region-now ()
    "Compare current region with region already selected by `diff-region`"
    (interactive)
    (when (use-region-p)
      (let (bufa bufb)
        (setq bufa (get-buffer-create "*Diff-regionA*"))
        (setq bufb (get-buffer-create "*Diff-regionB*"))
        (save-current-buffer
          (set-buffer bufb)
          (erase-buffer))
        (append-to-buffer bufb (region-beginning) (region-end))
        (ediff-buffers bufa bufb))
      ))
#+end_src
** Tramp
#+begin_src emacs-lisp
  (use-package tramp
    :defer t
    :tags '("FILE_MANAGEMENT")
    :custom (tramp-default-method "ssh"
             password-cache-expiry 60
             tramp-verbose 1
             tramp-auto-save-directory temporary-file-directory)
          ;; ;; Debug
          ;; tramp-verbose 9
          ;; tramp-debug-buffer t)
  )
#+end_src
** Trash
#+begin_src emacs-lisp
  ;; Ask confirmation only once and move to trash
  (setq dired-recursive-deletes 'always)
  (setq delete-by-moving-to-trash t)

  (defun empty-trash()
    "Command to empty the trash (for now gnome/linux specific)"
    (interactive)
    (shell-command "rm -rf ~/.local/share/Trash/*"))

  (defun open-trash-dir()
    "Command to open the trash dir"
    (interactive)
    (find-file "~/.local/share/Trash/files"))
#+end_src
** Treemacs
*** Global
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :bind (:map global-map
                ([f8]        . treemacs))
    :functions (treemacs-follow-mode treemacs-filewatch-mode)

    :config
    (setq treemacs-follow-after-init          t
          treemacs-width                      35
          treemacs-indentation                2
          treemacs-git-integration            t
          treemacs-collapse-dirs              3
          treemacs-silent-refresh             nil
          treemacs-change-root-without-asking nil
          treemacs-sorting                    'alphabetic-desc
          treemacs-show-hidden-files          t
          treemacs-never-persist              nil
          treemacs-is-never-other-window      nil
          treemacs-goto-tag-strategy          'refetch-index)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t))
#+end_src
*** Projectile
#+begin_src emacs-lisp
  (use-package treemacs-projectile
    :ensure t
    :tags '("FILE_MANAGEMENT")
    :functions treemacs-projectile-create-header
    :after treemacs projectile
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header))
#+end_src
*** Magit
#+begin_src emacs-lisp
  (use-package treemacs-magit
    :tags '("FILE_MANAGEMENT")
    :after treemacs magit
    :ensure t)
#+end_src
*** Icons
#+begin_src emacs-lisp
  (use-package treemacs-icons-dired
    :tags '("FILE_MANAGEMENT")
    :ensure t
    :commands (treemacs-icons-dired-mode)
    :hook
    (dired-mode . treemacs-icons-dired-mode))
#+end_src
* Ibuffer
** Filter
#+begin_src emacs-lisp
  (defun my-own-ibuffer-hook ()
    ""
    (interactive)
    (setq ibuffer-saved-filter-groups
          (list
           (cons "default"
                 (append
                  (quote
                   (("Emacs"
                     (or
                      (name . "^[*]scratch[*]$")
                      (name . "^[*]Messages[*]$")))

                    ("Calendar"
                     (or
                      (name . "^[*]?[Cc]alendar.*$")
                      (name . "^diary$")
                      (mode . cfw:calendar-mode)
                      (mode . muse-mode)))

                    ("Todos"
                     (filename . "/todo.org"))

                    ("Emms"
                     (or
                      (mode . emms-mode)
                      (mode . emms-browser-mode)
                      (mode . emms-playlist-mode)))

                    ("RSS/Podcast"
                     (or
                      (name . "rss.org")
                      (name . "^[*]?[Ee]lfeed.*$")
                      (derived-mode . elfeed-search-mode)
                      (derived-mode . elfeed-show-mode)))

                    ("Help"
                     (or
                      (derived-mode . apropos-mode)
                      (derived-mode . help-mode)
                      (derived-mode . Info-mode)))

                    ("Mail"
                     (or
                      (derived-mode . message-mode)
                      (mode . bbdb-mode)
                      (mode . mail-mode)
                      (mode . mu4e-main-mode)
                      (mode . notmuch-headers-mode)
                      (mode . notmuch-view-mode)
                      (name . "^\.bbdb$")
                      (name . "^\.newsrc-dribble")))
                    ("Slack"
                     (or
                      (derived-mode . slack-mode)
                      (name . "^[*]?[Ss]lack.*")))
                    ))

                  (ibuffer-circe-generate-filter-groups-by-server)
                  (ibuffer-tramp-generate-filter-groups-by-tramp-connection)
                  (ibuffer-vc-generate-filter-groups-by-vc-root)

                  (quote
                   (("Dired" (mode . dired-mode))

                    ("Shell"
                     (or
                      (mode . sh-mode)))

                    ("Editing"
                     (or
                      (mode . tex-mode)
                      (mode . latex-mode)
                      (mode . bibtex-mode)
                      (mode . text-mode)))

                    ("Mathematics/Statistics"
                     (or
                      (mode . matlab-mode)
                      (name . "^[*]MATLAB[*]$")
                      (mode . ess-mode)
                      (mode . iESS)))


                    ("Configuration"
                     (or
                      (derived-mode . conf-mode)))

                    ("Web"
                     (or
                      (mode . php-mode)
                      (mode . css-mode)
                      (mode . html-mode)
                      (mode . js2-mode)
                      (mode . scss-mode)
                      (mode . web-mode)))

                    ("Programming"
                     (or
                      (mode . emacs-lisp-mode)
                      (mode . c-mode)
                      (mode . cperl-mode)
                      (mode . python-mode)
                      (mode . c++-mode)
                      (mode . java-mode)
                      (mode . jde-mode)))

                    ("Compiling"
                     (or
                      (mode . groovy-mode)
                      (derived-mode . makefile-mode)))

                    ("Data"
                     (or
                      (mode . csv-mode)
                      (mode . json-mode)
                      (mode . nxml-mode)
                      (mode . ledger-mode)
                      ))

                    ("Org"
                     (or
                      (mode . org-mode)))


                    ("Term"
                     (or
                      (mode . comint-mode)
                      (mode . eshell-mode)
                      (mode . term-mode)))

                    ("Prodigy"
                     (or
                      (name . "^[*]prodigy.*[*]$")))

                    ("Temp"
                     (or
                      (name ."^[*].*[*]$")))
                    )))))))
#+end_src
** Global
#+begin_src emacs-lisp
  (use-package ibuffer
    :tags '("IBUFFER")
    :functions ibuffer-quit
    :hook
    (ibuffer-mode . (lambda ()
                      (my-own-ibuffer-hook)
                      (ibuffer-switch-to-saved-filter-groups "default")
                      (ibuffer-update nil t)))

    :hydra
    (hydra-ibuffer-main (:color pink :hint nil)
                        "
         Ibuffer

   ^Navigation^     ^Mark^         ^Actions^          ^View^
  ------------------------------------------------------------------------
    _k_:    Ê     _m_: mark       _D_: delete        _g_: refresh
   _RET_: visit   _u_: unmark     _S_: save          _s_: sort
    _j_:    v     _*_: specific   _a_: all actions   _/_: filter
  "
                        ("j" ibuffer-forward-line)
                        ("RET" ibuffer-visit-buffer :color blue)
                        ("k" ibuffer-backward-line)

                        ("m" ibuffer-mark-forward)
                        ("u" ibuffer-unmark-forward)
                        ("*" hydra-ibuffer-mark/body :color blue)

                        ("D" ibuffer-do-delete)
                        ("S" ibuffer-do-save)
                        ("a" hydra-ibuffer-action/body :color blue)

                        ("g" ibuffer-update)
                        ("s" hydra-ibuffer-sort/body :color blue)
                        ("/" hydra-ibuffer-filter/body :color blue)

                        ("o" ibuffer-visit-buffer-other-window "other window" :color blue)
                        ("q" ibuffer-quit "quit ibuffer" :color blue)
                        ("." nil "toggle hydra" :color blue))

    (hydra-ibuffer-mark (:color teal :columns 5
                                :after-exit (hydra-ibuffer-main/body))
                        "Mark"
                        ("*" ibuffer-unmark-all "unmark all")
                        ("M" ibuffer-mark-by-mode "mode")
                        ("m" ibuffer-mark-modified-buffers "modified")
                        ("u" ibuffer-mark-unsaved-buffers "unsaved")
                        ("s" ibuffer-mark-special-buffers "special")
                        ("r" ibuffer-mark-read-only-buffers "read-only")
                        ("/" ibuffer-mark-dired-buffers "dired")
                        ("e" ibuffer-mark-dissociated-buffers "dissociated")
                        ("h" ibuffer-mark-help-buffers "help")
                        ("z" ibuffer-mark-compressed-file-buffers "compressed")
                        ("b" hydra-ibuffer-main/body "back" :color blue))

    (hydra-ibuffer-action (:color teal :columns 4
                                  :after-exit
                                  (if (eq major-mode 'ibuffer-mode)
                                      (hydra-ibuffer-main/body)))
                          "Action"
                          ("A" ibuffer-do-view "view")
                          ("E" ibuffer-do-eval "eval")
                          ("F" ibuffer-do-shell-command-file "shell-command-file")
                          ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
                          ("H" ibuffer-do-view-other-frame "view-other-frame")
                          ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
                          ("M" ibuffer-do-toggle-modified "toggle-modified")
                          ("O" ibuffer-do-occur "occur")
                          ("P" ibuffer-do-print "print")
                          ("Q" ibuffer-do-query-replace "query-replace")
                          ("R" ibuffer-do-rename-uniquely "rename-uniquely")
                          ("T" ibuffer-do-toggle-read-only "toggle-read-only")
                          ("U" ibuffer-do-replace-regexp "replace-regexp")
                          ("V" ibuffer-do-revert "revert")
                          ("W" ibuffer-do-view-and-eval "view-and-eval")
                          ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
                          ("b" nil "back"))

    (hydra-ibuffer-sort (:color amaranth :columns 3)
                        "Sort"
                        ("i" ibuffer-invert-sorting "invert")
                        ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
                        ("v" ibuffer-do-sort-by-recency "recently used")
                        ("s" ibuffer-do-sort-by-size "size")
                        ("f" ibuffer-do-sort-by-filename/process "filename")
                        ("m" ibuffer-do-sort-by-major-mode "mode")
                        ("b" hydra-ibuffer-main/body "back" :color blue))

    (hydra-ibuffer-filter (:color amaranth :columns 4)
                          "Filter"
                          ("m" ibuffer-filter-by-used-mode "mode")
                          ("M" ibuffer-filter-by-derived-mode "derived mode")
                          ("n" ibuffer-filter-by-name "name")
                          ("c" ibuffer-filter-by-content "content")
                          ("e" ibuffer-filter-by-predicate "predicate")
                          ("f" ibuffer-filter-by-filename "filename")
                          (">" ibuffer-filter-by-size-gt "size")
                          ("<" ibuffer-filter-by-size-lt "size")
                          ("/" ibuffer-filter-disable "disable")
                          ("b" hydra-ibuffer-main/body "back" :color blue))

    :bind
    (:map ibuffer-mode-map
          ("." . hydra-ibuffer-main/body))
    (:map global-map
          ("C-x C-b" . ibuffer))

    :config

    ;; Sub packages
    (use-package ibuffer-git :ensure t)
    (use-package ibuffer-tramp :ensure t)
    (use-package ibuffer-vc :ensure t)
    (use-package ibuffer-circe
      :ensure quelpa
      :quelpa (ibuffer-circe :repo "seblemaguer/ibuffer-circe" :fetcher github)
      :after circe
      :config (require 'circe))

    ;; Use human readable Size column instead of original one
    (define-ibuffer-column size-h
      (:name "Size" :inline t)
      (cond
       ((> (buffer-size) 1000000) (format "%7.3fM" (/ (buffer-size) 1000000.0)))
       ((> (buffer-size) 1000) (format "%7.3fk" (/ (buffer-size) 1000.0)))
       (t (format "%8d" (buffer-size)))))


    ;; Modification time
    (defun get-modification-time-buffer(b)
      "Retrieve the savetime of the given buffer"
      (if (buffer-file-name b)
          (format-time-string "%Y-%m-%d %H:%M:%S"
                              (nth 5 (file-attributes (buffer-file-name b))))
        ""))

    (define-ibuffer-column last-modification
      (:name "Last modification time" )
      (get-modification-time-buffer buffer))

    ;; Ibuffer entry format
    (setq ibuffer-formats
          '((mark modified read-only
                  (name 30 30 :left :elide) " "
                  (size-h 9 -1 :right) " "
                  (mode 20 20 :left :elide) " "
                  ;; (eproject 16 16 :left :elide)      " "
                  (git-status 8 8 :left)" "
                  (last-modification 30 30 :left :elide)  " "
                  filename-and-process)))

    ;; Update
    (defadvice ibuffer-update (around ibuffer-preserve-prev-header activate)
      "Preserve line-header used before Ibuffer if it doesn't set one"
      (let ((prev-line-header header-line-format))
        ad-do-it
        (unless header-line-format
          (setq header-line-format prev-line-header))))


    (setq ibuffer-default-sorting-mode 'major-mode  ;; Sorting
          ibuffer-show-empty-filter-groups nil      ;; Ignore empty groups
          ibuffer-marked-char ?â               ;; Change the marking symbol
          )

    ;; Collapsing some buffer groups
    (setq mp/ibuffer-collapsed-groups
          (list "Calendar" "Todos" "Prodigy"
                "Emms" "RSS/Podcast"
                "Temp" "Help" "*Tramp*"))

    (defadvice ibuffer (after collapse)
      (dolist (group mp/ibuffer-collapsed-groups)
        (progn
          (goto-char 1)
          (when (search-forward (concat "[ " group " ]") (point-max) t)
            (progn
              (move-beginning-of-line nil)
              (ibuffer-toggle-filter-group)
              )
            )
          )
        )
      (goto-char 1)
      (search-forward "[ " (point-max) t)
      )
    (ad-activate 'ibuffer))
#+end_src
** Helpers
#+begin_src emacs-lisp
  (defun ibuffer-clean ()
    "Clean automatically created buffers"
    (interactive)
    (ibuffer-unmark-all ?*)
    (ibuffer-mark-by-mode 'help-mode)
    (ibuffer-mark-by-mode 'magit-mode)
    (ibuffer-mark-by-mode 'occur-mode)
    (ibuffer-mark-by-mode 'grep-mode)
    (ibuffer-mark-by-mode 'dired-mode)
    (ibuffer-mark-by-mode 'completion-list-mode)
    (ibuffer-mark-by-mode 'compilation-mode)
    (ibuffer-mark-by-mode 'Man-mode)
    (ibuffer-mark-by-mode 'browse-kill-ring-mode)
    (ibuffer-mark-by-name-regexp "*anything*")
    (ibuffer-mark-by-name-regexp "*ESS*")
    (ibuffer-mark-by-name-regexp "*Shell Command Output*")
    (ibuffer-mark-by-name-regexp "*Compile-Log*")
    (ibuffer-mark-by-name-regexp "*vc-diff*")
    (ibuffer-do-delete))
#+END_SRC
* Notification
** Sauron
#+begin_src emacs-lisp
  (use-package sauron
    :ensure t
    :tags '("NOTIFICATION")
    :pin MELPA
    :config

    ;;
    (setq sauron-separate-frame nil ;; The notification is on the same window ?
          sauron-sticky-frame t
          sauron-max-line-length nil ;; No max. length for the line
          sauron-modules '(sauron-org sauron-elfeed) ;; reduced the default modules
          sauron-column-alist '( ( timestamp  .  20)
                                 ( origin     .  20)
                                 ( priority   .   4)
                                 ( message    . nil)))
    (sauron-start-hidden))
#+end_src
** Alert
#+begin_src emacs-lisp
  (use-package alert
    :ensure t
    :tags '("NOTIFICATION")
    :after sauron
    :bind
    (("<f7>"   . sauron-mode-line-toggle-hide-show)
     ("C-<f7>" . sauron-mode-line-clear))

    :init

    (defvar sauron-mode-line-current-level 0
      "The current level associated with the modeline higlight alert.")

    (defvar sauron-mode-line-threshold 1
      "The mode coloring highlight threshold. If current level is
      below, mode-line is sticking to its current state.")

    (defface sauron-mode-line-backup-face nil
      "The face which store the backup default mode."
      :group 'alert)

    (defun sauron-mode-line-clear ()
      "Helper to clear the content of the sauron log and reset the mode-line status."
      (interactive)
      (progn
        (when (> sauron-mode-line-current-level sauron-mode-line-threshold)
          (progn
            (copy-face 'sauron-mode-line-face 'mode-line)
            (setq sauron-mode-line-current-level 0)))
        (sauron-clear)))

    (defun sauron-mode-line-toggle-hide-show ()
      "Helper to show/hide the sauron part and reset the mode-line status."
      (interactive)
      (progn
        (sauron-toggle-hide-show)
        (when (> sauron-mode-line-current-level sauron-mode-line-threshold)
          (progn
            (copy-face 'backup-mode-line-face 'mode-line)
            (setq sauron-mode-line-current-level 0)))))

    :config

    ;; ==============================================================================================================

    (defcustom sauron-mode-line-priorities
      '((urgent   . 5)
        (high     . 4)
        (moderate . 3)
        (normal   . 2)
        (low      . 1)
        (trivial  . 0))
      "A mapping of alert severities onto Growl priority values."
      :type '(alist :key-type symbol :value-type integer)
      :group 'alert)

    (defun alert-sauron-notify (info)
      (sauron-add-event (if (plist-get info :category)
                            (if (symbolp (plist-get info :category))
                                (plist-get info :category)
                              (intern (plist-get info :category)))
                          (if (plist-get info :title)
                            (if (symbolp (plist-get info :title))
                                (plist-get info :title)
                              (intern (plist-get info :title)))
                            'unknown))
                        (cdr (assq (plist-get info :severity) sauron-mode-line-priorities))
                        (plist-get info :message)))

    (alert-define-style 'sauron :title "Use sauron as a backend for alert"
                        :notifier #'alert-sauron-notify
                        :continue t
                        :remover #'alert-message-remove)

    ;; ==============================================================================================================

    (defun sauron-mode-line-notifier (info)
      "Alert mode-line flashing style notifier."
      ;; First time => copy the current mode line face
      (when (<= sauron-mode-line-current-level sauron-mode-line-threshold)
        (copy-face 'mode-line 'backup-mode-line-face))

      ;; Change the policy
      (when (and (> (cdr (assq (plist-get info :severity) sauron-mode-line-priorities))
                    sauron-mode-line-threshold)
                 (> (cdr (assq (plist-get info :severity) sauron-mode-line-priorities))
                    sauron-mode-line-current-level))
        (progn
          (set-face-attribute 'mode-line nil
                              :background (cdr (assq (plist-get info :severity)
                                                     alert-severity-colors)))
          ))

      ;; Change current level if this one is upper
      (when (> (cdr (assq (plist-get info :severity) sauron-mode-line-priorities))
               sauron-mode-line-current-level)
        (setq sauron-mode-line-current-level (cdr (assq (plist-get info :severity)
                                                        sauron-mode-line-priorities))))
      ;; Print the message everytime !
      (alert-sauron-notify info))

    (alert-define-style
     'sauron-mode-line-style
     :title "Sauron/flashing mode line style"
     :notifier 'sauron-mode-line-notifier
     :continue t
     :remover #'alert-message-remove)

    (setq sauron-min-priority sauron-mode-line-threshold)
    (setq alert-default-style 'sauron-mode-line-style))
#+end_src
* System
** Docker
#+begin_src emacs-lisp
  (use-package docker
    :ensure t
    :commands (docker)
    :tags '("OS"))

  (use-package docker-api
    :ensure t
    :tags '("OS"))

  (use-package docker-tramp
    :ensure t
    :tags '("OS"))

  (use-package dockerfile-mode
    :ensure t
    :tags '("OS"))
#+end_src
** SSH
#+begin_src emacs-lisp
  (use-package ssh
    :ensure t
    :tags '("OS"))

  (use-package ssh-deploy
    :ensure t
    :tags '("OS"))
#+end_src
** Slurm
#+BEGIN_SRC emacs-lisp
 (use-package slurm-mode
    :ensure quelpa
    :quelpa (slurm :repo "ffevotte/slurm.el" :fetcher github))
#+END_SRC
** Cron
#+BEGIN_SRC emacs-lisp
  (use-package crontab-mode
    :ensure t)
#+END_SRC
** Monitoring
#+begin_src emacs-lisp
  (use-package symon
    :ensure t
    :tags '("OS"))
#+end_src
** Clipboard
#+begin_src emacs-lisp
  (use-package cliphist
    :ensure t
    :tags '("OS"))
#+end_src
** Execute with shell environment
https://github.com/purcell/exec-path-from-shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (setq exec-path-from-shell-arguments nil)
    (exec-path-from-shell-initialize))
#+end_src
** systctl
#+begin_src emacs-lisp
  (use-package sysctl :ensure t :commands (sysctl))
#+end_src
** Locate
#+begin_src emacs-lisp
  (use-package ellocate
    :ensure t
    :commands (ellocate))
#+end_src
** COMMENT unison interaction
#+begin_src emacs-lisp
  (use-package unison
    :ensure t
    :tags '("OS"))
#+end_src
** System package
#+begin_src emacs-lisp
  (use-package system-packages
      :ensure t
      :tags '("CORE")
      :config
      (setq system-packages-supported-package-managers
            '(
              (trizen .
                      ((default-sudo . nil)
                       (install . "trizen -S --noconfirm")
                       (search . "trizen -Ss")
                       (uninstall . "trizen -Rns")
                       (update . "trizen -Syu --noconfirm")
                       (clean-cache . "trizen -Sc")
                       (log . "cat /var/log/trizen.log")
                       (get-info . "trizen -Qi")
                       (get-info-remote . "trizen -Si")
                       (list-files-provided-by . "trizen -Ql")
                       (verify-all-packages . "trizen -Qkk")
                       (verify-all-dependencies . "trizen -Dk")
                       (remove-orphaned . "trizen -Rns $(trizen -Qtdq)")
                       (list-installed-packages . "trizen -Qe")
                       (list-installed-packages-all . "trizen -Q")
                       (list-dependencies-of . "trizen -Qi")
                       (noconfirm . "--noconfirm")))
              )

            system-packages-use-sudo nil
            system-packages-package-manager 'trizen)
      )
#+end_src
* Internet/network
** Globalize clickable url
#+begin_src emacs-lisp
  ;; Activate clickage everywhere
  (use-package goto-addr
    :tags '("CONNECTED")
    :config
    (define-globalized-minor-mode global-goto-address-mode
      goto-address-mode goto-address-mode :group 'goto-address)

    (global-goto-address-mode)

    (define-globalized-minor-mode global-goto-address-prog-mode
      goto-address-prog-mode goto-address-prog-mode :group 'goto-address))
#+end_src
** Searching
*** Google
#+begin_src emacs-lisp
  (use-package google
    :ensure t
    :tags '("CONNECTED"))

  (use-package google-maps
    :ensure t
    :tags '("CONNECTED"))

  (use-package google-translate
    :ensure t
    :tags '("CONNECTED"))
#+end_src
*** Youtube
#+begin_src emacs-lisp
  (use-package ivy-youtube
    :ensure t
    :tags '("CONNECTED"))
#+end_src
*** Codesearch
#+begin_src emacs-lisp
  (use-package counsel-codesearch
    :ensure t
    :tags '("CONNECTED"))
#+end_src
** IRC
*** Global
#+begin_src emacs-lisp
  (use-package circe
    :ensure t
    :tags '("CONNECTED")
    :bind ("<S-f2>" . circe-init)
    :hook
    (circe-chat-mode . disable-global-facilities)

    :config

    ;; Defining the networks
    (setq circe-network-options
          '(("bitlbee"
             :nick "lemagues"
             :server-buffer-name "â bitlbee"
             :nickserv-password my-irc-password
             :nickserv-mask "\\(bitlbee\\|root\\)!\\(bitlbee\\|root\\)@"
             :nickserv-identify-challenge "use the \x02identify\x02 command to identify yourself"
             :nickserv-identify-command "PRIVMSG nickserv :identify {password}"
             :nickserv-identify-confirmation "Password accepted, settings and accounts loaded"
             :channels ("&bitlbee")
             :host "localhost"
             :service "6667")

            ("Freenode"
             :tls t
             :nick "slemaguer"
             :channels (:after-auth "#limsi")
             :nickserv-password my-irc-password
             :server-buffer-name "â freenode")

            ("gitter"
             :tls t
             :nick "seblemaguer"
             :sasl-username "seblemaguer"
             :sasl-password my-irc-password
             :server-buffer-name "â gitter"
             :host"irc.gitter.im"
             :service "6667")
            ))

    ;; Completion
    (setq circe-use-cycle-completion t)

    ;; Spam information reduction
    (setq circe-reduce-lurker-spam t)

    ;; Tracking
    (setq lui-track-bar-behavior 'before-switch-to-buffer)
    (enable-lui-track-bar)

    ;; spell checking
    (add-hook 'circe-channel-mode-hook 'turn-on-flyspell)
    (setq lui-max-buffer-size 30000
          lui-flyspell-p t
          lui-flyspell-alist '(("limsi" "francais")
                               ("IvanaDidirkova" "francais")
                               ("." "american")))

    ;; Formatting / Visual
    (enable-circe-color-nicks)
    (setq lui-time-stamp-position 'right-margin
          lui-time-stamp-format "[%Y-%m-%d %H:%M:%S]"
          lui-fill-type nil)
    (enable-circe-display-images)

    (defun my-lui-setup ()
      (setq
       fringes-outside-margins t
       right-margin-width 21
       word-wrap t
       wrap-prefix "    "))
    (add-hook 'lui-mode-hook 'my-lui-setup)

    ;; Connection
    (defun circe-network-connected-p (network)
      "Return non-nil if there's any Circe server-buffer whose
    `circe-netwok' is NETWORK."
      (catch 'return
        (dolist (buffer (circe-server-buffers))
          (with-current-buffer buffer
            (if (string= network circe-network)
                (throw 'return t))))))

     (defun circe-maybe-connect (network)
       "Connect to NETWORK, but ask user for confirmation if it's
    already been connected to."
       (interactive "sNetwork: ")
       (if (or (not (circe-network-connected-p network))
               (y-or-n-p (format "Already connected to %s, reconnect?" network)))
           (circe network)))

     (defun my-irc-password (server)
       "Return the password for the `SERVER'."
       (my:auth-source-get-passwd :host server))

     ;; Shortcut
     (defun circe-init ()
       "Connect to IRC"
       (interactive)
       (if (circe-network-connected-p "bitlbee")
           (switch-to-buffer "&bitlbee")
         (progn
           ;; (circe-maybe-connect "Freenode")
           (circe-maybe-connect "bitlbee"))))
    )
#+end_src
*** Logging
#+begin_src emacs-lisp
  (use-package lui-logging
    :tags '("CONNECTED")
    :commands (enable-lui-logging))

#+end_src
*** Autopasting
#+begin_src emacs-lisp
  (use-package lui-autopaste
    :tags '("CONNECTED")
    :config
    (add-hook 'circe-channel-mode-hook 'enable-lui-autopaste)
    (defvar lui-autopaste-service-gist-url nil
      "The URL for the last gist.")

    (defun lui-autopaste-service-gist (text)
      "Paste TEXT to github using gist.el."
      ;; It's so great gist works with callbacks! It's so much fun to
      ;; work around that!
      (setq lui-autopaste-service-gist-url 'waiting)
      (with-temp-buffer
        (insert text)
        (gist-region (point-min) (point-max) nil
                     (lambda (gist)
                       (when (eq lui-autopaste-service-gist-url
                                 'waiting)
                         (setq lui-autopaste-service-gist-url
                               (oref gist :html-url)))))) ;; FIXME: this provokes a Warning: Unknown slot â:html-urlâ
      (let ((wait 0))
        (while (and (< wait 10)
                    (eq lui-autopaste-service-gist-url
                        'waiting))
          (sit-for 0.1 )
          (setq wait (1+ wait))))
      (if (eq lui-autopaste-service-gist-url 'waiting)
          (progn
            (setq lui-autopaste-service-gist-url nil)
            (error "Couldn't create gist"))
        (prog1 lui-autopaste-service-gist-url
          (setq lui-autopaste-service-gist-url nil))))


    (setq lui-autopaste-function 'lui-autopaste-service-gist))
#+end_src
*** Some coloring
#+begin_src emacs-lisp
  (use-package lui-irc-colors
    :tags '("CONNECTED")
    :after circe
    :config
    (add-to-list 'lui-pre-output-hook 'lui-irc-colors))
#+end_src
*** Notification
#+begin_src emacs-lisp
  (use-package circe-notifications
    :ensure t
    :commands (enable-circe-notifications)
    :custom (circe-notifications-alert-style 'sauron-mode-line-style)
    :hook
    (circe-server-connected . enable-circe-notifications))
#+end_src
** Slack
#+BEGIN_SRC emacs-lisp
  (use-package slack
    :ensure t
    :tags '("CONNECTED")
    :commands (slack-start)
    :no-require t
    :defines (url-http-method url-http-data url-http-extra-headers url-callback-function url-callback-arguments oauth--token-data)
    :init
    (setq slack-buffer-emojify t)

    :config

    ;; Adaptcentre
    (defvar adapt-client-id (replace-regexp-in-string "\\^.*$" "" (my:auth-source-get-user :host "adaptcentre"))
      "ID for the adapt slack team.")
    (slack-register-team
     :name "adaptcentre"
     :default t
     :client-id adapt-client-id
     :client-secret (my:auth-source-get-passwd :host "adaptcentre" :user (format "%s^secret" adapt-client-id))
     :token (my:auth-source-get-passwd :host "adaptcentre" :user (format "%s^token" adapt-client-id))
     :subscribed-channels '(general hpc-users location tools_and_kits)
     :full-and-display-names t)

    ;; Stack b
    (defvar stackb-client-id (replace-regexp-in-string "\\^.*$" "" (my:auth-source-get-user :host "stack-b"))
          "ID for the stack-b slack team")
    (slack-register-team
     :name "stack-b"
     :client-id stackb-client-id
     :client-secret (my:auth-source-get-passwd :host "stack-b" :user (format "%s^secret" stackb-client-id))
     :token (my:auth-source-get-passwd :host "stack-b" :user (format "%s^token" stackb-client-id))
     :subscribed-channels '(general random social)
     :full-and-display-names t))
#+END_SRC
** Mail
*** TTLS
  #+begin_src emacs-lisp
    (use-package starttls
      :tags '("CONNECTED")
      :config
      (setq starttls-use-gnutls t
            starttls-gnutls-program "gnutls-cli"
            starttls-extra-arguments '("--insecure")
            auth-sources '("~/.authinfo.gpg")))

  #+end_src
*** Message composition
#+begin_src emacs-lisp
  (use-package message
    :tags '("REQUIRES_CONNECTION" "MAIL")
    :hook
    (message-mode . flyspell-mode)
    (message-mode . disable-global-facilities)
    (message-setup . (lambda () (footnote-mode t)))

    :config
    (setq message-auto-save-directory nil
          message-citation-line-function 'message-insert-formatted-citation-line
          message-citation-line-format  "\n\n-----------------------\nOn %a, %b %d %Y (%-H:%M %Z), %N wrote:\n"
          message-sendmail-f-is-evil nil
          message-kill-buffer-on-exit t
          message-signature-file (format "%s/third_parties/mail/signature" user-emacs-directory)
          message-fill-column 100)
    )
#+end_src
*** Composing/Sending
  #+begin_src emacs-lisp
    (use-package smtpmail-multi
      :ensure t
      :tags '("REQUIRES_CONNECTION" "MAIL")
      :config

      (setq user-full-name "SÃ©bastien Le Maguer"
            smtpmail-multi-accounts
            '(
              (tcd . ("lemagues@tcd.ie"
                      "smtp.office365.com"
                      587
                      "lemagues@tcd.ie"
                      starttls
                      nil nil nil))
              (adaptgmail . ("sebastien.lemaguer@adaptcentre.ie"
                             "smtp.gmail.com"
                             587
                             "sebastien.lemaguer@adaptcentre.ie"
                             starttls
                             nil nil nil))
              (sebgmail . ("seb.lemaguer@gmail.com"
                           "smtp.gmail.com"
                           587
                           "seb.lemaguer@gmail.com"
                           starttls
                           nil nil nil))
              (coli . ("slemaguer"
                       "smtp.coli.uni-saarland.de"
                       587
                       "slemaguer@coli.uni-saarland.de"
                       starttls
                       nil nil nil)))

            smtpmail-multi-associations
            '(("lemagues@tcd.ie" tcd)
              ("sebastien.lemaguer@adaptcentre.ie" adaptgmail)
              ("slemaguer@coli.uni-saarland.de" coli)
              ("seb.lemaguer@gmail.com" sebgmail))

            smtpmail-multi-default-account 'tcd
            message-send-mail-function 'smtpmail-multi-send-it
            mail-host-address "tcd.ie"

            ;; Debug part
            smtpmail-debug-info nil
            smtpmail-debug-verbose nil)
      )
  #+end_src
*** Mu4e
**** Global
#+begin_src emacs-lisp
    (use-package mu4e
      :tags '("REQUIRES_CONNECTION" "MAIL")
      :commands (mu4e)
      :bind (
             ([f2] . mu4e)
             )
      :hook
      (mu4e-compose-mode . format-hook-message)

      :custom
      ;; File management
      (mu4e-maildir "~/mail")
      (mu4e-attachment-dir "~/Downloads")
      (mu4e-change-filenames-when-moving t)

      ;; User interaction
      (mu4e-hide-index-messages t)
      (mu4e-compose-context-policy 'ask-if-none)
      (mu4e-confirm-quit nil)
      (mu4e-compose-dont-reply-to-self t)
      (mu4e-update-interval nil)

      ;; Gui
      (mu4e-view-show-addresses t)
      (mu4e-view-show-images t)
      (mu4e-view-use-gnus t)
      (mu4e-use-fancy-chars t)

      :config

      (add-to-list 'mu4e-view-actions
                   '("ViewInBrowser" . mu4e-action-view-in-browser) t)

      ;; use imagemagick, if available
      (when (fboundp 'imagemagick-register-types)
        (imagemagick-register-types))

      (defun format-hook-message ()
        "Specify some formatting rules for email message writing."
        (set-fill-column 100)
        (auto-fill-mode 0)
        (visual-fill-column-mode)
        (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
        (visual-line-mode))
      )
#+end_src
**** Context (mailboxes separation)
#+begin_src emacs-lisp
  (use-package mu4e-context
    :tags '("REQUIRES_CONNECTION" "MAIL")
    :config
    (setq mu4e-context-policy 'pick-first
          ;; mu4e-compose-context-policy nil
          mu4e-contexts `(

                          ,(make-mu4e-context
                            :name "TCD"
                            :enter-func (lambda () (mu4e-message "Entering TCD context"))
                            :leave-func (lambda () (mu4e-message "Leaving TCD context"))

                            ;; Match the proper maildir
                            :match-func (lambda (msg)
                                          (when msg
                                            (string-match-p "^/TCD" (mu4e-message-field msg :maildir))))

                            ;; Define the proper directory architecture
                            :vars '((user-mail-address  . "lemagues@tcd.ie")
                                    (user-full-name     . "SÃ©bastien Le Maguer")
                                    (mu4e-sent-folder   . "/TCD/Sent Items")
                                    (mu4e-draft-folder  . "/TCD/Drafts")
                                    (mu4e-trash-folder  . "/TCD/Deleted Items")
                                    (mu4e-refile-folder . "/TCD/Archive")
                                    )
                            )


                          ;; FIXME: adapt everything properly
                          ,(make-mu4e-context
                            :name "AdaptGmail"
                            :enter-func (lambda () (mu4e-message "Entering AdaptGmail context"))
                            :leave-func (lambda () (mu4e-message "Leaving AdaptGmail context"))

                            ;; Match the propoer maildir
                            :match-func (lambda (msg)
                                          (when msg
                                            (string-match-p "^/AdaptGmail" (mu4e-message-field msg :maildir))))

                            ;; Define the proper directory architecture
                            :vars '((user-mail-address  . "sebastien.lemaguer@adaptcentre.ie")
                                    (user-full-name     . "SÃ©bastien Le Maguer")
                                    (mu4e-sent-folder   . "/AdaptGmail/sent")
                                    ;; (mu4e-draft-folder  . "/AdaptGmail/Drafts")
                                    (mu4e-trash-folder  . "/AdaptGmail/trash")
                                    )
                            )

                          ;; FIXME: adapt everything properly
                          ,(make-mu4e-context
                            :name "SebGmail"
                            :enter-func (lambda () (mu4e-message "Entering SebGmail context"))
                            :leave-func (lambda () (mu4e-message "Leaving SebGmail context"))

                            ;; Match the propoer maildir
                            :match-func (lambda (msg)
                                          (when msg
                                            (string-match-p "^/SebGmail" (mu4e-message-field msg :maildir))))

                            ;; Define the proper directory architecture
                            :vars '((user-mail-address  . "seb.lemaguer@gmail.com")
                                    (user-full-name     . "SÃ©bastien Le Maguer")
                                    (mu4e-sent-folder   . "/SebGmail/sent")
                                    ;; (mu4e-draft-folder  . "/SebGmail/Drafts")
                                    (mu4e-trash-folder  . "/SebGmail/trash")
                                    )
                            )

                          ;; FIXME: adapt everything properly
                          ,(make-mu4e-context
                            :name "HikoGmail"
                            :enter-func (lambda () (mu4e-message "Entering HikoGmail context"))
                            :leave-func (lambda () (mu4e-message "Leaving HikoGmail context"))

                            ;; Match the propoer maildir
                            :match-func (lambda (msg)
                                          (when msg
                                            (string-match-p "^/HikoGmail" (mu4e-message-field msg :maildir))))

                            ;; Define the proper directory architecture
                            :vars '((user-mail-address  . "hikoseb@gmail.com")
                                    (user-full-name     . "Hiko")
                                    (mu4e-sent-folder   . "/HikoGmail/sent")
                                    ;; (mu4e-draft-folder  . "/HikoGmail/Drafts")
                                    (mu4e-trash-folder  . "/HikoGmail/trash")
                                    )
                            )


                          ,(make-mu4e-context
                            :name "Saarland"
                            :enter-func (lambda () (mu4e-message "Entering Saarland context"))
                            :leave-func (lambda () (mu4e-message "Leaving Saarland context"))

                            ;; Match the propoer maildir
                            :match-func (lambda (msg)
                                          (when msg
                                            (string-match-p "^/Saarland" (mu4e-message-field msg :maildir))))

                            ;; Define the proper directory architecture
                            :vars '((user-mail-address  . "slemaguer@coli.uni-saarland.de")
                                    (user-full-name     . "SÃ©bastien Le Maguer")
                                    (mu4e-sent-folder   . "/Saarland/INBOX.Sent")
                                    (mu4e-draft-folder  . "/Saarland/INBOX.Drafts")
                                    (mu4e-trash-folder  . "/Saarland/INBOX.Trash")
                                    )
                            )

                          ;; ,(make-mu4e-context
                          ;;   :name "Lille"
                          ;;   :enter-func (lambda () (mu4e-message "Entering Lille context"))
                          ;;   :leave-func (lambda () (mu4e-message "Leaving Lille context"))

                          ;;   ;; Match the propoer maildir
                          ;;   :match-func (lambda (msg)
                          ;;                 (when msg
                          ;;                   (string-match-p "^/Lille" (mu4e-message-field msg :maildir))))

                          ;;   ;; Define the proper directory architecture
                          ;;   :vars '(
                          ;;           (mu4e-sent-folder   . "/Lille/Sent")
                          ;;           (mu4e-draft-folder  . "/Lille/Drafts")
                          ;;           (mu4e-trash-folder  . "/Lille/Trash")
                          ;;           )
                          ;;   )

                          ;; ,(make-mu4e-context
                          ;;   :name "Irisa"
                          ;;   :enter-func (lambda () (mu4e-message "Entering Irisa context"))
                          ;;   :leave-func (lambda () (mu4e-message "Leaving Irisa context"))

                          ;;   ;; Match the propoer maildir
                          ;;   :match-func (lambda (msg)
                          ;;                 (when msg
                          ;;                   (string-match-p "^/Irisa" (mu4e-message-field msg :maildir))))

                          ;;   ;; Define the proper directory architecture
                          ;;   :vars '(
                          ;;           (mu4e-sent-folder   . "/Irisa/Sent")
                          ;;           (mu4e-draft-folder  . "/Irisa/Drafts")
                          ;;           (mu4e-trash-folder  . "/Irisa/Trash")
                          ;;           )
                          ;;   )
                          )

          mu4e-user-mail-address-list (delq nil
                                            (mapcar (lambda (context)
                                                      (when (mu4e-context-vars context)
                                                        (cdr (assq 'user-mail-address (mu4e-context-vars context)))))
                                                    mu4e-contexts))
          ;; compose with the current context is no context matches;
          ;; default is to ask
          ;;
          )
    )
#+end_src
**** Maildir extension part
#+begin_src emacs-lisp
  (use-package mu4e-maildirs-extension
    :ensure t
    :tags '("REQUIRES_CONNECTION" "MAIL")
    :pin MELPA
    :init
    (setq mu4e-maildirs-extension-hide-empty-maildirs t)
    :config
    (mu4e-maildirs-extension))
#+end_src
**** Notification
#+begin_src emacs-lisp
  (use-package mu4e-alert
    :ensure t
    :after alert
    :tags '("REQUIRES_CONNECTION" "MAIL" "NOTIFICATION")
    :config
    ;; Just notify the counting
    (setq mu4e-alert-email-notification-types '(count))

    ;; Set the style to sauron
    (mu4e-alert-set-default-style 'sauron-mode-line-style)

    ;; Enable everything!
    (mu4e-alert-enable-notifications)
    (mu4e-alert-enable-mode-line-display))
#+end_src
**** Integration with org-mode
#+begin_src emacs-lisp
  (use-package org-mu4e
    :tags '("REQUIRES_CONNECTION" "MAIL"))
#+end_src
** RSS
*** Global
#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t
    :tags '("REQUIRES_CONNECTION" "RSS")
    :commands (elfeed)
    :no-require t
    :bind (([f9] . elfeed))

    :config
    ;; Change the storage directory
    (setq elfeed-db-directory "~/shared/Dropbox/emacs/elfeed")

    ;; Formatting dates
    (setq elfeed-search-date-format '("%Y-%m-%d %H:%M" 17 :left)))
#+end_src
*** Org connection
#+begin_src emacs-lisp
  (use-package elfeed-org
    :ensure t
    :tags '("REQUIRES_CONNECTION" "RSS")
    :no-require t
    :config
    (when (file-exists-p "~/shared/Dropbox/org/organisation/rss.org")
      (progn
        (elfeed-org)
        (setq rmh-elfeed-org-files (list "~/shared/Dropbox/org/organisation/rss.org"))
        (rmh-elfeed-org-process rmh-elfeed-org-files rmh-elfeed-org-tree-id)))

    (elfeed-update-background-start))
#+end_src
*** Goodies
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-goodies
    :ensure t
    :tags '("REQUIRES_CONNECTION" "RSS")
    :disabled t
    :config
    (elfeed-goodies/setup))
#+END_SRC
*** Youtube specificities
#+begin_src emacs-lisp
  (use-package youtube-dl
    :ensure quelpa
    :quelpa (youtube-dl :repo "skeeto/youtube-dl-emacs" :fetcher github)
    :tags '("CONNECTED")
    :bind ("C-x y" . youtube-dl-list)
    :config
    (setq youtube-dl-directory "~/Downloads")

    ;; FIXME: should be moved !
    (defun expose (function &rest args)
      "Return an interactive version of FUNCTION, 'exposing' it to the user."
      (lambda ()
        (interactive)
        (apply function args)))

    (defun elfeed-show-youtube-dl ()
      "Download the current entry with youtube-dl."
      (interactive)
      (pop-to-buffer (youtube-dl (elfeed-entry-link elfeed-show-entry))))

    (cl-defun elfeed-search-youtube-dl (&key slow)
      "Download the current entry with youtube-dl."
      (interactive)
      (let ((entries (elfeed-search-selected)))
        (dolist (entry entries)
          (if (null (youtube-dl (elfeed-entry-link entry)
                                :title (elfeed-entry-title entry)
                                :slow slow))
              (message "Entry is not a YouTube link!")
            (message "Downloading %s" (elfeed-entry-title entry)))
          (elfeed-untag entry 'unread)
          (elfeed-search-update-entry entry)
          (unless (use-region-p) (forward-line)))))

    (defalias 'elfeed-search-youtube-dl-slow
      (expose #'elfeed-search-youtube-dl :slow t))

    (define-key elfeed-show-mode-map "d" 'elfeed-show-youtube-dl)
    (define-key elfeed-search-mode-map "d" 'elfeed-search-youtube-dl)
    (define-key elfeed-search-mode-map "D" 'elfeed-search-youtube-dl-slow)
    (define-key elfeed-search-mode-map "L" 'youtube-dl-list))
#+end_src
*** Notification part
#+begin_src emacs-lisp
  (use-package sauron-elfeed
    :tags '("REQUIRES_CONNECTION" "RSS")
    :config
    (cl-loop for feed in elfeed-feeds
             do (when (member 'mustread (cdr feed))
                  (puthash (car feed) 3 sauron-elfeed-prio-hash))))

#+end_src
** Stackexchange
#+begin_src emacs-lisp
  (use-package sx
    :ensure t
    :tags '("CONNECTED")
    :functions (sx-open-link)
    :config
    (bind-keys :prefix "C-c s"
               :prefix-map my-sx-map
               :prefix-docstring "Global keymap for SX."
               ("q" . sx-tab-all-questions)
               ("i" . sx-inbox)
               ("o" . sx-open-link)
               ("u" . sx-tab-unanswered-my-tags)
               ("a" . sx-ask)
               ("s" . sx-search)))
#+end_src
** Reddit
#+begin_src emacs-lisp
  (use-package md4rd
    :ensure t
    :tags '("CONNECTED")
    :hydra
    (md4rd-hydra (:color blue :hint none)
       "
        _o_: open   _u_: upvote       _e_: expand all     _t_: toggle line
                    _d_: downvote     _c_: collapse all
        "
                 ("u" md4rd-upvote)
                 ("d" md4rd-downvote)
                 ("o" md4rd-open)
                 ("t" md4rd-widget-toggle-line)
                 ("e" md4rd-widget-expand-all)
                 ("c" md4rd-widget-collapse-all))

    :bind (:map md4rd-mode-map
                ("u" . md4rd-upvote)
                ("d" . md4rd-downvote)
                ("o" . md4rd-open)
                ("t" . md4rd-widget-toggle-line)
                ("e" . md4rd-widget-expand-all)
                ("c" . md4rd-widget-collapse-all)
                ("TAB" . widget-forward)
                ("<backtab>" . widget-backward)
                ("/" . md4rd-hydra/body))

    :config
    (setq md4rd-subs-active '(lisp+Common_Lisp emacs)))
#+end_src
** Github
#+begin_src emacs-lisp
  (defun gh-issue-new-url (project title body)
    "Generate the github url based on the PROJECT for the base and as the parameters TITLE and BODY"
    (concat "https://github.com/"
            project
            "/issues/new?title="
            (url-hexify-string title)
            "&body="
            (url-hexify-string body)))

  (defun gh-issue-new-browse (project title body)
    "Open the browser at the issue page"
    (browse-url (gh-issue-new-url project title body)))

  (defun gh-issue-get-project ()
    "Get the project name based on the GH-PROJECT property"
    (org-entry-get (point) "GH-PROJECT" t))

  (defun gh-issue-create ()
    "Create an issue based on the current entry of the org tree"
    (interactive)
    (gh-issue-new-browse (gh-issue-get-project)
                         (org-get-heading t t)
                         (org-export-as 'gfm t)))
#+end_src
* Music
** Global
#+begin_src emacs-lisp
  (use-package emms
    :ensure t
    :tags '("MULTIMEDIA")
    :commands (emms emms-browse-by-artist)
    :bind
    (("<f5>"            . emms-browse-by-artist)
     ("S-<f5>"          . emms-playlist-mode-go)
     ("<XF86AudioPlay>" . emms-pause)
     ("<XF86AudioStop>" . emms-stop)
     ("<XF86AudioPrev>" . emms-previous)
     ("<XF86AudioNext>" . emms-next))

    :config

    (emms-all)

    ;; Use mpv player
    (setq emms-player-list '(emms-player-mpv))

    ;; A minor macos adaptation
    (when (eq system-type 'darwin)
      (setq emms-source-file-gnu-find "/usr/local/bin/gfind"))

    ;; Some behaviour definition
    (setq later-do-interval 0.0001
          emms-directory "~/.emacs.d/emms"
          emms-playlist-buffer-name "*Music*"
          emms-source-file-default-directory (expand-file-name "~/Music")
          emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find
          emms-show-format "NP: %s"
          emms-playlist-default-major-mode 'emms-playlist-mode
          emms-repeat-playlist t
          emms-mode-line-mode-line-function nil  ;; Don't want any info in the mode line
          emms-mode-line-titlebar-function 'emms-mode-line-playlist-current) ;; Put info in the titlebar

    ;; Define a list of radio/streams/...
    (add-to-list 'emms-stream-default-list '("Classic rock radio" "http://internetradio.salue.de:8000/classicrock.mp3" 1 url))

    ;; Visualisation activation/deactivation
    (emms-mode-line nil)
    ;; (emms-playing-time-disable-display)

    ;; Enable cache
    (when (fboundp 'emms-cache)
      (emms-cache 1))

    ;; Adapt track description format
    (defun track-description (track)
      "Return a description of the current TRACK."
      (if (and (emms-track-get track 'info-artist)
               (emms-track-get track 'info-title))
          (let ((pmin (emms-track-get track 'info-playing-time-min))
                (psec (emms-track-get track 'info-playing-time-sec))
                (ptot (emms-track-get track 'info-playing-time))
                (art  (emms-track-get track 'info-artist))
                (tit  (emms-track-get track 'info-title))
                (alb  (emms-track-get track 'info-album)))
            (cond ((and pmin psec) (format "%s - %s - %s [%02d:%02d]" art alb tit pmin psec))
                  (ptot (format  "%s - %s - %s [%02d:%02d]" art alb tit (/ ptot 60) (% ptot 60)))
                  (t (emms-track-simple-description track))))
        (emms-track-simple-description track)))
    (setq emms-track-description-function 'track-description)

    ;; taken from http://emacs.stackexchange.com/questions/21747/emms-how-can-i-have-a-progress-bar?rq=1
    (defun emms-indicate-seek (_sec)
      "Show the progress bar when seek."
      (let* ((total-playing-time (emms-track-get
                                  (emms-playlist-current-selected-track)
                                  'info-playing-time))
             (elapsed/total (/ (* 100 emms-playing-time) total-playing-time)))
        (with-temp-message (format "[%-100s] %2d%% ([%02d:%02d]/[%02d:%02d])"
                                   (make-string elapsed/total ?=)
                                   elapsed/total
                                   (/ emms-playing-time 60) (% emms-playing-time 60)
                                   (/ total-playing-time 60) (% total-playing-time 60))
          (sit-for 2))))
    (add-hook 'emms-player-seeked-functions #'emms-indicate-seek 'append))

  (use-package emms-info-libtag
    :after emms
    :config

    (setq emms-info-asynchronously nil
          emms-info-functions '(emms-info-libtag)))
#+end_src
** Tagging using emms
I actually use this part for minor correction. The tags are done when abcde is converting the cd
#+begin_src emacs-lisp
  (use-package emms-mark-ext
    :ensure t
    :tags '("MULTIMEDIA")
    :hook
    (emms-playlist-mode . emms-mark-ext-hook)
    :commands (emms-mark-ext-hook))
#+end_src
** Browser
#+begin_src emacs-lisp
  (use-package emms-browser
    :after emms
    :tags '("MULTIMEDIA")
    :hook
    (emms-browser-show-display . (lambda () (hl-line-mode 1)))

    :config
    (emms-browser-make-filter "all-files" (emms-browser-filter-only-type 'file))

    (setq emms-browser-info-artist-format "%iâ¢ %n"
          emms-browser-info-album-format "%i%cS [%y] %n"
          emms-browser-info-title-format "%iâª %T. %t [%d]"
          emms-browser-playlist-info-album-format "%cS %a - %A : "
          emms-browser-playlist-info-title-format "%T. %t [%d]"))
#+end_src
** Release
#+BEGIN_SRC emacs-lisp
  (use-package ma2oa
    :ensure quelpa
    :quelpa (ma2oa :fetcher github :repo "seblemaguer/ma2oa.el")
    :tags '("CONNECTED")
    :config
    (add-to-list 'org-agenda-files "~/.emacs.d/ma-releases.org"))
#+END_SRC
* Weather
#+begin_src emacs-lisp
  (use-package wttrin
    :ensure t
    :tags '("CONNECTED")
    :commands (wttrin)
    :init
    (setq wttrin-default-cities '("SaarbrÃ¼cken" "Lannion" "Sofia")))
#+end_src
* Productivity behavior
This part is dedicated to ensure productivity configuration. This involves mainly isolating,
capturing and bibliography.
** Dark room
Sometimes I just want to ignore everything except the current document. Darkroom is exactly designed for that
#+begin_src emacs-lisp
  (use-package darkroom
    :ensure t
    :tags '("PRODUCTION"))
#+end_src
** ORG/Web tools
Org-web-tools is a nice package which allows to sniff a webpage and convert it into org-mode
format. This is really useful to homogeneise documentation.
#+begin_src emacs-lisp
  (use-package org-web-tools
    :ensure t
    :tags '("CONNECTED"))
#+end_src
** Biblio
This part focus on bibliography/library configuration. The goal is to have a global configuration to
organize read papers or "to read" papers. This is mainly based on https://codearsonist.com/reading-for-programmers
#+begin_src emacs-lisp
  (use-package ivy-bibtex
    :ensure t
    :tags '("PRODUCTION")
    :config
    (setq ivy-bibtex-bibliography "~/shared/Dropbox/org/work/biblio/index.bib" ;; where your references are stored
          ivy-bibtex-library-path "~/shared/Dropbox/org/work/biblio/lib/" ;; where your pdfs etc are stored
          ivy-bibtex-notes-path "~/shared/Dropbox/org/work/biblio/index.org" ;; where your notes are stored
          bibtex-completion-bibliography "~/shared/Dropbox/org/work/biblio/index.bib" ;; writing completion
          bibtex-completion-notes-path "~/shared/Dropbox/org/work/biblio/index.org"))

  (use-package org-ref
    :ensure t
    :tags '("ORG")
    :hook
    (org-export-before-parsing . orcp-citeproc)
    :init
    (setq org-ref-completion-library 'org-ref-ivy-cite
          org-ref-notes-directory "~/shared/Dropbox/org/work/biblio"
          org-ref-bibliography-notes "~/shared/Dropbox/org/work/biblio/index.org"
          org-ref-default-bibliography '("~/shared/Dropbox/org/work/biblio/index.bib")
          org-ref-pdf-directory "~/shared/Dropbox/org/work/biblio/lib/"))

  (use-package org-noter
    :ensure t
    :tags '("ORG")
    :bind ("C-x i" . org-noter)
    :config
    (setq org-noter-property-doc-file "INTERLEAVE_PDF"
          org-noter-property-note-location "INTERLEAVE_PAGE_NOTE"))

  (use-package gscholar-bibtex
    :ensure t
    :tags '("CONNECTED")
    :commands (gscholar-bibtex)
    )
#+end_src
** Paper
As I write papers, it is useful to have some helper to start to have the inspiration.
#+begin_src emacs-lisp
  (use-package academic-phrases
    :ensure t
    :tags '("CONNECTED"))

  (use-package powerthesaurus
    :ensure t
    :tags '("CONNECTED"))
#+end_src
* Visual
** Mode line
*** Fancy battery
#+BEGIN_SRC emacs-lisp
  (use-package fancy-battery
    :ensure t
    :tags '("VISUAL")
    :config
    (fancy-battery-mode))
#+END_SRC
*** Anzu
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :ensure t
    :tags '("VISUAL")
    :config
    (global-anzu-mode +1))
#+END_SRC
*** Minor mode menu
#+BEGIN_SRC emacs-lisp
  (use-package minions
    :ensure t
    :tags '("VISUAL")
    :config (minions-mode 1))
#+END_SRC
*** Doom modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :tags '("VISUAL")
    :hook (after-init . doom-modeline-mode)

    :init
    (setq doom-modeline-icon t
          doom-modeline-major-mode-icon t
          doom-modeline-buffer-file-name-style 'truncate-upto-project
          doom-modeline-persp-name t
          doom-modeline-checker-simple-format t

          ;; Whether display environment version or not
          doom-modeline-env-version t

          ;; Or for individual languages
          doom-modeline-env-enable-python t
          doom-modeline-env-enable-ruby t
          doom-modeline-env-enable-perl t
          doom-modeline-env-enable-go t
          doom-modeline-env-enable-elixir t
          doom-modeline-env-enable-rust t

          ;; Change the executables to use for the language version string
          doom-modeline-env-python-executable "python"
          doom-modeline-env-ruby-executable "ruby"
          doom-modeline-env-perl-executable "perl"
          doom-modeline-env-go-executable "go"
          doom-modeline-env-elixir-executable "iex"
          doom-modeline-env-rust-executable "rustc"

          ;; Whether display irc notifications or not. Requires `circe' package.
          doom-modeline-irc t
          doom-modeline-irc-stylize 'identity

          ;;
          doom-modeline-checker-simple-format t)

    (defface egoge-display-time
      '((((type x w32 mac))
         ;; #060525 is the background colour of my default face.
         (:foreground "#060525" :inherit bold))
        (((type tty))
         (:foreground "blue")))
      "Face used to display the time in the mode line.")

    ;; This causes the current time in the mode line to be displayed in
    ;; `egoge-display-time-face' to make it stand out visually.
    (setq display-time-string-forms
          '((propertize (concat "[" 24-hours ":" minutes "] ")
                        'face 'egoge-display-time)))

    (display-time)
    )
#+END_SRC
** Global theme
#+begin_src emacs-lisp
  (use-package flatfluc-theme
    :ensure quelpa
    :quelpa (flatfluc-theme :fetcher github :repo "seblemaguer/flatfluc-theme")
    :tags '("VISUAL")
    :config
    (load-theme 'flatfluc t))
#+end_src
** Frame
*** Title
#+begin_src emacs-lisp
  (defun frame-title-format ()
    "Return frame title with current project name, where applicable."
    (let ((file buffer-file-name))
      (if file
          (if (and (bound-and-true-p projectile-mode)
                   (projectile-project-p))
              (concat
               (format "[%s] " (projectile-project-name))
               (replace-regexp-in-string (format "^%s" (projectile-project-p)) "" (file-truename file)))
            (abbreviate-file-name file))
        "%b")))

  (when (display-graphic-p)
    (setq frame-title-format '((:eval (frame-title-format)))))
#+end_src
*** Remove unused part
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
** Window
e2wm is nice to provide (also temporarily) an IDE view functionnality.
#+begin_src emacs-lisp
  (use-package e2wm
    :ensure t
    :tags '("VISUAL")
    :config
    (autoload 'e2wm:dp-edbi "e2wm-edbi" nil t))

  (use-package e2wm-direx
    :ensure t
    :tags '("VISUAL")
    :config
    (setq e2wm:c-code-recipe
          '(| (:left-max-size 40)
              (- (:upper-size-ratio 0.6)
                 tree history)
              (- (:lower-max-size 150)
                 (| (:right-max-size 40)
                    main imenu)
                 sub)))

    (setq e2wm:c-code-winfo
          '((:name main)
            (:name tree    :plugin direx)
            (:name history :plugin history-list)
            (:name imenu   :plugin imenu :default-hide nil)
            (:name sub     :buffer "*info*" :default-hide t)))
    )
#+end_src
** Buffer
*** Org-mode
**** Faces
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :tags '("VISUAL")
    :config

    (setq org-todo-keyword-faces
          '(("TODO"      :background "red1"          :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("MEETING"   :foreground "red1"                              :weight bold)

            ;; Specific helpers
            ("REVIEW"    :background "orange"        :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("MAIL"      :background "purple"        :foreground "black" :weight bold :box (:line-width 2 :style released-button))

            ;; I can't really do anything here!
            ("WAITING"   :background "gold"          :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("DELEGATED" :background "gold"          :foreground "black" :weight bold :box (:line-width 2 :style released-button))

            ;; Done but not complete
            ("CANCELLED" :background "lime green"    :foreground "black" :weight bold :box (:line-width 2 :style released-button))
            ("POSTPONED" :background "lime green"    :foreground "black" :weight bold :box (:line-width 2 :style released-button))

            ;; Done and I don't care to be complete
            ("EVENT"     :foreground "purple"                            :weight bold)
            ("NOTE"      :foreground "purple"                            :weight bold)
            ("RELEASE"   :foreground "purple"                            :weight bold)

            ;; Done and complete
            ("DONE"      :background "forest green"                      :weight bold :box (:line-width 2 :style released-button))
            )


            org-priority-faces '((?A . (:foreground "red" :weight bold))
                                 (?B . (:foreground "orange"  :weight bold))
                                 (?C . (:foreground "orange"))
                                 (?D . (:foreground "forest green"))
                                 (?E . (:foreground "forest green")))))
#+end_src
**** Org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
**** Fancy priority
#+begin_src emacs-lisp
  (use-package org-fancy-priorities
    :ensure t
    :hook
    (org-agenda-mode . org-fancy-priorities-mode)
    (org-mode . org-fancy-priorities-mode)
    :config
    (setq org-fancy-priorities-list
          '((?A . "â") (?B . "â¬") (?C . "â¬") (?D . "â")
            (?1 . "â¡") (?2 . "â®¬") (?3 . "â®®") (?4 . "â")
            (?I . "Imaportant"))))
#+end_src
*** Indentation
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :commands (highlight-indent-guides-mode)
    :hook
    (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'column))
#+end_src
*** Column/line
#+begin_src emacs-lisp
  (use-package fill-column-indicator
    :ensure t
    :tags '("VISUAL")
    :config

    ;; Define a global mode but not sure I am going to use it
    (define-globalized-minor-mode
      global-fci-mode fci-mode
      (lambda ()
        (fci-mode 1))))

  (use-package visual-fill-column
    :tags '("VISUAL")
    :ensure t)

  ;; See column-number
  (column-number-mode t)
  (size-indication-mode t)
#+end_src

*** Paging
#+begin_src emacs-lisp
  (use-package page-break-lines
    :ensure t
    :tags '("VISUAL")
    :diminish page-break-lines-mode
    :config
    (global-page-break-lines-mode t))
#+end_src
*** Parenthesis
**** Smart parents
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :tags '("VISUAL")
    :config

    ;; Activate smartparens globally
    (smartparens-global-mode t)
    (show-smartparens-global-mode t)

    ;; Activate smartparens in minibuffer
    (add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-mode)

    ;; Do not pair simple quotes
    (sp-pair "'" nil :actions :rem))
#+end_src
**** Rainbow delimiter
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :tags '("VISUAL")
    :config

    (custom-set-faces
     '(rainbow-delimiters-mismatched-face ((t (:foreground "white" :background "red" :weight bold))))
     '(rainbow-delimiters-unmatched-face ((t (:foreground "white" :background "red" :weight bold))))

     ;; show parents (in case of rainbow failing !)
     '(show-paren-match ((t (:foreground "white" :background "green" :weight bold))))
     '(show-paren-mismatch ((t (:foreground "white" :background "red" :weight bold)))))

    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
*** Show current function
#+begin_src emacs-lisp
  (which-function-mode 1)
#+end_src
*** Diff
#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :tags '("VISUAL")
    :hook
    (dired-mode . diff-hl-dired-mode-unless-remote)

    :config
    (global-diff-hl-mode)
    (fringe-mode 10))
#+end_src
*** Faces/Colors
**** Rainbow
#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure t
  :commands (rainbow-mode))
#+end_src

**** COMMENT Terminal
#+begin_src emacs-lisp
  (set-face-foreground 'term-color-black "#4d4d4d")
  (set-face-foreground 'term-color-red "#cc9393")
  (set-face-foreground 'term-color-green "#7f9f7f")
  (set-face-foreground 'term-color-yellow "#f0dfaf")
  (set-face-foreground 'term-color-blue "#4169e1")
  (set-face-foreground 'term-color-magenta "#dc8cc3")
  (set-face-foreground 'term-color-cyan "#93e0e3")
  (set-face-foreground 'term-color-white "#dcdccc")
#+end_src
**** Dired (using dired-rainbow)
#+begin_src emacs-lisp
  (use-package dired-rainbow
    :ensure t
    :tags '("VISUAL")
    :init
    (eval-after-load 'dired '(require 'dired-rainbow))

    :config

    (defconst dired-audio-files-extensions
      '("mp3" "MP3" "ogg" "OGG" "flac" "FLAC" "wav" "WAV")
      "Dired Audio files extensions")
    (dired-rainbow-define audio "#329EE8" dired-audio-files-extensions)

    (defconst dired-video-files-extensions
      '("vob" "VOB" "mkv" "MKV" "mpe" "mpg" "MPG" "mp4" "MP4" "ts" "TS" "m2ts"
        "M2TS" "avi" "AVI" "mov" "MOV" "wmv" "asf" "m2v" "m4v" "mpeg" "MPEG" "tp")
      "Dired Video files extensions")
    (dired-rainbow-define video "#455AFC" dired-video-files-extensions)

    (dired-rainbow-define html "#4e9a06" ("htm" "html" "xhtml"))
    (dired-rainbow-define xml "DarkGreen" ("xml" "xsd" "xsl" "xslt" "wsdl"))

    (dired-rainbow-define document "#ce5c00" ("doc" "docx" "odt" "pdb" "pdf" "ps" "rtf" "djvu"))
    (dired-rainbow-define image "#ff4b4b" ("jpg" "png" "jpeg" "gif"))

    (dired-rainbow-define sourcefile "#3F82FD" ("el" "groovy" "gradle" "py" "c" "cc" "h" "java" "pl" "rb"))

    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#ad7fa8" ("zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#e6a8df" ("deb" "rpm"))
    (dired-rainbow-define encrypted "LightBlue" ("gpg" "pgp"))

    (dired-rainbow-define-chmod executable-unix "Green" "-.*x.*")

    (dired-rainbow-define log (:inherit default :italic t) ".*\\.log")
    )
#+end_src
*** Scrolling
#+begin_src emacs-lisp
  (use-package scrollkeeper
    :ensure quelpa
    :quelpa (scrollkeeper :fetcher github :repo "alphapapa/scrollkeeper.el")
    :tags '("VISUAL")
    :general ([remap scroll-up-command] #'scrollkeeper-contents-up
              [remap scroll-down-command] #'scrollkeeper-contents-down))
#+end_src
*** Emoji
#+begin_src emacs-lisp
    (use-package emojify
      :ensure t
      :tags '("VISUAL")
      :functions (emojify-set-emoji-data)
      :hook (circe-chat-mode . emojify-mode)
      :config

      (setq emojify-user-emojis
            '(("(heart)" . (("name" . "Heart")
                            ("image" . "~/.emacs.d/emojis/emojione-v2.2.6-22/2665.png")
                            ("style" . "github")))))

      ;; If emojify is already loaded refresh emoji data
      (when (featurep 'emojify)
        (emojify-set-emoji-data)))

    (use-package company-emoji
      :ensure t
      :tags '("VISUAL"))

    (use-package flycheck-status-emoji
      :ensure t
      :tags '("VISUAL"))
#+end_src
** Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :tags '("VISUAL"))

  (use-package all-the-icons-dired
    :ensure t
    :tags '("VISUAL"))

  (use-package all-the-icons-ivy
    :ensure t
    :tags '("VISUAL"))
#+end_src
** Fonts
#+begin_src emacs-lisp
  (defun set-icon-fonts (CODE-FONT-ALIST)
    "Utility to associate many unicode points with specified fonts."
    (--each CODE-FONT-ALIST
      (-let (((font . codes) it))
        (--each codes
          (set-fontset-font t `(,it . ,it) font)))))

  (defun load-default-fonts ()

    (set-fontset-font "fontset-default" 'unicode "Dejavu Sans Mono")
    (set-face-font 'default "Inconsolata-11")

    ;; The icons you see are not the correct icons until this is evaluated!
    (set-icon-fonts
     '(("fontawesome"
        ;; ï¼   ï     ï     ï      ï     ï
        #xf07c #xf0c9 #xf0c4 #xf0cb #xf017 #xf101)

       ("all-the-icons"
        ;; î¤   î¤¨
        #xe907 #xe928)

       ("github-octicons"
        ;; ï   ï     ï¶     ïµ     ï     ï
        #xf091 #xf059 #xf076 #xf075 #xf016 #xf00a)

       ("Symbola"
        ;; ð    â¨      â      â»    â¼     â      ð       ð½
        #x1d54a #x2a02 #x2205 #x27fb #x27fc #x2299 #x1d54b #x1d53d
        ;; ð¹    ð       ð
        #x1d539 #x1d507 #x1d517))))


  (defun load-fonts (frame)
    (select-frame frame)
    (load-default-fonts))

  (if (daemonp)
      (add-hook 'after-make-frame-functions #'load-fonts)
    (load-default-fonts))
#+end_src
* Keys/shortcuts
** Main Helper
#+begin_src emacs-lisp
  (defhydra hydra-main (:color teal :hint nil)
    "
    Main helper

    Org. related          Help                Zooming        bookmarks          other helpers     completion
    ------------------------------------------------------------------------------------------------------------------
    _c_: org-capture        _f_: function doc.    _+_: zoom in     _b_: list bookmarks  _p_: prodigy        _y_: ivy-yasnippet
    _g_: org-web-get-url    _v_: variable doc.    _-_: zoom out    _B_: bookmark file   _m_: new mail

    Backups
    ------------------------------------------------------------------------------------------------------------------
    _s_: list backups
    _S_: snapshot timemachine

    "
    ("B" bookmark-set)
    ("b" list-bookmarks)
    ("c" counsel-org-capture)
    ("f" describe-function)
    ("g" org-web-tools-read-url-as-org)
    ("m" mu4e-compose-new)
    ("p" prodigy)
    ("s" snapshot-timeline)
    ("S" snapshot-timemachine)
    ("v" describe-variable)
    ("y" ivy-yasnippet)
    ("+" text-scale-increase :color pink)
    ("-" text-scale-decrease :color pink)
    ("<ESC>" nil "quit" :color blue)
    ("q"   nil "cancel" :color blue))

  (global-set-key (kbd "<f1>") 'hydra-main/body)
#+end_src
** Project/Version control
#+begin_src emacs-lisp
  (defhydra hydra-project (:color teal :hint nil)
    "
         Project/Source management

     Projects              Version control        On-the-fly
    ------------------------------------------------------------------------------------------
    _d_: dash projects     _m_: magit             _f_: fixme listing
    _p_: projectile        _t_: travis status     _F_: flycheck

    "
    ("<ESC>" nil "quit")
    ("d"   org-dashboard-display)
    ("p"   hydra-projectile/body)
    ("f"   fic-view-listing)
    ("F"   hydra-flycheck/body)
    ("m"   hydra-magit/body)
    ("t"   show-my-travis-projects)
    ("q"   nil "cancel" :color blue))
  (global-set-key (kbd "<f4>") 'hydra-project/body)
#+end_src
** Global keys
*** Compilation
#+begin_src emacs-lisp
  (defhydra hydra-next-error (global-map "C-x")
      "
  Compilation errors:
  _j_: next error        _h_: first error    _q_uit
  _k_: previous error    _l_: last error
  "
      ("`" next-error     nil)
      ("j" next-error     nil :bind nil)
      ("k" previous-error nil :bind nil)
      ("h" first-error    nil :bind nil)
      ("l" (condition-case err
               (while t
                 (next-error))
             (user-error nil))
       nil :bind nil)
      ("q" nil            nil :color blue))
#+end_src
*** Commenting
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-;") 'comment-region)
  (global-set-key (kbd "C-c C-:") 'uncomment-region)

  (use-package cc-mode
    :config
    (dolist (map (list c-mode-base-map c++-mode-map))
      (define-key map (kbd "C-c C-;") 'comment-region))
    (dolist (map (list c-mode-base-map c++-mode-map))
      (define-key map (kbd "C-c C-:") 'uncomment-region)))
#+end_src
*** Buffers
#+begin_src emacs-lisp
  (global-set-key (kbd "M-G") 'what-line)
#+end_src
*** Windows
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c =") 'compare-windows)
#+end_src
*** Files
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-r") 'counsel-recentf)
  (global-set-key (kbd "C-x C-d") 'dired)

  (global-set-key [(control c) ?1] 'find-name-dired)
  (global-set-key [(control c) ?2] 'find-grep-dired)
  (global-set-key [(control c) ?3] 'grep-find)
#+end_src
*** Mac key remapping
#+begin_src emacs-lisp
  (global-set-key (kbd "<end>") 'move-end-of-line)
  (global-set-key (kbd "<home>") 'move-beginning-of-line)
#+END_SRC
* Finalization
** Load private part
#+begin_src emacs-lisp
  (defvar private-file "~/.emacs.d/private-variables.el"
    "Path to the file which stores my configuration.")

  (when (file-exists-p private-file)
    (load private-file))
#+end_src
** Startup
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq find-file-suppress-same-file-warnings t)
#+end_src
** Scratch
#+begin_src emacs-lisp
  (use-package scratch-ext
    :ensure t
    :tags '("REQUIRES_CONNECTION")
    :hook (after-init . scratch-ext-restore-last-scratch)
    :config
    ;; Org-mode + start folded buffer
    (setq initial-major-mode 'org-mode)
    (set-buffer (get-buffer-create "*scratch*"))
    (set (make-local-variable 'org-startup-folded) t))
#+end_src
** Make travis happy
#+BEGIN_SRC emacs-lisp
(provide 'init)
#+END_SRC
