#+TITLE: Tools configuration
#+AUTHOR: SÃ©bastien Le Maguer
#+EMAIL: lemagues@surface
#+DATE: 19 June 2021
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  fr
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://seblemaguer.github.io/css/main.css" />

* ABCDE
#+begin_src conf :tangle ~/.abcde.conf
  # System defaults for abcde version 2.2.x
  # Nothing in this file is uncommented by default.
  #
  # If you wish to override these system-wide settings, create your own
  # .abcde.conf file in your home directory.

  ACTIONS=cddb,read,getalbumart,encode,tag,move,cue,clean

  # CDDB options
  # Choose whether you want to use CDDB or Musicbrainz. Default is CDDB
  CDDBMETHOD=musicbrainz
  # CDDBURL="http://freedb.musicbrainz.org/~cddb/cddb.cgi"


  # Specify the path to the application. In most cases the application
  # should be in your $PATH as I illustrate below, otherwise you will
  # need to specify the full path. For example: /usr/bin/glyrc
  GLYRC=glyrc
  IDENTIFY=identify
  CONVERT=convert
  DISPLAYCMD=display

  # album art download options (see glyrc's help for details with more detailed
  # examples here: https://github.com/sahib/glyr/wiki/Commandline-arguments).
  # For example use '--formats jpg;jpeg' to only search for JPEG images
  # These options: '--from <provider>' and '--lang <langcode>' might also be useful
  GLYRCOPTS=
  ALBUMARTFILE="cover.jpg"
  ALBUMARTTYPE="JPEG"
  IDENTIFYOPTS="-colorspace RGB -size 600x600"
  CONVERTOPTS=
  DISPLAYCMDOPTS="-resize 512x512 -title abcde_album_art"
  ALBUMARTALWAYSCONVERT="y"

  CDDBPROTO=6

  # FLAC:
  OUTPUTTYPE="flac"
  FLACOPTS='-s -e -V -8'

  # Give the location of the ripping program and pass any extra options,
  # if using libcdio set 'CD_PARANOIA=cd-paranoia'.
  CDPARANOIA=cdparanoia
  CDPARANOIAOPTS="--never-skip=40"

  # Output format and dirs
  OUTPUTDIR=$HOME/tmp/music
  OUTPUTFORMAT='${OUTPUT}/${ARTISTFILE}/${ALBUMFILE}'
  VAOUTPUTFORMAT='${OUTPUT}/Various/${ALBUMFILE}'
  ONETRACKOUTPUTFORMAT=$OUTPUTFORMAT
  VAONETRACKOUTPUTFORMAT=$VAOUTPUTFORMAT

  MAXPROCS=2
  BATCHNORM=n
  NOGAP=n
  EJECTCD=y


  #--------------------------------------------------------------------------#
  #  A post_encode function to embed album art downloaded with abcde 2.7     #
  #  and greater using the new getalbumart function. OUTPUTTYPE must be      #
  #  flac and and tagging is with metaflac. To use this function copy the    #
  #  entire code block and paste it into your ~/.abcde.conf file.            #
  #                                                                          #
  #                abcde: Downloading Album Art...                           #
  #         http://www.andrews-corner.org/getalbumart.html                   #
  #--------------------------------------------------------------------------#
  post_encode ()
  {
      ARTISTFILE="$(mungefilename "$TRACKARTIST")"
      ALBUMFILE="$(mungefilename "$DALBUM")"

      if [ "$VARIOUSARTISTS" = "y" ] ; then
          FINDPATH="$(eval echo "$VAOUTPUTFORMAT")"
      else
          FINDPATH="$(eval echo "$OUTPUTFORMAT")"
      fi

      FINALDIR="$(dirname "$OUTPUTDIR/$FINDPATH")"
      cd "$FINALDIR"

      if [ "$OUTPUTTYPE" = "flac" ] ; then
          vecho "Preparing to embed the album art..." >&2
      else
          vecho "Not embedding album art, you need flac output.." >&2
          return 1
      fi

      if [ -e "cover.jpg" ] ; then
          for i in *.flac
          do
              metaflac --import-picture-from=cover.jpg "$i"
          done

          mv $ALBUMARTFILE ${ALBUMFILE}.jpg
          vecho "Your files have had the album art embedded..." >&2
      else
          vecho "No album art found so no image embedded..." >&2
      fi
  }
#+end_src

* GIT
#+begin_src conf :tangle "~/.gitconfig"
  [user]
  name = Sebastien Le Maguer
  email = lemagues@tcd.ie

  [push]
  default = simple

  [diff "md"]
  textconv = markdown

  [core]
  excludesfile = /home/lemagues/.gitignore
  editor = emacs
  pager = /home/lemagues/environment/local/bin/delta --theme="GitHub"

  [interactive]
  diffFilter = /home/lemagues/environment/local/bin/delta --color-only

  # [gpg]
  # 	program = gpgv2

  # [commit]
  # 	gpgsign = true

  [include]
  path = /home/lemagues/.private_git
#+end_src
* wezterm
#+begin_src lua :tangle "~/.config/wezterm/wezterm.lua" :mkdirp yes
  local wezterm = require 'wezterm';
  return {
     -- Window
     hide_tab_bar_if_only_one_tab = true,
     enable_scroll_bar = true,
     scrollback_lines = 10000,

     -- Color scheme
     colors = {
        tab_bar = {
           -- The color of the strip that goes along the top of the window
           background = "#262626",

           -- The active tab is the one that has focus in the window
           active_tab = {
              bg_color = "#404040", -- The color of the background area for the tab
              fg_color = "#c0c0c0", -- The color of the text for the tab
              intensity = "Bold",
              underline = "Single",
              italic = false,
              strikethrough = false,
           },

           -- Inactive tabs are the tabs that do not have focus
           inactive_tab = {
              bg_color = "#202020",
              fg_color = "#808080",
           },

           -- You can configure some alternate styling when the mouse pointer
           -- moves over inactive tabs
           inactive_tab_hover = {
              bg_color = "#363636",
              fg_color = "#909090",
              italic = false,
           }
        },

        -- Default
        foreground = "black",
        background = "#ecf0f1",

        -- Selection colors
        selection_fg = "black",
        selection_bg = "#1abc9c",

        -- Cursor
        cursor_bg = "#e67e22",
        cursor_fg = "black",
        cursor_border = "#e67e22",

        -- The color of the scrollbar "thumb"; the portion that represents the current viewport
        scrollbar_thumb = "#909090",

        -- The color of the split lines between panes
        split = "#909090",

        -- Terminal color scheme
     },

     -- Font
     harfbuzz_features = {"kern", "liga", "clig", "calt"},
     font = wezterm.font'Roboto Mono',
     font_rules = {
        {
           intensity = 'Normal',
           font = wezterm.font'Roboto Mono'
        },
        {
           intensity = 'Bold',
           font = wezterm.font'Roboto Mono',
           -- bold = true
        }
     },
     font_size = 10.0,


     -- Keys
     keys = {
        -- Tabs
        {key="t", mods="CTRL|SHIFT", action=wezterm.action{SpawnTab="CurrentPaneDomain"}},

        -- Splits
        {key="o", mods="CTRL|SHIFT", action=wezterm.action{SplitVertical={domain="CurrentPaneDomain"}}},
        {key="e", mods="CTRL|SHIFT", action=wezterm.action{SplitHorizontal={domain="CurrentPaneDomain"}}},

        -- ???
        {key="w", mods="CTRL|SHIFT", action=wezterm.action{CloseCurrentPane={confirm=false}}},

        -- move tabs
        {key="LeftArrow", mods="CTRL", action=wezterm.action{MoveTabRelative=-1}},
        {key="RightArrow", mods="CTRL", action=wezterm.action{MoveTabRelative=1}},
     },

     -- Additional behaviour
     exit_behavior = "Close",
  }

#+end_src

* COMMENT some extra configuration
